<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubewarden: Kubernetes Dynamic Admission at your fingertips on Kubewarden</title><link>/</link><description>Recent content in Kubewarden: Kubernetes Dynamic Admission at your fingertips on Kubewarden</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 16 Apr 2021 13:28:46 +0200</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Secure Supply Chain with Kubewarden: securing Kubewarden policies</title><link>/blog/2022/04/securing-kubewarden-policies/</link><pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate><guid>/blog/2022/04/securing-kubewarden-policies/</guid><description>With the recent releases, Kubewarden stack is now gaining support for verifying the integrity and authenticity of contents using the Sigstore project.
In this post, we focus on Kubewarden Policies and how to create a Secure Supply Chain for them.
Sigstore? Since a full Sigstore dive is not for this post, we recommend their nice docs.
In short, Sigstore provides an automatable workflow thought out to match the distributed Open Source development model.</description></item><item><title>CRI-O CVE-2022-0811 Mitigation</title><link>/blog/2022/03/cri-o-cve-mitigation/</link><pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate><guid>/blog/2022/03/cri-o-cve-mitigation/</guid><description>Recently a severe CVE in the CRI-O container engine come to public. The flaw in CRI-O allows bad actors to gain root access and run arbitrary code in the host machine.
A fix for the issue is already available and you should update your cluster to avoid any headache in the future. But if you cannot do that right away, use Kubewarden to mitigate the impact of this issue. It&amp;rsquo;s possible to prevent pods with sysctl configuration to run in the cluster with the policy sysctl-psp available in the Policy Hub.</description></item><item><title>Introducing the AdmissionPolicy</title><link>/blog/2022/03/admission-policy/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>/blog/2022/03/admission-policy/</guid><description>Up till now, the only way to define a policy in Kubewarden was to use the ClusterAdmissionPolicy resource that would be applied to cluster-wide resources across all namespaces.
That&amp;rsquo;s why we&amp;rsquo;re thrilled to announce the new AdmissionPolicy resource. This new resource is created inside a namespace and the policies will only process the requests that are targeting the namespace where the AdmissionPolicy is defined. Except from being a &amp;ldquo;namespaced&amp;rdquo; resource, AdmissionPolicy works exactly the same as the ClusterAdmissionPolicy.</description></item><item><title>Multiplatform Kubewarden</title><link>/blog/2022/02/multiplatform-kubewarden/</link><pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate><guid>/blog/2022/02/multiplatform-kubewarden/</guid><description>The Kubewarden team is glad to announce that in the spirit of helping Policy Authors and Cluster Administrators, the project is now officially multiplatform.
The list of supported platforms as of now are:
Policy Server, as a container image:
linux/amd64 (with the musl libc) linux/arm64 (with the musl libc) kwctl, as a standalone binary:
darwin (x86_64) linux (aarch64, with the musl libc) linux (x86_64, with the musl libc) windows (x86_64, with MSVC) We have prioritized the usage of the same dependencies and toolchain on platforms where we were able to do so.</description></item><item><title>Kubewarden policies cover all the Kubernetes Pod Security Policies</title><link>/blog/2022/01/mutating-policy-behave-as-validating/</link><pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate><guid>/blog/2022/01/mutating-policy-behave-as-validating/</guid><description>The Kubewarden team worked tirelessly to create equivalent Kubewarden policies for all the deprecated Pod Security Policies (PSP). In order to reach this very important milestone, the team wrote the policies with the same validations available in the Kubernetes PSPs, and we counted on the community help to map and validate the policies.
This will allow our users to replace deprecated PSPs while continuing to enforce their security rules.
The Kubewarden policies which replace all the Kubernetes PSPs, are available in the Policy Hub, and you can find them by typing the keyword &amp;ldquo;PSP&amp;rdquo;.</description></item><item><title>Policy Server on aarch64</title><link>/blog/2022/01/policy-server-on-aarch64/</link><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate><guid>/blog/2022/01/policy-server-on-aarch64/</guid><description>We recently got notified that the policy-server was crashing in an aarch64 environment. The moment in which it got a request from the API server, it crashed immediately with a SIGSEGV signal.
We figured out that this was only happening when the request was a TLS one, and that the problem was related to the OpenSSL stack and the way we were producing the final image of the policy-server with the OpenSSL stack.</description></item><item><title>First year of Kubewarden</title><link>/blog/2021/12/first-year-of-kubewarden/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>/blog/2021/12/first-year-of-kubewarden/</guid><description>Year 2021 is almost over. Let&amp;rsquo;s take that as a chance to look back at what has been achieved during the 1st year of life of the Kubewarden project.
Finally, I&amp;rsquo;ll also talk about what we plan to do during the next one.
2021 Highlights Project Announcement The Kubewarden project has been introduced to the masses for the 1st time during KubeCon Europe 2021. During this presentation, Rafael and I explained what lead us to rethink how Kubernetes policies could be written and distributed.</description></item><item><title>Deep Dive into policy logging</title><link>/blog/2021/11/deep-dive-into-policy-logging/</link><pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate><guid>/blog/2021/11/deep-dive-into-policy-logging/</guid><description>Policies are regular programs. As such they often have the need to log information. In general, we are used to make our programs log into standard output (stdout) and standard error (stderr) outputs.
However, policies run in a confined WebAssembly environment. For this mechanism to work as usual Kubewarden would need to set up the runtime environment in a way that the policy can write to stdout and stderr file descriptors, and upon completion, Kubewarden can check them &amp;ndash; or stream log messages as they pop up.</description></item><item><title>A new architecture to ease Kubewarden administrators' lives</title><link>/blog/2021/10/new-architecture/new-architecture-to-ease-kubewarden-administrators-lives/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>/blog/2021/10/new-architecture/new-architecture-to-ease-kubewarden-administrators-lives/</guid><description>We are pleased to announce a new architecture for the Kubewarden stack, in line with its journey to maturity:
The introduction of a PolicyServer Custom Resource Definition (CRD) which allows users to describe a policy-server Deployment, together with binding ClusterAdmissionPolicies to a specific PolicyServer instance.
These 2 changes are accompanied by a multitude of improvements to make Kubewarden more comfortable for Kubernetes Administrators, such as validation for Kuberwarden Custom Resources, improvements in Helm Charts, Status and Conditions for ClusterAdmissionPolicies.</description></item><item><title>Towards a universal policy platform</title><link>/blog/2021/09/towards-a-universal-policy-platform/</link><pubDate>Tue, 21 Sep 2021 00:00:00 +0000</pubDate><guid>/blog/2021/09/towards-a-universal-policy-platform/</guid><description>Kubewarden is a policy framework for Kubernetes. It can be used to secure your clusters and to ensure they stay compliant with the rules your organization establishes over time.
By leveraging the power of WebAssembly, Kubewarden allows policy authors to write policies using traditional programming languages such as Rust, Go, AssemblyScript and Swift.
Kubewarden policies, once compiled into WebAssembly modules, are then distributed using regular OCI registries. This allows Operators to have a consistent way to securely distribute both container images and policies.</description></item><item><title>WebAssembly is coming to Cloud Native</title><link>/blog/2021/07/webassembly-is-coming-to-cloud-native/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>/blog/2021/07/webassembly-is-coming-to-cloud-native/</guid><description>Is the title of this post a pun inspired by Christmas or by the Games of Thrones? I can&amp;rsquo;t decide&amp;hellip;
Are my dad jokes as bad as my daughters claim? Probably&amp;hellip;
Is WebAssembly spreading inside of the Cloud Native ecosystem? ðŸ’¯ I have no doubts about that!
First of all, why am I so excited about seeing WebAssembly flourish inside of the Cloud Native ecosystem? Well, it&amp;rsquo;s no secret that I&amp;rsquo;m a huge fan of it.</description></item><item><title>Let's learn Kubewarden - Streaming Event</title><link>/blog/2021/07/learn-kubewarden-streaming-event/</link><pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate><guid>/blog/2021/07/learn-kubewarden-streaming-event/</guid><description>In case you missed, CNCF Ambassador Saiyam Pathak recently hosted a live streaming event on his YouTube channel about Kubewarden. Flavio had the pleasure to join Saiyam and give an overview of the project.
We spoke about Kubernetes Admission Controllers, why we started the Kubewarden project and how it differentiates from other existing open source projects such as Open Policy Agent and Kyverno.
The talk features also a brief overview of WebAssembly, what it is and what are the benefits it provides to Kubewarden.</description></item><item><title>Introducing the PSP host namespaces policy</title><link>/blog/2021/06/introducing-the-psp-host-namespaces-policy/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>/blog/2021/06/introducing-the-psp-host-namespaces-policy/</guid><description>As you probably know, Kubernetes Pod Security Policies (PSPs) are being deprecated in Kubernetes 1.21 &amp;ndash; although these APIs will be served until Kubernetes 1.25 it&amp;rsquo;s a good time to start thinking about what you will use to replace them.
At Kubewarden we have an ongoing effort to replace the Pod Security Policies with small, targeted Kubewarden policies.
Up until now, we have implemented some policies that replace some Pod Security Policies:</description></item><item><title>Introducing kwctl to Kubernetes Administrators</title><link>/blog/2021/06/kwctl-intro-for-kubernetes-administrators/</link><pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate><guid>/blog/2021/06/kwctl-intro-for-kubernetes-administrators/</guid><description>We are pleased to announce the availability of a new tool within the Kubewarden project: kwctl.
kwctl is a command line utility designed to help both policy authors and Kubernetes administrators.
This blog post focuses on the user experience of Kubernetes administrators. Future ones will cover the policy developer side of the story.
A Real-World Example: Controlling Container Capabilities The main character of today&amp;rsquo;s story is Alice. Alice is a Kubernetes administrator who wants to keep her Kubernetes cluster secure.</description></item><item><title>Writing your first policy with Kubewarden</title><link>/blog/2021/06/writing-your-first-policy-with-kubewarden/</link><pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate><guid>/blog/2021/06/writing-your-first-policy-with-kubewarden/</guid><description>Kubewarden is a project focused on security and compliance. Its main goal is to allow you to write, test, distribute and run policies using the tooling that you already know and master, with a focus on controlling Kubernetes inner behaviors.
Policies are written in one of the supported languages, and the target object is a WebAssembly binary artifact. This is how Kubewarden can ensure that no matter where you built the policy, it can run on all platforms without any kind of adaptation.</description></item></channel></rss>