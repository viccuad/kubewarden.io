[{"authors":null,"categories":null,"content":"","date":166752e4,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1667810414,"objectID":"","permalink":"/blog/","postref":"","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/blog/","section":"blog","summary":"","tags":null,"title":"Blog","type":"blog","url":null,"weight":0,"wordcount":0},{"authors":["VÃ­ctor Cuadrado Juan"],"categories":null,"content":"\u003cp\u003eIt\u0026rsquo;s fact of life: as the Kubernetes API evolves, it\u0026rsquo;s periodically reorganized\nor upgraded. This means some Kubernetes resources can be \u003ca href=\"https://kubernetes.io/docs/reference/using-api/deprecation-policy/#deprecating-parts-of-the-api\"\u003edeprecated and later removed\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe deserve to easily keep track of those deprecations and removals. For that, we\nhave just released\nthe \u003ca href=\"https://github.com/kubewarden/deprecated-api-versions-policy/\"\u003edeprecated-api-versions policy\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"a-look-at-the-deprecated-api-versions-policy\"\u003eA look at the deprecated-api-versions policy\u003c/h3\u003e\n\u003cp\u003eThis policy detects the usage of Kubernetes resources that have been deprecated\nor removed from the Kubernetes API.\u003c/p\u003e\n\u003cp\u003eThe policy has two settings:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ekubernetes_version\u003c/code\u003e: The starting version from where to detect deprecated or\nremoved Kubernetes resources. This setting is mandatory.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edeny_on_deprecation:\u003c/code\u003e If true, it will deny the operation on a resource\nthat has been deprecated but not yet removed from the Kubernetes version\nspecified by \u003ccode\u003ekubernetes_version\u003c/code\u003e. This setting is optional, it is set to \u003ccode\u003etrue\u003c/code\u003e by default.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAs an example, \u003ccode\u003eextensions/v1beta1/Ingress\u003c/code\u003e was deprecated in Kubernetes\n\u003ccode\u003e1.14.0\u003c/code\u003e, and removed in \u003ccode\u003ev1.22.0\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWith the following policy settings, an \u003ccode\u003eextensions/v1beta1/Ingress\u003c/code\u003e will be\naccepted in the cluster yet the policy would log its result:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003ekubernetes_version\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.19.0\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003edeny_on_deprecation\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn contrast, with these other settings, the Ingress object would be blocked:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003ekubernetes_version\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.19.0\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003edeny_on_deprecation\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# (the default)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"dont-live-in-the-past\"\u003eDon\u0026rsquo;t live in the past\u003c/h3\u003e\n\u003cp\u003eKubernetes deprecations evolve; as soon as there are new deprecations, the\npolicy will be updated.\u003c/p\u003e\n\u003cp\u003eThe policy versioning scheme tells you up to what version of Kubernetes the\npolicy knows about, e.g. \u003ccode\u003e0.1.0-k8sv1.26.0\u003c/code\u003e means that the policy knows about\ndeprecations up to Kubernetes \u003ccode\u003ev1.26.0\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"back-to-the-future\"\u003eBack to the future\u003c/h3\u003e\n\u003cp\u003eYou are updating your cluster\u0026rsquo;s Kubernetes version, and want to know if you will\nbe in trouble because of deprecated or removed resources in the new version?\u003c/p\u003e\n\u003cp\u003eCheck before updating! Just instantiate the deprecated-api-versions policy with\nthe targetted Kubernetes version and \u003ccode\u003edeny_on_deprecation\u003c/code\u003e set to false, and get\nan overview of future-you problems.\u003c/p\u003e\n\u003ch3 id=\"in-action\"\u003eIn action\u003c/h3\u003e\n\u003cp\u003eAs usual, instantiate a \u003ccode\u003eClusterAdmissionPolicy\u003c/code\u003e (cluster-wide) or\n\u003ccode\u003eAdmissionPolicy\u003c/code\u003e (namespaced) that makes use of the policy.\u003c/p\u003e\n\u003cp\u003eFor this example, let\u0026rsquo;s work in a k8s cluster of version \u003ccode\u003e1.24.0\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eHere\u0026rsquo;s a definition of a cluster-wide policy that rejects resources that were\ndeprecated or removed in Kubernetes version \u003ccode\u003e1.23.0\u003c/code\u003e and earlier:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#ae81ff\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epolicies.kubewarden.io/v1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eClusterAdmissionPolicy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emy-deprecated-api-versions-policy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003emodule\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eghcr.io/kubewarden/policies/deprecated-api-versions:v0.1.0-k8sv1.26.0\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003emutating\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003eapiGroups\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eapiVersions\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eoperations\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003eCREATE\u003c/span\u003e\n    - \u003cspan style=\"color:#ae81ff\"\u003eUPDATE\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003esettings\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ekubernetes_version\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.23.0\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003edeny_on_deprecation\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003cspan style=\"color:#ae81ff\"\u003eEOF\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eInfo:\u003c/strong\u003e In \u003ccode\u003espec.rules\u003c/code\u003e we are checking every resource in every\napiGroup and apiVersions. We are doing it for simplicity in this example, yet\nthe policy\n\u003ca href=\"https://github.com/kubewarden/deprecated-api-versions-policy/blob/b26633515de367cf77b79fb909461a4df6e0e2aa/metadata.yml\"\u003emetadata.yaml\u003c/a\u003e\ncomes with long and complete, machine-generated \u003ccode\u003espec.rules\u003c/code\u003e that covers just\nthe resources that are deprecated.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eOur cluster is on version \u003ccode\u003e1.24.0\u003c/code\u003e, so for example, without the policy we could\nstill instantiate an \u003ccode\u003eautoscaling/v2beta2/HorizontalPodAutoscaler\u003c/code\u003e, even if it\nis deprecated since \u003ccode\u003e1.23.0\u003c/code\u003e (and will be removed in \u003ccode\u003e1.26.0\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eNow with the policy, trying to instantiate an\n\u003ccode\u003eautoscaling/v2beta2/HorizontalPodAutoscaler\u003c/code\u003e resource that is already\ndeprecated will result in its rejection:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF\napiVersion: autoscaling/v2beta2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: php-apache\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: php-apache\n  minReplicas: 1\n  maxReplicas: 10\nEOF\n\nWarning: autoscaling/v2beta2 HorizontalPodAutoscaler is deprecated in v1.23+, unavailable in v1.26+; use autoscaling/v2 HorizontalPodAutoscaler\nError from server: error when creating \u0026#34;STDIN\u0026#34;:\nadmission webhook \u0026#34;clusterwide-my-deprecated-api-versions-policy.kubewarden.admission\u0026#34; denied the request:\nautoscaling/v2beta2 HorizontalPodAutoscaler cannot be used. It has been deprecated starting from 1.23.0. It has been removed starting from 1.26.0. It has been replaced by autoscaling/v2.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe look forward to your feedback :). Have ideas for new policies?\nWould you like more features on existing ones?\nDrop us a line at \u003ca href=\"https://kubernetes.slack.com/archives/C01T3GTC3L7\"\u003e#kubewarden on Slack\u003c/a\u003e!\u003c/p\u003e\n","date":166752e4,"description":"","dir":"blog/2022/11/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"939a1264f049ae3768f6aeb5ff286d15","permalink":"/blog/2022/11/deprecation-policy/","postref":"939a1264f049ae3768f6aeb5ff286d15","publishdate":"2022-11-04T00:00:00Z","readingtime":3,"relpermalink":"/blog/2022/11/deprecation-policy/","section":"blog","summary":"It\u0026rsquo;s fact of life: as the Kubernetes API evolves, it\u0026rsquo;s periodically reorganized or upgraded. This means some Kubernetes resources can be deprecated and later removed.\nWe deserve to easily keep track of those deprecations and removals. For that, we have just released the deprecated-api-versions policy.\nA look at the deprecated-api-versions policy This policy detects the usage of Kubernetes resources that have been deprecated or removed from the Kubernetes API.\nThe policy has two settings:","tags":null,"title":"Keeping track of Kubernetes deprecated resources","type":"blog","url":null,"weight":0,"wordcount":570},{"authors":["VÃ­ctor Cuadrado Juan"],"categories":null,"content":"\u003cp\u003eWe present to you the new\n\u003ca href=\"https://artifacthub.io/packages/kubewarden/volumemounts-policy/volumemounts\"\u003evolumeMounts Policy\u003c/a\u003e:\nIt inspects containers, init containers, and ephemeral containers, and restricts\ntheir usage of volumes by checking the volume name being used in\nthe containers' \u003ccode\u003evolumeMounts[*].name\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou can find it \u003ca href=\"https://artifacthub.io/packages/kubewarden/volumemounts-policy/volumemounts\"\u003epublished in Artifact Hub\u003c/a\u003e.\nAs usual, its artifact is signed with Sigstore in keyless mode, and if you are\ncurious, you can peek into the policy\u0026rsquo;s\n\u003ca href=\"https://github.com/kubewarden/volumemounts-policy\"\u003eimplementation in Rust here\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis new policy joins the already existing\n\u003ca href=\"https://artifacthub.io/packages/kubewarden/volumes-psp/volumes-psp\"\u003evolumes-psp policy\u003c/a\u003e,\nwhich provides an allowlist of volume types, and\n\u003ca href=\"https://artifacthub.io/packages/kubewarden/hostpaths-psp/hostpaths-psp\"\u003ehostpaths-psp policy\u003c/a\u003e,\nwith an allowlist of hostPath volumes.\u003c/p\u003e\n\u003ch3 id=\"what-is-so-useful-about-the-new-volumemounts-policy\"\u003eWhat is so useful about the new volumeMounts policy?\u003c/h3\u003e\n\u003cp\u003eThe existing PSP policies restricted usage of volumes, as a cluster admin. The\nnew volumeMounts policy has settings with 4 operators that enable you to check\nfor compliance and migration usecases, even if you don\u0026rsquo;t have access to\ncontrolling creation of Volumes in the cluster. Let\u0026rsquo;s see them:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ereject: anyIn\u003c/code\u003e: Works as a denylist of your usage of volumes.\nSince we are checking volume names, we can also filter\n\u003ca href=\"https://kubernetes.io/docs/concepts/storage/volumes/#out-of-tree-volume-plugins\"\u003eOut-Of-Tree volumes\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003ereject\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eanyIn\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003evolumeMountsNames\u003c/span\u003e:\n- \u003cspan style=\"color:#ae81ff\"\u003emy-secure-hostpath-volume\u003c/span\u003e\n- \u003cspan style=\"color:#ae81ff\"\u003emy-cache-volume\u003c/span\u003e\n- \u003cspan style=\"color:#ae81ff\"\u003emy-out-of-tree-volume\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ereject: anyNotIn\u003c/code\u003e: Works as an allowlist.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003ereject\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eanyNotIn\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003evolumeMountsNames\u003c/span\u003e:\n- \u003cspan style=\"color:#ae81ff\"\u003emy-secrets-volume\u003c/span\u003e\n- \u003cspan style=\"color:#ae81ff\"\u003emy-volume2\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ereject: allAreUsed\u003c/code\u003e: The container cannot use all listed volumes at once.\nHelpful for enforcing migration between volumes, for example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003ereject\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eallAreUsed\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003evolumeMountsNames\u003c/span\u003e:\n- \u003cspan style=\"color:#ae81ff\"\u003eold-deprecated-volume\u003c/span\u003e\n- \u003cspan style=\"color:#ae81ff\"\u003enew-supported-volume\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ereject: notAllAreUsed\u003c/code\u003e: The container can use all listed volumes at once, but only one of them.\nHelpful for enforcing backup operations, for example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003ereject\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enotAllAreUsed\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003evolumeMountsNames\u003c/span\u003e:\n- \u003cspan style=\"color:#ae81ff\"\u003ework-volume\u003c/span\u003e\n- \u003cspan style=\"color:#ae81ff\"\u003ebackup-volume\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"in-action\"\u003eIn action\u003c/h3\u003e\n\u003cp\u003eJust instantiate an \u003ccode\u003eAdmissionPolicy\u003c/code\u003e or cluster-wide \u003ccode\u003eClusterAdmissionPolicy\u003c/code\u003e\nwith the policy module and settings. Here\u0026rsquo;s a definition of a policy that\nrejects any workload resource (Pods, Deployments, Cronjobs..) that doesn\u0026rsquo;t\nadhere to the provided \u003ccode\u003evolumeMounts\u003c/code\u003e allowlist:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#ae81ff\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epolicies.kubewarden.io/v1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eClusterAdmissionPolicy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003evolumemounts-policy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003emodule\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eghcr.io/kubewarden/policies/volumemounts:v0.1.2\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003emutating\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003eapiGroups\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eapiVersions\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pods\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;deployments\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;replicasets\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;daemonsets\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;replicationcontrollers\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;jobs\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cronjobs\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eoperations\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003eCREATE\u003c/span\u003e\n    - \u003cspan style=\"color:#ae81ff\"\u003eUPDATE\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003esettings\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ereject\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eanyNotIn\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# as an allowlist\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003evolumeMountsNames\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003emy-volume\u003c/span\u003e\n    - \u003cspan style=\"color:#ae81ff\"\u003emy-volume2\u003c/span\u003e\n\n\u003cspan style=\"color:#ae81ff\"\u003eEOF\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet\u0026rsquo;s instantiate a Pod that uses a Volume with a name not in the allowlist:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-pd\nspec:\n  containers:\n  - image: registry.k8s.io/test-webserver\n    name: test-container\n    volumeMountsNames:\n    - mountPath: /cache\n      name: cache-volume\n  volumes:\n  - name: cache-volume\n    emptyDir: {}\nEOF\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAs expected, the Pod is rejected:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eError from server: error when creating \u0026#34;STDIN\u0026#34;:\nadmission webhook \u0026#34;clusterwide-volumemounts-policy.kubewarden.admission\u0026#34; denied the request:\ncontainer test-container is invalid: volumeMount names not allowed: [\u0026#34;cache-volume\u0026#34;]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTry the policy for yourself!\u003c/p\u003e\n\u003cp\u003eAs usual, we look forward to your feedback :). Have ideas for new policies?\nWould you like more features on existing ones?\nDrop us a line at \u003ca href=\"https://kubernetes.slack.com/archives/C01T3GTC3L7\"\u003e#kubewarden on Slack\u003c/a\u003e!\u003c/p\u003e\n","date":1667433600,"description":"","dir":"blog/2022/11/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"9952aeca2dd143457c0d3daebed2a75e","permalink":"/blog/2022/11/volumemounts-policy/","postref":"9952aeca2dd143457c0d3daebed2a75e","publishdate":"2022-11-03T00:00:00Z","readingtime":3,"relpermalink":"/blog/2022/11/volumemounts-policy/","section":"blog","summary":"We present to you the new volumeMounts Policy: It inspects containers, init containers, and ephemeral containers, and restricts their usage of volumes by checking the volume name being used in the containers' volumeMounts[*].name.\nYou can find it published in Artifact Hub. As usual, its artifact is signed with Sigstore in keyless mode, and if you are curious, you can peek into the policy\u0026rsquo;s implementation in Rust here.\nThis new policy joins the already existing volumes-psp policy, which provides an allowlist of volume types, and hostpaths-psp policy, with an allowlist of hostPath volumes.","tags":null,"title":"Securing the usage of volumeMounts","type":"blog","url":null,"weight":0,"wordcount":446},{"authors":["JosÃ© Guilherme Vanz"],"categories":null,"content":"\u003cp\u003eWe\u0026rsquo;re glad to present the new \u003ca href=\"https://github.com/kubewarden/environment-variable-policy\"\u003eenvironment-variable-policy\u003c/a\u003e to Kubewarden users. With this policy, you will now be able to inspect init containers and ephemeral containers. You can also restrict their usage by reviewing the names and values defined under the containers' \u003ca href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#envvar-v1-core\"\u003e\u003ccode\u003eenv[*]\u003c/code\u003e\u003c/a\u003e field.\u003c/p\u003e\n\u003cp\u003eAs always, the policy can be found in \u003ca href=\"https://artifacthub.io/packages/kubewarden/environment-variable-policy/environment-variable-policy\"\u003eArtifactHub\u003c/a\u003e and all the \u003ca href=\"https://github.com/kubewarden/environment-variable-policy/releases\"\u003eartifacts\u003c/a\u003e, including the BOM files, are signed with Sigstore.\u003c/p\u003e\n\u003ch2 id=\"what-is-so-useful-about-the-new-environment-variable-policy\"\u003eWhat is so useful about the new environment-variable policy?\u003c/h2\u003e\n\u003cp\u003eThis policy complements the recently released \u003ca href=\"https://www.kubewarden.io/blog/2022/10/env-var-secrets/\"\u003eenv-variable-secrets-scanner\u003c/a\u003e policy. Both policies focus on validating the environment values provided to Kubernetes Pod objects. In this new policy, users can validate which variables name and values their resources can have.\u003c/p\u003e\n\u003cp\u003eThe policy controls the environment variable defined in the containers using the four operators described in the next sections.\u003c/p\u003e\n\u003ch3 id=\"anyin\"\u003eanyIn\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eanyIn\u003c/code\u003e works as a deny list of your usage of environment variables. It checks if any of the \u003ccode\u003eenvironmentVariables\u003c/code\u003e are in the Pod/Workload resource:\u003c/p\u003e\n\u003cp\u003eFor example, given the following configuration:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003esettings\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003ereject\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eanyIn\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eenvironmentVariables\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo2\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar2\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe following Pod would be rejected:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePod\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx:1.14.2\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBut the next one would be accepted:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePod\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx:1.14.2\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo3\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar3\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"anynotin\"\u003eanyNotIn\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eanyNotIn\u003c/code\u003e works as an allow list. Checks if any of the \u003ccode\u003eenvironmentVariables\u003c/code\u003e are not in the Pod/Workload resource:\u003c/p\u003e\n\u003cp\u003eFor example, given the following configuration:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003esettings\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003ereject\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eanyNotIn\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eenvironmentVariables\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo2\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar2\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe following Pod would be rejected:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePod\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx:1.14.2\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo3\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar3\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBut the next one would be accepted:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePod\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx:1.14.2\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo2\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar2\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"allareused\"\u003eallAreUsed\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eallAreUsed\u003c/code\u003e the container cannot use all listed environment variables at once. Checks if all of the \u003ccode\u003eenvironmentVariables\u003c/code\u003e are in the Pod/Workload resource:\u003c/p\u003e\n\u003cp\u003eFor example, given the following configuration:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003esettings\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003ereject\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eallAreUsed\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eenvironmentVariables\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo2\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar2\u0026#34;\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo3\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar3\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe following Pod would be rejected:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePod\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx:1.14.2\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo2\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar2\u0026#34;\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo3\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar3\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBut the next one would be accepted:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePod\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx:1.14.2\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo3\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar3\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"notallareused\"\u003enotAllAreUsed\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003enotAllAreUsed\u003c/code\u003e the container can use all listed environment variables at once. But it cannot has only a subset of them.\nChecks if all of the \u003ccode\u003eenvironmentVariables\u003c/code\u003e are not in the Pod/Workload resource\u003c/p\u003e\n\u003cp\u003eFor example, given the following configuration:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003esettings\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003ereject\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enotAllAreUsed\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eenvironmentVariables\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo2\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar2\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe following Pod would be rejected:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePod\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx:1.14.2\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBut the next one would be accepted:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePod\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx:1.14.2\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003econtainerPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eenv\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\n        - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;foo2\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bar2\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"using-multiple-rules\"\u003eUsing multiple rules\u003c/h2\u003e\n\u003cp\u003eThe user is allowed to define multiple rules in the policy settings. The resource must be approved by all of them in order to be accepted into the cluster.\nLet\u0026rsquo;s take a look in an example. Consider the following rules:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF\napiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: environment-variable-policy\nspec:\n  module: ghcr.io/kubewarden/policies/environment-variable-policy:v0.1.1\n  mutating: false\n  rules:\n  - apiGroups: [\u0026#34;apps\u0026#34;]\n    apiVersions: [\u0026#34;v1\u0026#34;]\n    resources: [\u0026#34;deployments\u0026#34;]\n    operations:\n    - CREATE\n    - UPDATE\n  settings:\n    rules:\n      - reject: anyIn\n        environmentVariables:\n          - name: \u0026#34;foo\u0026#34;\n            value: \u0026#34;bar\u0026#34;\n          - name: \u0026#34;foo2\u0026#34;\n            value: \u0026#34;bar2\u0026#34;\n      - reject: allAreUsed\n        environmentVariables:\n          - name: \u0026#34;foo3\u0026#34;\n            value: \u0026#34;bar3\u0026#34;\n          - name: \u0026#34;foo4\u0026#34;\n            value: \u0026#34;bar4\u0026#34;\nEOF\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe following two \u003ccode\u003eDeployments\u003c/code\u003e will be rejected. The first one will be rejected by the first rule:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: template-nginx\n  template:\n    metadata:\n      labels:\n        app: template-nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        env:\n          - name: \u0026#34;foo\u0026#34;\n            value: \u0026#34;bar\u0026#34;\nEOF\nError from server: error when creating \u0026#34;STDIN\u0026#34;: admission webhook \u0026#34;clusterwide-environment-variable-policy.kubewarden.admission\u0026#34; denied the request: Resource cannot define any of the environment variables from the rule.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe second \u003ccode\u003eDeployment\u003c/code\u003e  will be reject by the second rule:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: template-nginx\n  template:\n    metadata:\n      labels:\n        app: template-nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        env:\n          - name: \u0026#34;foo3\u0026#34;\n            value: \u0026#34;bar3\u0026#34;\n          - name: \u0026#34;foo4\u0026#34;\n            value: \u0026#34;bar4\u0026#34;\nEOF\nError from server: error when creating \u0026#34;STDIN\u0026#34;: admission webhook \u0026#34;clusterwide-environment-variable-policy.kubewarden.admission\u0026#34; denied the request: Resource cannot have all the environment variables from the rule defined.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBut when we try to deploy a resource that respects both rules, it will be created with no issues:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: template-nginx\n  template:\n    metadata:\n      labels:\n        app: template-nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        env:\n          - name: \u0026#34;foo3\u0026#34;\n            value: \u0026#34;bar3\u0026#34;\nEOF\ndeployment.apps/nginx-deployment created\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"a-use-case-example\"\u003eA use case example\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s see how users can enforce that their resources have a minimum set of required environment variables. For that, it possible to use the \u003ccode\u003eallAreUsed\u003c/code\u003e operator:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF\napiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: environment-variable-policy\nspec:\n  module: ghcr.io/kubewarden/policies/environment-variable-policy:v0.1.1\n  mutating: false\n  rules:\n  - apiGroups: [\u0026#34;apps\u0026#34;]\n    apiVersions: [\u0026#34;v1\u0026#34;]\n    resources: [\u0026#34;deployments\u0026#34;]\n    operations:\n    - CREATE\n    - UPDATE\n  settings:\n    rules:\n      - reject: anyIn\n        environmentVariables:\n          - name: \u0026#34;foo\u0026#34;\n            value: \u0026#34;bar\u0026#34;\n          - name: \u0026#34;foo2\u0026#34;\n            value: \u0026#34;bar2\u0026#34;\n\nEOF\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWith the above policy only resources that have \u003cstrong\u003eall\u003c/strong\u003e the variables defined in the \u003ccode\u003eenvironmentVariables\u003c/code\u003e field will be allowed.\u003c/p\u003e\n\u003cp\u003eNow try to deploy a resource that violates that rule:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: template-nginx\n  template:\n    metadata:\n      labels:\n        app: template-nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        env:\n          - name: \u0026#34;foo\u0026#34;\n            value: \u0026#34;bar\u0026#34;\nEOF\nError from server: error when creating \u0026#34;STDIN\u0026#34;: admission webhook \u0026#34;clusterwide-environment-variable-policy.kubewarden.admission\u0026#34; denied the request: Resource cannot define any of the environment variables from the rule.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eWe hope this article provided you a nice overview about the potential use cases of this policy and how to use it.\nGive it a try and, as usual, we look forward to your feedback :).\u003c/p\u003e\n\u003cp\u003eHave ideas for new policies?  Would you like more features on existing ones?\nDrop us a line at \u003ca href=\"https://kubernetes.slack.com/archives/C01T3GTC3L7\"\u003e#kubewarden on Slack\u003c/a\u003e!\u003c/p\u003e\n","date":1667174400,"description":"","dir":"blog/2022/10/","expirydate":-62135596800,"fuzzywordcount":1200,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"e120b2a9144f4b6f618d865b401705d9","permalink":"/blog/2022/10/envvar-policy/","postref":"e120b2a9144f4b6f618d865b401705d9","publishdate":"2022-10-31T00:00:00Z","readingtime":6,"relpermalink":"/blog/2022/10/envvar-policy/","section":"blog","summary":"We\u0026rsquo;re glad to present the new environment-variable-policy to Kubewarden users. With this policy, you will now be able to inspect init containers and ephemeral containers. You can also restrict their usage by reviewing the names and values defined under the containers' env[*] field.\nAs always, the policy can be found in ArtifactHub and all the artifacts, including the BOM files, are signed with Sigstore.\nWhat is so useful about the new environment-variable policy?","tags":null,"title":"Enforcing compliance of container's environment variables","type":"blog","url":null,"weight":0,"wordcount":1169},{"authors":["Flavio Castelli"],"categories":null,"content":"\u003cp\u003eThe Kubewarden development team is happy to announce the release of the Kubewarden 1.3 stack.\u003c/p\u003e\n\u003cp\u003eIn addition to the usual amount of small fixes, this release focused on the following\nthemes.\u003c/p\u003e\n\u003ch2 id=\"improve-end-users-confidence\"\u003eImprove end users confidence\u003c/h2\u003e\n\u003cp\u003eWe want our users to feel confident about using Kubewarden, knowing that good\ndevelopment and security practices are being followed by the Kubewarden project.\nWe think this is particularly relevant to Kubewarden, given our users trust us\nto keep their Kubernetes clusters secure and compliant.\u003c/p\u003e\n\u003cp\u003eTo achieve that, we\u0026rsquo;ve joined the \u003ca href=\"https://clomonitor.io/\"\u003eCLOMonitor\u003c/a\u003e initiative.\nThis is a project from the Clound Native Foundation which performs a series of\nchecks to ensure certain project health best practices are met.\u003c/p\u003e\n\u003cp\u003eWe are proud to announce that Kubewarden is currently A-rated, with a score above\nthe 90%. The results are completely transparent and can be found by visiting\nthe \u003ca href=\"https://clomonitor.io/projects/cncf/kubewarden\"\u003eKubewarden dashboard\u003c/a\u003e\non the CLOMonitor website.\u003c/p\u003e\n\u003ch2 id=\"performance-improvements\"\u003ePerformance improvements\u003c/h2\u003e\n\u003cp\u003eWe have reduced the startup time of Policy Server, the component in charge of\nrunning all our WebAssembly policies.\nNow, starting a Policy Server with multiple policies defined is an order of\nmagnitude faster.\u003c/p\u003e\n\u003ch2 id=\"better-sigstore-integration\"\u003eBetter Sigstore integration\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://sigstore.dev\"\u003eSigstore\u003c/a\u003e is a project that is changing the way software\ncan be safely distributed.\u003c/p\u003e\n\u003cp\u003eWe\u0026rsquo;ve seen the potential of Sigstore and we\u0026rsquo;ve embraced the project not just to\nsign our own artifacts (binaries, container images and even policies), but also\nto offer policies capable of\n\u003ca href=\"https://artifacthub.io/packages/kubewarden/verify-image-signatures/verify-image-signatures\"\u003everifying image signatures\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eStarting from the 1.3.0 release, Kubewarden can handle Sigstore signatures\nproduced using a PKCS11 token, like hardware security modules (HSM) and smart\ncards.\u003c/p\u003e\n\u003cp\u003eThis has been made possible by the work done by members of the Kubewarden team\ninside of the official \u003ca href=\"https://github.com/sigstore/sigstore-rs\"\u003eSigstore SDK for Rust\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eInfo:\u003c/strong\u003e given all the Sigstore verification code happens on the host side,\nnot inside of WebAssembly module, there\u0026rsquo;s no need to update the\n\u003ca href=\"https://artifacthub.io/packages/kubewarden/verify-image-signatures/verify-image-signatures\"\u003eVerify Image Signatures\u003c/a\u003e\npolicy to gain this functionality.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTalking about Sigstore integration, we\u0026rsquo;ve been proud consumers and\nambassadors of the keyless signing mechanism. We believe this functionality\nprovides a secure way to sign and verify artifacts, even inside of CI/CD\npipelines, without the hassle of maintaining a public key infrastructure.\u003c/p\u003e\n\u003cp\u003eWe\u0026rsquo;re happy to learn that keyless signing is now considered stable by\nSigstore community after the\nrecent announcement of \u003ca href=\"https://blog.sigstore.dev/sigstore-ga-ddd6ba67894d\"\u003eRekor and Fulcio being General Available\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"policy-improvements\"\u003ePolicy improvements\u003c/h2\u003e\n\u003cp\u003eWe have recently created some new Kubewarden policies. All of them are\nalready available on \u003ca href=\"https://artifacthub.io\"\u003eArtifactHub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eSo far we\u0026rsquo;ve published a \u003ca href=\"/blog/2022/10/env-var-secrets/\"\u003eblog post\u003c/a\u003e\ndedicated to the\n\u003ca href=\"https://artifacthub.io/packages/kubewarden/env-variable-secrets-scanner/env-variable-secrets-scanner\"\u003eenvironment variable secret scanner\u003c/a\u003e\npolicy.\nIn next weeks we will publish other posts dedicated to the\n\u003ca href=\"https://artifacthub.io/packages/kubewarden/volumemounts-policy/volumemounts\"\u003evolumeMounts\u003c/a\u003e\nand to the\n\u003ca href=\"https://artifacthub.io/packages/kubewarden/environment-variable-policy/environment-variable-policy\"\u003eenvironment variable compliance\u003c/a\u003e\npolicies.\u003c/p\u003e\n\u003cp\u003eWe\u0026rsquo;ve also updated some of the existing policies that used to target only \u003ccode\u003ePod\u003c/code\u003e\nresources. These policies have been extended to be able to analyze also\nother higher level Kubernetes resources like \u003ccode\u003eDeployment\u003c/code\u003e, \u003ccode\u003eReplicaSet\u003c/code\u003e,\n\u003ccode\u003eDaemonSet\u003c/code\u003e, \u003ccode\u003eReplicationController\u003c/code\u003e, \u003ccode\u003eJob\u003c/code\u003e and \u003ccode\u003eCronJob\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis allows the Kubernetes administrators to decide at which level the policy\nis going to operate:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTarget Pod: different kind of resources (be them native or CRDs) can create Pod\nobjects. By having the policy target Pods, we guarantee that all the Pods are going\nto be compliant, even those created by CRDs.\nHowever, this could lead to confusion among users of the cluster,\nas high level Kubernetes resources would be successfully created, but would\nstay in a non reconciled state.\nFor example: a Deployment defining a non compliant Pod would be accepted\ninto the cluster, but it would never have all its replicas running because\nthe policy would prevent the creation of its Pods.\u003c/li\u003e\n\u003cli\u003eTarget higher level resources (e.g: Deployment): users of the cluster\nwill get immediate feedback about rejections. However, non compliant pods\ncreated by other higher level resources (be it native to Kubernetes,\nor CRDs), would not get rejected. For example, a Policy targeting only\nDeployment objects would not prevent the creation of non compliant Pods\nspawned by a DaemonSet.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere\u0026rsquo;s no right or wrong approach, it\u0026rsquo;s even possible to use both of them\nat the same time (target Pods plus some higher level resource). What\nmatters is that Kubernetes administrators have full control of this detail.\u003c/p\u003e\n\u003ch2 id=\"whats-next\"\u003eWhat\u0026rsquo;s next\u003c/h2\u003e\n\u003cp\u003eWe\u0026rsquo;re already actively working on what is going to become our next release.\u003c/p\u003e\n\u003cp\u003eIn the meantime, try out the freshly backed 1.3.0 release and feel free\nto\n\u003ca href=\"https://kubernetes.slack.com/?redir=%2Fmessages%2Fkubewarden\"\u003ereach out to us\u003c/a\u003e\nto share your feedback!\u003c/p\u003e\n","date":1666828800,"description":"","dir":"blog/2022/10/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"12ddd633c77e09ff3ba74a1494a43bf4","permalink":"/blog/2022/10/kubewarden_1_3_release/","postref":"12ddd633c77e09ff3ba74a1494a43bf4","publishdate":"2022-10-27T00:00:00Z","readingtime":4,"relpermalink":"/blog/2022/10/kubewarden_1_3_release/","section":"blog","summary":"The Kubewarden development team is happy to announce the release of the Kubewarden 1.3 stack.\nIn addition to the usual amount of small fixes, this release focused on the following themes.\nImprove end users confidence We want our users to feel confident about using Kubewarden, knowing that good development and security practices are being followed by the Kubewarden project. We think this is particularly relevant to Kubewarden, given our users trust us to keep their Kubernetes clusters secure and compliant.","tags":null,"title":"Kubewarden 1.3 is out!","type":"blog","url":null,"weight":0,"wordcount":715},{"authors":["Raul Cabello Martin"],"categories":null,"content":"\u003cp\u003eWe are thrilled to announce you can now scan your environment variables for secrets with the new\n\u003ca href=\"https://github.com/kubewarden/env-variable-secrets-scanner-policy\"\u003eenv-variable-secrets-scanner-policy\u003c/a\u003e! This policy rejects a \u003ccode\u003ePod\u003c/code\u003e\nor \u003ca href=\"https://kubernetes.io/docs/concepts/workloads/\"\u003eworkload resources\u003c/a\u003e such as \u003ccode\u003eDeployments\u003c/code\u003e, \u003ccode\u003eReplicaSets\u003c/code\u003e, \u003ccode\u003eDaemonSets\u003c/code\u003e\n, \u003ccode\u003eReplicationControllers\u003c/code\u003e, \u003ccode\u003eJobs\u003c/code\u003e, \u003ccode\u003eCronJobs\u003c/code\u003e etc. if a secret is found in the environment variable\nwithin a container, init container, or ephemeral container. Secrets that are leaked in plain text or\nin base64 encoded variables are detected.\u003c/p\u003e\n\u003cp\u003eThis policy uses \u003ca href=\"https://github.com/newrelic/rusty-hog\"\u003erusty hog\u003c/a\u003e, an open source secret scanner from New Relic. The\npolicy looks for the following secrets being leaked: RSA private keys, SSH private keys and API tokens for different\nservices like Slack, Facebook tokens, AWS, Google, New Relic Keys, etc\u003c/p\u003e\n\u003cp\u003eThis is a perfect example of the real power of \u003ccode\u003eKubewarden\u003c/code\u003e and \u003ccode\u003eWebAssembly\u003c/code\u003e! We didn\u0026rsquo;t have to write all the complex\ncode and regular expressions for scanning secrets. Instead, we used an existing open source library that already\ndoes this job. We can do this because \u003ccode\u003eKubewarden\u003c/code\u003e \u003ca href=\"https://docs.kubewarden.io/writing-policies\"\u003epolicies\u003c/a\u003e are delivered\nas \u003ccode\u003eWebAssembly\u003c/code\u003e binaries.\u003c/p\u003e\n\u003cp\u003eHave an idea for a new \u003ccode\u003eKubewarden\u003c/code\u003e policy? You don\u0026rsquo;t need to write all the code from scratch! You can use\nyour favourite libraries in any of the \u003ca href=\"https://docs.kubewarden.io/writing-policies\"\u003esupported programming languages\u003c/a\u003e, as long\nas they can be compiled to \u003ccode\u003eWebAssembly\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"lets-see-it-in-action\"\u003eLet\u0026rsquo;s see it in action!\u003c/h2\u003e\n\u003cp\u003eFor this example, a Kubernetes cluster with Kubewarden already installed is required. The installation process is\ndescribed in the \u003ca href=\"https://docs.kubewarden.io/quick-start\"\u003equick start guide\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s create a \u003ccode\u003eClusterAdmissionPolicy\u003c/code\u003e that will scan all pods for secrets in their environment variables:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF\napiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: env-variable-secrets\nspec:\n  module: ghcr.io/kubewarden/policies/env-variable-secrets-scanner:v0.1.2\n  mutating: false\n  rules:\n  - apiGroups: [\u0026#34;\u0026#34;]\n    apiVersions: [\u0026#34;v1\u0026#34;]\n    resources: [\u0026#34;pods\u0026#34;, \u0026#34;deployments\u0026#34;, \u0026#34;replicasets\u0026#34;, \u0026#34;daemonsets\u0026#34;, \u0026#34;replicationcontrollers\u0026#34;, \u0026#34;jobs\u0026#34;, \u0026#34;cronjobs\u0026#34;]\n    operations:\n    - CREATE\n    - UPDATE\nEOF\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eVerify we are not allowed to create a Pod with an RSA private key\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF                                                                  \napiVersion: v1     \nkind: Pod\nmetadata:\n  name: secret\nspec:\n  containers:\n    - name: nginx\n      image: nginx:latest\n      env:\n        - name: rsa\n          value: \u0026#34;-----BEGIN RSA PRIVATE KEY-----\\nMIICWwIBAAKBgHnGVTJSU+8m8JHzJ4j1/oJxc/FwZakIIhCpIzDL3sccOjyAKO37\\nVCVwKCXz871Uo+LBWhFoMVnJCEoPgZVJFPa+Om3693gdachdQpGXuMp6fmU8KHG5\\nMfRxoc0tcFhLshg7luhUqu37hAp82pIySp+CnwrOPeHcpHgTbwkk+dufAgMBAAEC\\ngYBXdoM0rHsKlx5MxadMsNqHGDOdYwwxVt0YuFLFNnig6/5L/ATpwQ1UAnVjpQ8Y\\nmlVHhXZKcFqZ0VE52F9LOP1rnWUfAu90ainLC62X/aKvC1HtOMY5zf8p+Xq4WTeG\\nmP4KxJakEZmk8GNaWvwp/bn480jxi9AkCglJzkDKMUt0MQJBAPFMBBxD0D5Um07v\\nnffYrU2gKpjcTIZJEEcvbHZV3TRXb4sI4WznOk3WqW/VUo9N83T4BAeKp7QY5P5M\\ntVbznhcCQQCBMeS2C7ctfWI8xYXZyCtp2ecFaaQeO3zCIuCcCqv+AyMQwX6GnzNW\\nnVvAeDAcLkjhEqg6QW5NehcfilJbj2u5AkEA5Mk5oH8f5OmdtHN36Tb14wM5QGSo\\n3i5Kk+RAR9dT/LvmlAJgkzyOyJz/XHz8Ycn8S2yZjXkHV7i+7utWiVJGEwJAOhXN\\nh0+DHs+lkD8aK80EP8X5SQSzBeim8b2ukFl39G9Cn7DvCuWetk1vR/yBXNouaAr0\\nWaS7S9gdd0/AMWws+QJAGjYTz7Ab9tLGT7zCTSHPzwk8m+gm4wMfChN4yAyr1kac\\nTLzJZaNLjNmAfUu5azZTJ2LG9HR0B7jUyQm4aJ68hA==\\n-----END RSA PRIVATE KEY-----\u0026#34;\nEOF\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis will produce the following output:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eError from server: error when creating \u0026#34;STDIN\u0026#34;: admission webhook \u0026#34;clusterwide-env-variable-secrets.kubewarden.admission\u0026#34; denied\nthe request: The following secrets were found in environment variables -\u0026gt; container: nginx, key: rsa, reason: RSA private key. \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCheck it out and let us know if you have any questions! Stay tuned for more blogs on new Kubewarden policies!\u003c/p\u003e\n","date":1666569600,"description":"","dir":"blog/2022/10/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"64ff133796f1a228a2e67a2188fc4933","permalink":"/blog/2022/10/env-var-secrets/","postref":"64ff133796f1a228a2e67a2188fc4933","publishdate":"2022-10-24T00:00:00Z","readingtime":2,"relpermalink":"/blog/2022/10/env-var-secrets/","section":"blog","summary":"We are thrilled to announce you can now scan your environment variables for secrets with the new env-variable-secrets-scanner-policy! This policy rejects a Pod or workload resources such as Deployments, ReplicaSets, DaemonSets , ReplicationControllers, Jobs, CronJobs etc. if a secret is found in the environment variable within a container, init container, or ephemeral container. Secrets that are leaked in plain text or in base64 encoded variables are detected.\nThis policy uses rusty hog, an open source secret scanner from New Relic.","tags":null,"title":"Scanning secrets in environment variables","type":"blog","url":null,"weight":0,"wordcount":386},{"authors":["VÃ­ctor Cuadrado Juan"],"categories":null,"content":"\u003cp\u003eWe are happy to announce the first minor release of v1.0: \u003cstrong\u003ev1.1.1\u003c/strong\u003e is\nnow available!\u003c/p\u003e\n\u003cp\u003eApart from being a nice looking number, \u003cstrong\u003ev1.1.1\u003c/strong\u003e includes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eImproved the policies API for Sigstore verification by adding new\nbackwards-compatible WaPC host callback \u003ccode\u003ev2/verify\u003c/code\u003e functions to the API.\n\u003ca href=\"https://docs.kubewarden.io/writing-policies/spec/host-capabilities/signature-verifier-policies\"\u003eCheck them out\nhere\u003c/a\u003e\nto add support for your language of choice.\u003c/p\u003e\n\u003cp\u003eThis has been used in the verify-image-signatures policy to simplify\nverification of GitHub Actions signatures and others. Read about it in \u003ca href=\"../verify-signatures-with-gha-and-prefix/\"\u003ethis\nblog post\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMade \u003ccode\u003epolicy-server\u003c/code\u003e and \u003ccode\u003ekwctl\u003c/code\u003e resilient to hiccups in the upstream\nSigstore\u0026rsquo;s repository for Fulcio and Rekor by making it optional. With this change,\nKubewarden tools will proceed forward instead of aborting, and will inform the\nuser and fail safely by issuing false negatives of signature verifications if\nneeded.\u003c/p\u003e\n\u003cp\u003eThis overcomes last weeks' metadata update in the upstream Sigstore repository,\nwhich sadly was non \u003ca href=\"https://theupdateframework.github.io/specification/latest\"\u003eTUF\nspec\u003c/a\u003e compliant.\u003c/p\u003e\n\u003cp\u003eThis is also part of the groundwork for making air-gapped installations easier\nto use.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTry it out!\nIt is just a \u003ccode\u003ehelm upgrade\u003c/code\u003e away, and as usual, we look forward to your\nfeedback :).\u003c/p\u003e\n","date":165888e4,"description":"","dir":"blog/2022/07/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"f4dcf3b1b1e84afae7d81448deaf0322","permalink":"/blog/2022/07/v1.1.1-release/","postref":"f4dcf3b1b1e84afae7d81448deaf0322","publishdate":"2022-07-27T00:00:00Z","readingtime":1,"relpermalink":"/blog/2022/07/v1.1.1-release/","section":"blog","summary":"We are happy to announce the first minor release of v1.0: v1.1.1 is now available!\nApart from being a nice looking number, v1.1.1 includes:\n  Improved the policies API for Sigstore verification by adding new backwards-compatible WaPC host callback v2/verify functions to the API. Check them out here to add support for your language of choice.\nThis has been used in the verify-image-signatures policy to simplify verification of GitHub Actions signatures and others.","tags":null,"title":"v1.1.1 is out ð","type":"blog","url":null,"weight":0,"wordcount":179},{"authors":["Flavio Castelli"],"categories":null,"content":"\u003cp\u003eToday we\u0026rsquo;re happy to announce that \u003ca href=\"https://artifacthub.io/\"\u003eArtifact Hub\u003c/a\u003e\nnow supports Kubewarden policies! ð¤¯ ð¥³\u003c/p\u003e\n\u003cp\u003eArtifact Hub is the de-facto place where Cloud Native users search for\nhelm charts, container images, and other kinds of artifacts and configurations\nof different CNCF projects. That\u0026rsquo;s why we are super excited and honored to\nhave Kubewarden policies listed on Artifact Hub.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis would not have been possible without the work done by the Artifact Hub team.\nThey have been extremely helpful with us, thanks a lot folks! ð¤\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eOur mission at Kubewarden has always been to simplify the process of writing,\nmaintaining and \u003cstrong\u003edistributing\u003c/strong\u003e policies.\u003c/p\u003e\n\u003cp\u003eKubewarden policies are distributed using traditional container registries.\nThis allows operators to manage Kubewarden policies using the same set of tools\nand processes they are already familiar with.\u003c/p\u003e\n\u003cp\u003eHaving a proven technology to physically distribute policies is just part of\nthe solution. It\u0026rsquo;s also important to provide Kubernetes operators a way to\ndiscover ready to use policies.\nThat\u0026rsquo;s why we created \u003ca href=\"https://hub.kubewarden.io\"\u003eKubewarden Policy Hub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhile Kubewarden Policy Hub served this purpose well, it was always meant to be\na temporary solution. One of the goals on our roadmap was to integrate with and serve the\ncommunity of Artifact Hub.\u003c/p\u003e\n\u003cp\u003eThis is why \u003cstrong\u003ewe have moved all our policies to Artifact Hub\u003c/strong\u003e. You can view\nthem by \u003ca href=\"https://artifacthub.io/packages/search?kind=13\u0026amp;sort=relevance\u0026amp;page=1\"\u003eusing the \u003cem\u003e\u0026ldquo;Kubewarden policies\u0026rdquo;\u003c/em\u003e filter\u003c/a\u003e\non Artifact Hub.\u003c/p\u003e\n\u003cp\u003eWe\u0026rsquo;ve also updated all our policy templates (the ones used\nto quickly create Rust, Go, Swift, Gatekeeper, and Open Policy Agent policies)\nto have all the files necessary to publish to Artifact Hub.\u003c/p\u003e\n\u003cp\u003eWe will keep the Kubewarden Policy Hub running for some time so that all\nour users are aware of this change. However we do plan to decommission it with adequate notice in the future.\u003c/p\u003e\n\u003ch2 id=\"what-does-this-mean-for-you\"\u003eWhat does this mean for you?\u003c/h2\u003e\n\u003cp\u003eIf you are a Kubernetes operator, looking for a ready-to-use policy, you\ncan find it by using the familiar interface of Artifact Hub.\u003c/p\u003e\n\u003cp\u003eIf you are a Kubewarden policy author, you can now share your policies on Artifact\nHub and reach a broader audience. Checkout our\n\u003ca href=\"https://docs.kubewarden.io/distributing-policies/publish-policy-to-artifact-hub\"\u003edocumentation\u003c/a\u003e\nto learn how to do it.\u003c/p\u003e\n","date":1658448e3,"description":"","dir":"blog/2022/07/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"2730c9d115e464808ff29ee0dbd14d27","permalink":"/blog/2022/07/artifact-hub-supports-kubewarden/","postref":"2730c9d115e464808ff29ee0dbd14d27","publishdate":"2022-07-22T00:00:00Z","readingtime":2,"relpermalink":"/blog/2022/07/artifact-hub-supports-kubewarden/","section":"blog","summary":"Today we\u0026rsquo;re happy to announce that Artifact Hub now supports Kubewarden policies! ð¤¯ ð¥³\nArtifact Hub is the de-facto place where Cloud Native users search for helm charts, container images, and other kinds of artifacts and configurations of different CNCF projects. That\u0026rsquo;s why we are super excited and honored to have Kubewarden policies listed on Artifact Hub.\n This would not have been possible without the work done by the Artifact Hub team.","tags":null,"title":"Kubewarden policies, now on Artifact Hub!","type":"blog","url":null,"weight":0,"wordcount":351},{"authors":["Raul Cabello Martin"],"categories":null,"content":"\u003cp\u003eWith the latest releases of Kubewarden v1.1.0 and\nthe \u003ca href=\"https://github.com/kubewarden/verify-image-signatures\"\u003everify-image-signatures\u003c/a\u003e policy, it\u0026rsquo;s now possible to use\n\u003ccode\u003eGithubActions\u003c/code\u003e or \u003ccode\u003eKeylessPrefix\u003c/code\u003e for verifying images. Read our\nprevious \u003ca href=\"https://www.kubewarden.io/blog/2022/05/verifying-image-signatures/\"\u003eblog post\u003c/a\u003e if you want to learn more about\nhow to verify container images with Sigstore using Kubewarden.\u003c/p\u003e\n\u003ch2 id=\"lets-see-it-in-action\"\u003eLet\u0026rsquo;s see it in action!\u003c/h2\u003e\n\u003cp\u003eWe want to verify the image \u003ccode\u003eghcr.io/raulcabello/app-example\u003c/code\u003e which was built and signed inside a GitHub action\nusing this \u003ca href=\"https://github.com/raulcabello/app-example/blob/master/.github/workflows/ci.yml\"\u003eGitHub Action\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eOut of the box, GitHub Actions have a specially crafted environment that makes Sigstore keyless signing work in\na non-interactive way.\nThe signatures produced in this way contain unique secure information that allow us to identify the GitHub owner\n(be it an individual or an organization) and the GitHub repository inside of which the GitHub Action has been\nexecuted.\u003c/p\u003e\n\u003cp\u003eStarting from today, Kubewarden provides a convenient way to check signatures produced by GitHub actions.\u003c/p\u003e\n\u003cp\u003eFor this example, a Kubernetes cluster with Kubewarden already installed is required. The installation process is\ndescribed in the \u003ca href=\"https://docs.kubewarden.io/quick-start\"\u003equick start guide\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"github-actions\"\u003eGitHub Actions\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epolicies.kubewarden.io/v1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eClusterAdmissionPolicy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003everify-image-signatures-policy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003emodule\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eregistry://ghcr.io/kubewarden/policies/verify-image-signatures:v0.1.4\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003eapiGroups\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eapiVersions\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pods\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eoperations\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003eCREATE\u003c/span\u003e\n    - \u003cspan style=\"color:#ae81ff\"\u003eUPDATE\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003emutating\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003esettings\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003esignatures\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ghcr.io/raulcabello/app-example:*\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# match all tags \u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003egithub_actions\u003c/span\u003e:\n        - \u003cspan style=\"color:#f92672\"\u003eowner\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;raulcabello\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color:#f92672\"\u003erepo\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;app-example\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e#optional. if omited all signatures performed in repos from the owner will be valid.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis policy verifies all containers with an image that is \u003ccode\u003eghcr.io/raulcabello/app-example\u003c/code\u003e. It will accept\ncontainers that were signed inside a GitHub Action job, run under the owner \u003ccode\u003eraulcabello\u003c/code\u003e and the repo \u003ccode\u003eapp-example\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"keylessprefix\"\u003eKeylessPrefix\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eKeylessPrefix\u003c/code\u003e is similar to the existing keyless verification , the only difference is that it will validate the\nsubject based on a prefix instead of an exact match.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epolicies.kubewarden.io/v1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eClusterAdmissionPolicy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003everify-image-signatures-policy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003emodule\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eregistry://ghcr.io/kubewarden/policies/verify-image-signatures:v0.1.4\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003eapiGroups\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eapiVersions\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pods\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eoperations\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003eCREATE\u003c/span\u003e\n    - \u003cspan style=\"color:#ae81ff\"\u003eUPDATE\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003emutating\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003esettings\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003esignatures\u003c/span\u003e:\n      - \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ghcr.io/raulcabello/app-example:*\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# match all tags \u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003ekeyless_prefix\u003c/span\u003e:\n          - \u003cspan style=\"color:#f92672\"\u003eissuer\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://token.actions.githubusercontent.com\u0026#34;\u003c/span\u003e\n            \u003cspan style=\"color:#f92672\"\u003esubject\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://github.com/raulcabello/app-example/.github/workflows/ci.yml@refs/tags/\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# match all tags\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis will accept containers whose signature contains the issuer \u003ccode\u003ehttps://token.actions.githubusercontent.com\u003c/code\u003e and the\nsubject starts with \u003ccode\u003ehttps://github.com/raulcabello/app-example/.github/workflows/ci.yml@refs/tags/\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eLike in the previous example this will accept the image \u003ccode\u003eghcr.io/raulcabello/app-example\u003c/code\u003e, however we \u003cstrong\u003edon\u0026rsquo;t\u003c/strong\u003e recommend using\n\u003ccode\u003eKeylessPrefix\u003c/code\u003e for GitHub actions validation. When GitHub creates the OIDC token used for the signatures, it sets subject as\nthe URL containing the GHA workflow code, which doesn\u0026rsquo;t necessarily match where it has run in the case of reusable workflows.\nThis is by design. If one wants to check for the repo where the job was run, corresponding to that workflow code, GitHub has added a x509\ncertificate extension \u003ccode\u003egithub_workflow_repository\u003c/code\u003e that contains it. In future releases \u003ccode\u003eKeylessPrefix\u003c/code\u003e validation that has\n\u003ccode\u003ehttps://token.actions.githubusercontent.com\u003c/code\u003e as issuer will fail.\u003c/p\u003e\n\u003cp\u003eCheck it out and let us know if you have any questions! Stay tuned for more blogs on how to secure your supply chain with Kubewarden!\u003c/p\u003e\n","date":1658361600,"description":"","dir":"blog/2022/07/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"115f287a118551b06e339a386731587a","permalink":"/blog/2022/07/verify-signatures-with-gha-and-prefix/","postref":"115f287a118551b06e339a386731587a","publishdate":"2022-07-21T00:00:00Z","readingtime":3,"relpermalink":"/blog/2022/07/verify-signatures-with-gha-and-prefix/","section":"blog","summary":"With the latest releases of Kubewarden v1.1.0 and the verify-image-signatures policy, it\u0026rsquo;s now possible to use GithubActions or KeylessPrefix for verifying images. Read our previous blog post if you want to learn more about how to verify container images with Sigstore using Kubewarden.\nLet\u0026rsquo;s see it in action! We want to verify the image ghcr.io/raulcabello/app-example which was built and signed inside a GitHub action using this GitHub Action.\nOut of the box, GitHub Actions have a specially crafted environment that makes Sigstore keyless signing work in a non-interactive way.","tags":null,"title":"Verify image signatures with GitHub Actions and KeylessPrefix","type":"blog","url":null,"weight":0,"wordcount":468},{"authors":["JosÃ© Guilherme Vanz"],"categories":null,"content":"\u003cp\u003eAs announced in past blog posts, Kubewarden has 100% coverage of the deprecated,\nand soon to be removed, Kubernetes PSPs. If everything goes as expected the PSPs will\nbe removed in Kubernetes v1.25 due for release on 23rd August 2022.\u003c/p\u003e\n\u003cp\u003eThe Kubewarden team has written a script that leverages the migration tool written\nby \u003ca href=\"https://github.com/appvia/psp-migration\"\u003eAppVia\u003c/a\u003e, to migrate PSP\nautomatically. The tool is capable of reading PSPs YAML and can generate the equivalent\npolicies in many different policy engines. Our simple script migrates\nyour PSPs to their equivalent Kubewarden policies.\u003c/p\u003e\n\u003cp\u003eThe script is available in the \u003ca href=\"https://github.com/kubewarden/utils/blob/main/scripts/psp-to-kubewarden\"\u003eutils repository\u003c/a\u003e\nin the Kubewarden GitHub organization. It will download the\nmigration tool in the working directory and run it over all your PSPs printing\nthe equivalent Kuberwarden policies' definitions in the standard output. Therefore,\nusers can redirect the content to a file or to \u003ccode\u003ekubectl\u003c/code\u003e directly.\u003c/p\u003e\n\u003cp\u003eThe script will migrate the PSPs defined in \u003ccode\u003ekubectl\u003c/code\u003e default context.\nThe Kubewarden policies will be printed to stdout. Thus, the users can\napply it directly or save it for further inspection. Let\u0026rsquo;s take a look at an example:\u003c/p\u003e\n\u003cp\u003eIn a cluster with the PSP  blocking access to host namespaces, blocking privileged containers,  not allowing privilege escalation, dropping all containers capabilities, listing the allowed volume types, defining the allowed user and groups to be used, controling the supplemental group applied to volumes and forcing containers to run in a read-only root filesystem:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epolicy/v1beta1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePodSecurityPolicy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003erestricted\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ehostNetwork\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ehostIPC\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ehostPID\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ehostPorts\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003emin\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003emax\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e8080\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eprivileged\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n  \u003cspan style=\"color:#75715e\"\u003e# Required to prevent escalations to root.\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eallowPrivilegeEscalation\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003erequiredDropCapabilities\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003eALL\u003c/span\u003e\n  \u003cspan style=\"color:#75715e\"\u003e# Allow core volume types.\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n    - \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;configMap\u0026#39;\u003c/span\u003e\n    - \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;emptyDir\u0026#39;\u003c/span\u003e\n    - \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;projected\u0026#39;\u003c/span\u003e\n    - \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;secret\u0026#39;\u003c/span\u003e\n    - \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;downwardAPI\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#75715e\"\u003e# Assume that ephemeral CSI drivers \u0026amp; persistentVolumes set up by the cluster admin are safe to use.\u003c/span\u003e\n    - \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;csi\u0026#39;\u003c/span\u003e\n    - \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;persistentVolumeClaim\u0026#39;\u003c/span\u003e\n    - \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ephemeral\u0026#39;\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003erunAsUser\u003c/span\u003e:\n    \u003cspan style=\"color:#75715e\"\u003e# Require the container to run without root privileges.\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003erule\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;MustRunAsNonRoot\u0026#39;\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eseLinux\u003c/span\u003e:\n    \u003cspan style=\"color:#75715e\"\u003e# This policy assumes the nodes are using AppArmor rather than SELinux.\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003erule\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;RunAsAny\u0026#39;\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003esupplementalGroups\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003erule\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;MustRunAs\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eranges\u003c/span\u003e:\n      \u003cspan style=\"color:#75715e\"\u003e# Forbid adding the root group.\u003c/span\u003e\n      - \u003cspan style=\"color:#f92672\"\u003emin\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003emax\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e65535\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003efsGroup\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003erule\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;MustRunAs\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eranges\u003c/span\u003e:\n      \u003cspan style=\"color:#75715e\"\u003e# Forbid adding the root group.\u003c/span\u003e\n      - \u003cspan style=\"color:#f92672\"\u003emin\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003emax\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e65535\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ereadOnlyRootFilesystem\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe equivalent Kubewarden policies can be applied directly to a cluster with\nKubewarden installed using the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ ./psp-to-kubewarden | kubectl apply -f -\nWarning: policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+\nWarning: policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+\nclusteradmissionpolicy.policies.kubewarden.io/psp-privileged-82bf2 created\nclusteradmissionpolicy.policies.kubewarden.io/psp-readonlyrootfilesystem-b4a55 created\nclusteradmissionpolicy.policies.kubewarden.io/psp-hostnamespaces-a25a2 created\nclusteradmissionpolicy.policies.kubewarden.io/psp-volumes-cee05 created\nclusteradmissionpolicy.policies.kubewarden.io/psp-capabilities-34d8e created\nclusteradmissionpolicy.policies.kubewarden.io/psp-usergroup-878b0 created\nclusteradmissionpolicy.policies.kubewarden.io/psp-fsgroup-3b08e created\nclusteradmissionpolicy.policies.kubewarden.io/psp-defaultallowprivilegeescalation-b7e87 created\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf users want to inspect the policies before applying, it\u0026rsquo;s possible to redirect\nthe content to a file or review it directly on the console.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ ./psp-to-kubewarden \u0026gt; policies.yaml\n$ cat policies.yaml\n---\napiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: psp-privileged-82bf2\nspec:\n  module: registry://ghcr.io/kubewarden/policies/pod-privileged:v0.1.10\n  rules:\n    - apiGroups:\n        - \u0026#34;\u0026#34;\n      apiVersions:\n        - v1\n      resources:\n        - pods\n      operations:\n        - CREATE\n        - UPDATE\n  mutating: false\n  settings: null\n\n---\napiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: psp-readonlyrootfilesystem-b4a55\nspec:\n  module: registry://ghcr.io/kubewarden/policies/readonly-root-filesystem-psp:v0.1.3\n  rules:\n    - apiGroups:\n        - \u0026#34;\u0026#34;\n      apiVersions:\n        - v1\n      resources:\n        - pods\n      operations:\n        - CREATE\n        - UPDATE\n  mutating: false\n  settings: null\n\n---\napiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: psp-hostnamespaces-a25a2\nspec:\n  module: registry://ghcr.io/kubewarden/policies/host-namespaces-psp:v0.1.2\n  rules:\n    - apiGroups:\n        - \u0026#34;\u0026#34;\n      apiVersions:\n        - v1\n      resources:\n        - pods\n      operations:\n        - CREATE\n        - UPDATE\n  mutating: false\n  settings:\n    allow_host_ipc: false\n    allow_host_pid: false\n    allow_host_ports:\n      - max: 8080\n        min: 80\n    allow_host_network: false\n\n---\napiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: psp-volumes-cee05\nspec:\n  module: registry://ghcr.io/kubewarden/policies/volumes-psp:v0.1.6\n  rules:\n    - apiGroups:\n        - \u0026#34;\u0026#34;\n      apiVersions:\n        - v1\n      resources:\n        - pods\n      operations:\n        - CREATE\n        - UPDATE\n  mutating: false\n  settings:\n    allowedTypes:\n      - configMap\n      - emptyDir\n      - projected\n      - secret\n      - downwardAPI\n      - csi\n      - persistentVolumeClaim\n      - ephemeral\n\n---\napiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: psp-capabilities-34d8e\nspec:\n  module: registry://ghcr.io/kubewarden/policies/capabilities-psp:v0.1.9\n  rules:\n    - apiGroups:\n        - \u0026#34;\u0026#34;\n      apiVersions:\n        - v1\n      resources:\n        - pods\n      operations:\n        - CREATE\n        - UPDATE\n  mutating: false\n  settings:\n    allowed_capabilities: []\n    required_drop_capabilities:\n      - ALL\n\n---\napiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: psp-usergroup-878b0\nspec:\n  module: registry://ghcr.io/kubewarden/policies/user-group-psp:v0.2.0\n  rules:\n    - apiGroups:\n        - \u0026#34;\u0026#34;\n      apiVersions:\n        - v1\n      resources:\n        - pods\n      operations:\n        - CREATE\n        - UPDATE\n  mutating: false\n  settings:\n    run_as_user:\n      rule: MustRunAsNonRoot\n    supplemental_groups:\n      ranges:\n        - max: 65535\n          min: 1\n      rule: MustRunAs\n\n---\napiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: psp-fsgroup-3b08e\nspec:\n  module: registry://ghcr.io/kubewarden/policies/allowed-fsgroups-psp:v0.1.4\n  rules:\n    - apiGroups:\n        - \u0026#34;\u0026#34;\n      apiVersions:\n        - v1\n      resources:\n        - pods\n      operations:\n        - CREATE\n        - UPDATE\n  mutating: false\n  settings:\n    ranges:\n      - max: 65535\n        min: 1\n    rule: MustRunAs\n\n---\napiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: psp-defaultallowprivilegeescalation-b7e87\nspec:\n  module: \u0026gt;-\n    registry://ghcr.io/kubewarden/policies/allow-privilege-escalation-psp:v0.1.11\n  rules:\n    - apiGroups:\n        - \u0026#34;\u0026#34;\n      apiVersions:\n        - v1\n      resources:\n        - pods\n      operations:\n        - CREATE\n        - UPDATE\n  mutating: false\n  settings:\n    default_allow_privilege_escalation: false\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The policies names are generated by the PSP migration tool used. The\noperator may want to change the name to something more meaningful.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eWarning:\u003c/strong\u003e This script works only in Linux x86_64 machines.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe Kubewarden team expects that this will help users migrate from PSPs as soon as possible.\nLet us know if you run into issues. We are happy to help!\u003c/p\u003e\n\u003ch3 id=\"references\"\u003eReferences\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://www.kubewarden.io/blog/2022/01/mutating-policy-behave-as-validating/\"\u003eKubewarden policies cover all the Kubernetes Pod Security Policies\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.kubewarden.io/blog/2022/05/psp-migration-docs/\"\u003eHave you migrated your Kubernetes PodSecurityPolicy?\u003c/a\u003e\u003c/p\u003e\n","date":1657670400,"description":"","dir":"blog/2022/07/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"77c850b7931679b0cd37f0dbdefd439e","permalink":"/blog/2022/07/psp-migration-script/","postref":"77c850b7931679b0cd37f0dbdefd439e","publishdate":"2022-07-13T00:00:00Z","readingtime":4,"relpermalink":"/blog/2022/07/psp-migration-script/","section":"blog","summary":"As announced in past blog posts, Kubewarden has 100% coverage of the deprecated, and soon to be removed, Kubernetes PSPs. If everything goes as expected the PSPs will be removed in Kubernetes v1.25 due for release on 23rd August 2022.\nThe Kubewarden team has written a script that leverages the migration tool written by AppVia, to migrate PSP automatically. The tool is capable of reading PSPs YAML and can generate the equivalent policies in many different policy engines.","tags":null,"title":"Migrate your PSPs to Kubewarden policies!","type":"blog","url":null,"weight":0,"wordcount":837},{"authors":["Flavio Castelli"],"categories":null,"content":"\u003cp\u003eKubewarden is a policy engine for Kubernetes that is part of CNCF Sandbox.\u003c/p\u003e\n\u003cp\u003eNever heard of Kubewarden before? Do you want to know what makes Kubewarden\nstand out among similar solutions?\nThis is a high level overview of Kubewarden\u0026rsquo;s unique points:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBoost Policy Authors' productivity: write policies using your favorite\nprogramming language. Leverage your knowledge, skills and tools.\u003c/li\u003e\n\u003cli\u003ePolicies are portable WebAssembly modules\u003c/li\u003e\n\u003cli\u003eReuse your existing Open Policy Agent / Gatekeeper policies\u003c/li\u003e\n\u003cli\u003eDistribute policies using regular container registries\u003c/li\u003e\n\u003cli\u003eSecure supply chain, leverage Sigstore to sign and verify policies\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eToday, a year and a half since its conception, we\u0026rsquo;re thrilled to announce\nthe release of Kubewarden v1.0.0! ð ð¥³\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s take a quick look at the major achievements of the project to see what \u003ccode\u003ev1\u003c/code\u003e\nbrings both to Policy Authors and Operators.\u003c/p\u003e\n\u003ch2 id=\"writing-policies\"\u003eWriting policies\u003c/h2\u003e\n\u003cp\u003eKubewarden v1 allows Policy Authors to write policies using either Go, Rust, or Swift.\nEach language features a rich SDK that simplifies the process of validating and\nmutating Kubernetes admission requests.\u003c/p\u003e\n\u003cp\u003eCreating a new policy can be done quickly by scaffolding one of our official\npolicy templates projects. New policies created in this way will feature best\npractices such as: code linters, unit tests, end to end tests, policy signing\nand publishing. All of that is automated using GitHub Actions.\u003c/p\u003e\n\u003cp\u003eWhen writing code, being able to pick the right tool for the job is important.\nThat\u0026rsquo;s why Kubewarden, on top of the programming languages mentioned above,\nalso supports the Rego query language.\nDue to this Kubewarden can execute Open Policy Agent and Gatekeeper\npolicies without any change.\nThis is great both for Policy Authors who prefer Rego and for Operators who can\nreuse the policies they have previously created or that they discover online.\u003c/p\u003e\n\u003ch2 id=\"pod-security-policy-replacement\"\u003ePod Security Policy replacement\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://kubernetes.io/docs/concepts/security/pod-security-policy/\"\u003eKubernetes Pod Security Policies\u003c/a\u003e\nhave been deprecated starting from Kubernetes 1.21 and\nare going to be removed in the upcoming 1.25 release.\u003c/p\u003e\n\u003cp\u003eSome of the scenarios covered by Pod Security Policies can be reimplemented\nusing the new built-in PodSecurity Admission Controller. However, not all the\nPod Security Policies can be replaced in that way.\u003c/p\u003e\n\u003cp\u003eLuckily, the Kubewarden \u003ca href=\"https://hub.kubewarden.io/\"\u003ePolicy Hub\u003c/a\u003e features\nready to use Kubewarden policies that replace each one of the former Pod\nSecurity Policies.\u003c/p\u003e\n\u003cp\u003eCheckout \u003ca href=\"https://docs.kubewarden.io/tasksDir/psp-migration\"\u003eour documentation\u003c/a\u003e\nfor more details about the migration process.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cdel\u003e\u003cstrong\u003eNote:\u003c/strong\u003e keyless signing is still considered experimental by the Sigstore\u003c/del\u003e\n\u003cdel\u003eproject. The Kubewarden 1.0.0 release is not able to handle keyless signatures\u003c/del\u003e\n\u003cdel\u003ecreated from May 2022 onward.\u003c/del\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdel\u003eThis regression has been introduced by a recent change done by the Sigstore\nproject. This issue is going to be fixed with the next release of the\nKubewarden stack.\u003c/del\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdel\u003eIn the meantime, regular key based signatures can be used.\u003c/del\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate:\u003c/strong\u003e This issue is fixed in the Kubewarden 1.0.1 release. An intermediate\ncertificate CA was added in Fulcio, and we were verifying using the root\nCAs. This intermediate certificate is now added to our verification chain to fix\nthis issue.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"observability\"\u003eObservability\u003c/h2\u003e\n\u003cp\u003eAll the Kubewarden stack components have \u003ca href=\"https://opentelemetry.io/\"\u003eOpenTelemetry\u003c/a\u003e\nintegration in place. This is used to emit trace events and expose monitoring data.\u003c/p\u003e\n\u003cp\u003eThanks to that, policy metrics can be scraped by \u003ca href=\"https://prometheus.io/\"\u003ePrometheus\u003c/a\u003e\nand then shown inside of \u003ca href=\"https://grafana.com/\"\u003eGrafana\u003c/a\u003e dashboards, like\n\u003ca href=\"https://grafana.com/grafana/dashboards/15314\"\u003ethis one\u003c/a\u003e\nprovided by the Kubewarden team.\u003c/p\u003e\n\u003cp\u003eFinally, Policy Authors can emit OpenTelemetry trace events straight from the policies.\nThis functionality, like many others, is exposed by Kubewarden\u0026rsquo;s SDKs.\nThese trace events can then be collected and processed by OpenTelemetry. Finally\nthe events can be inspected using tools like \u003ca href=\"https://www.jaegertracing.io/\"\u003eJaeger\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis allows both Policy Authors and Operators to have a consistent observability\nstack both for Cloud Native applications and Kubernetes policies.\u003c/p\u003e\n\u003ch2 id=\"software-secure-supply-chains\"\u003eSoftware Secure Supply Chains\u003c/h2\u003e\n\u003cp\u003eThe topic of \u003ca href=\"https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity/software-security-supply-chains\"\u003eSoftware Secure Supply Chains\u003c/a\u003e\nhas been gaining momentum during 2021 and has become a high priority topic for\nmany organizations.\u003c/p\u003e\n\u003cp\u003eKubewarden wants to help Operators to address the challenges posed by Secure\nSupply Chains initiatives.\u003c/p\u003e\n\u003cp\u003eTo do that, Kubewarden leverages the \u003ca href=\"https://www.sigstore.dev/\"\u003eSigstore\u003c/a\u003e\nproject to implement software signing and verification.\nAll the components of the Kubewarden stack are signed using Sigstore. This also includes\nall the Kubewarden policies maintained by the Kubewarden team.\u003c/p\u003e\n\u003cp\u003ePolicy Authors can leverage Sigstore as a solution to sign and verify their\nown policies too. Finally, Operators can utilize the tight integration of Sigstore\ninside of our Policy Server to ensure only trusted policies are deployed on their\nKubernetes clusters.\u003c/p\u003e\n\u003cp\u003eSigstore verification primitives are available to Policy Authors via our official\nSDKs. They make it possible to write custom policies performing signature verification\nagainst any kind of object stored inside of an OCI registry.\nThe Kubewarden team also offers a ready to use\n\u003ca href=\"https://github.com/kubewarden/verify-image-signatures\"\u003eKubewarden policy\u003c/a\u003e\nthat ensures only trusted container images can run inside of a Kubernetes cluster.\u003c/p\u003e\n\u003ch2 id=\"whats-coming-next\"\u003eWhat\u0026rsquo;s coming next\u003c/h2\u003e\n\u003cp\u003eWebAssembly adoption is blooming. Many programming languages are now targeting\nWebAssembly or have improved their pre-existing support of it. That means we\nwill be able to offer more alternatives to our Policy Authors in the future.\nIf you are a Policy Author and would like to write policies\nusing a language that is not yet supported by Kubewarden, please reach out to us and\ntell us your story!\u003c/p\u003e\n\u003cp\u003eWe also plan to improve our reporting capabilities and introduce the ability\nto generate compliance audit checks about the status of your Kubernetes\ncluster.\u003c/p\u003e\n\u003cp\u003eWe want to improve our Secure Supply Chain story. We are already in the process\nof creating Software Bill Of Materials (SBOMs) for the different components\nof our stack.\u003c/p\u003e\n\u003cp\u003eThese are just some of the topics we want to address. Don\u0026rsquo;t forget that\nKubewarden is developed in the open. You can checkout our GitHub project boards\nto know more about what is happening and what we have planned.\n\u003ca href=\"https://github.com/orgs/kubewarden/projects/1\"\u003eThis project board\u003c/a\u003e covers day-to-day\nactivities, while \u003ca href=\"https://github.com/orgs/kubewarden/projects/2\"\u003ethis other one\u003c/a\u003e\nprovides a higher level overview about our roadmap.\u003c/p\u003e\n","date":1655856e3,"description":"","dir":"blog/2022/06/","expirydate":-62135596800,"fuzzywordcount":1e3,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"31c3aac6a8c3e23e5899a63abb8fe829","permalink":"/blog/2022/06/v1-release/","postref":"31c3aac6a8c3e23e5899a63abb8fe829","publishdate":"2022-06-22T00:00:00Z","readingtime":5,"relpermalink":"/blog/2022/06/v1-release/","section":"blog","summary":"Kubewarden is a policy engine for Kubernetes that is part of CNCF Sandbox.\nNever heard of Kubewarden before? Do you want to know what makes Kubewarden stand out among similar solutions? This is a high level overview of Kubewarden\u0026rsquo;s unique points:\n Boost Policy Authors' productivity: write policies using your favorite programming language. Leverage your knowledge, skills and tools. Policies are portable WebAssembly modules Reuse your existing Open Policy Agent / Gatekeeper policies Distribute policies using regular container registries Secure supply chain, leverage Sigstore to sign and verify policies  Today, a year and a half since its conception, we\u0026rsquo;re thrilled to announce the release of Kubewarden v1.","tags":null,"title":"Kubewarden reaches 1.0.0 release ð","type":"blog","url":null,"weight":0,"wordcount":952},{"authors":["Flavio Castelli"],"categories":null,"content":"\u003cp\u003eToday the whole Kubewarden team is overjoyed because the\nKubewarden project has just been accepted into the\n\u003ca href=\"https://www.cncf.io/sandbox-projects/\"\u003eCNCF Sandbox\u003c/a\u003e!!! ð¥³\u003c/p\u003e\n\u003cp\u003eThis is a great achievement for the whole team and is the beginning of\nour journey into CNCF.\nAlso, many thanks to the CNCF TOC for the feedback they provided during the\nproject evaluation.\u003c/p\u003e\n\u003ch2 id=\"whats-next\"\u003eWhat\u0026rsquo;s next?\u003c/h2\u003e\n\u003cp\u003eThe admission happens at an interesting time since we are currently testing\nthe \u003ccode\u003e1.0.0-rc1\u003c/code\u003e release of Kubewarden.\u003c/p\u003e\n\u003cp\u003eYes, you got it right! We were working on the \u003ccode\u003e1.0.0\u003c/code\u003e release of Kubewarden\nwhen the announcement was made.\nThe CNCF sandbox admission is going to be the cherry on the top of\nthe \u003ccode\u003e1.0.0\u003c/code\u003e project milestone ð\u003c/p\u003e\n\u003cp\u003eStay tuned for more news!\u003c/p\u003e\n","date":1655251200,"description":"","dir":"blog/2022/06/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"50fb4822cc1ec503ad724cc979404862","permalink":"/blog/2022/06/cncf-sandbox-inclusion/","postref":"50fb4822cc1ec503ad724cc979404862","publishdate":"2022-06-15T00:00:00Z","readingtime":1,"relpermalink":"/blog/2022/06/cncf-sandbox-inclusion/","section":"blog","summary":"Today the whole Kubewarden team is overjoyed because the Kubewarden project has just been accepted into the CNCF Sandbox!!! ð¥³\nThis is a great achievement for the whole team and is the beginning of our journey into CNCF. Also, many thanks to the CNCF TOC for the feedback they provided during the project evaluation.\nWhat\u0026rsquo;s next? The admission happens at an interesting time since we are currently testing the 1.0.0-rc1 release of Kubewarden.","tags":null,"title":"CNCF Sandbox admission ð","type":"blog","url":null,"weight":0,"wordcount":116},{"authors":["Raul Cabello Martin"],"categories":null,"content":"\u003cp\u003eAfter these last releases Kubewarden now has support for verifying the integrity and authenticity of artifacts within\nKubewarden using the Sigstore project. In this post, we shall focus on verifying container image signatures using the\nnew \u003ca href=\"https://github.com/kubewarden/verify-image-signatures\"\u003everify-image-signatures\u003c/a\u003e policy.\u003c/p\u003e\n\u003cp\u003eTo learn more about how Sigstore works, take a look at our\nprevious \u003ca href=\"https://www.kubewarden.io/blog/2022/04/securing-kubewarden-policies/\"\u003epost\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"verify-image-signatures-policy\"\u003eVerify Image Signatures Policy\u003c/h2\u003e\n\u003cp\u003eThis policy validates Pods by checking their container images for signatures (that is, containers, init containers and\nephemeral containers in the pod)\u003c/p\u003e\n\u003cp\u003eThe policy can inspect all the container images defined inside of a Pod or it can just analyze the ones that\nare matching a pattern provided by the user.\u003c/p\u003e\n\u003cp\u003eContainer image tags are mutable, they can be changed to point to a completely different content. That\u0026rsquo;s why it\u0026rsquo;s a\ngood security practice to reference container images by their immutable checksum.\u003c/p\u003e\n\u003cp\u003eThis policy can rewrite the image definitions that are using a tag to instead reference the image by its checksum.\u003c/p\u003e\n\u003cp\u003eThe policy will:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEnsure the image referenced by a tag is satisfying the signature requested by the operator\u003c/li\u003e\n\u003cli\u003eExtract the immutable reference of the image from the signatures\u003c/li\u003e\n\u003cli\u003eRewrite the image reference to be in the form \u003ccode\u003e\u0026lt;image ref\u0026gt;@sha256:\u0026lt;digest\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lets-see-it-in-action\"\u003eLet\u0026rsquo;s see it in action!\u003c/h2\u003e\n\u003cp\u003eFor this example, a Kubernetes cluster with Kubewarden already installed is required. The installation process is\ndescribed in the \u003ca href=\"https://docs.kubewarden.io/quick-start\"\u003equick start guide\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe need an image with a signature that we can verify. You can use \u003ca href=\"https://github.com/sigstore/cosign\"\u003ecosign\u003c/a\u003e to sign\nyour images. For this example we\u0026rsquo;ll use the image\n\u003ccode\u003eghcr.io/viccuad/app-example:v0.1.0\u003c/code\u003e that was signed using keyless verification.\u003c/p\u003e\n\u003cp\u003eObtain the issuer and subject using cosign.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eCOSIGN_EXPERIMENTAL=1 cosign verify ghcr.io/viccuad/app-example:v0.1.0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e...\n\u0026#34;Issuer\u0026#34;: \u0026#34;https://token.actions.githubusercontent.com\u0026#34;,\n\u0026#34;Subject\u0026#34;: \u0026#34;https://github.com/viccuad/app-example/.github/workflows/ci.yml@refs/tags/v0.1.0\u0026#34;\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet\u0026rsquo;s create a cluster-wide policy that will verify all images, and\nlet\u0026rsquo;s use the issuer and subject for verification:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF\napiVersion: policies.kubewarden.io/v1alpha2\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: verify-image-signatures\nspec:\n  module: ghcr.io/kubewarden/policies/verify-image-signatures:v0.1.4\n  rules:\n  - apiGroups: [\u0026#34;\u0026#34;]\n    apiVersions: [\u0026#34;v1\u0026#34;]\n    resources: [\u0026#34;pods\u0026#34;]\n    operations:\n    - CREATE\n    - UPDATE\n  mutating: true\n  settings:\n    signatures:\n      - image: \u0026#34;*\u0026#34;\n        keyless:\n          - issuer: \u0026#34;https://token.actions.githubusercontent.com\u0026#34;\n            subject: \u0026#34;https://github.com/viccuad/app-example/.github/workflows/ci.yml@refs/tags/v0.1.0\u0026#34;\nEOF\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWait for the policy to be active:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl wait --for=condition=PolicyActive clusteradmissionpolicies verify-image-signatures\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eVerify we can create pods with containers that are signed:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: verify-image-valid\nspec:\n  containers:\n  - name: test-verify-image\n    image: ghcr.io/viccuad/app-example:v0.1.0\nEOF\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen check that the image was modified with the digest:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl get pod verify-image-valid -o=jsonpath=\u0026#39;{.spec.containers[0].image}\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis will produce the following output:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eghcr.io/viccuad/app-example:v0.1.0@sha256:d97d00f668dc5b7f0af65edbff6b37924c8e9b1edfc0ab0f7d2e522cab162d38\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFinally, let\u0026rsquo;s try to create a pod with an image that it is not signed:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f - \u0026lt;\u0026lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: verify-image-invalid\nspec:\n  containers:\n  - name: test-verify-image\n    image: ghcr.io/kubewarden/test-verify-image-signatures:unsigned\nEOF\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe will get the following error:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eError from server: error when creating \u0026#34;STDIN\u0026#34;: admission webhook \u0026#34;clusterwide-verify-image-signatures.kubewarden.admission\u0026#34; denied the request: Pod verify-image-invalid is not accepted: verification of image ghcr.io/kubewarden/test-verify-image-signatures:unsigned failed: Host error: Callback evaluation failure: no signatures found for image: ghcr.io/kubewarden/test-verify-image-signatures:unsigned \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"recap\"\u003eRecap\u003c/h2\u003e\n\u003cp\u003eThis policy is designed to meet all your needs. However, if you prefer you can build your own policy using one of the SDKs Kubewarden\nprovides. We will show how to do this in an upcoming blog! Stay tuned!\u003c/p\u003e\n","date":1653004800,"description":"","dir":"blog/2022/05/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"e05a346097d4d44d9eaddce526337212","permalink":"/blog/2022/05/verifying-image-signatures/","postref":"e05a346097d4d44d9eaddce526337212","publishdate":"2022-05-20T00:00:00Z","readingtime":3,"relpermalink":"/blog/2022/05/verifying-image-signatures/","section":"blog","summary":"After these last releases Kubewarden now has support for verifying the integrity and authenticity of artifacts within Kubewarden using the Sigstore project. In this post, we shall focus on verifying container image signatures using the new verify-image-signatures policy.\nTo learn more about how Sigstore works, take a look at our previous post\nVerify Image Signatures Policy This policy validates Pods by checking their container images for signatures (that is, containers, init containers and ephemeral containers in the pod)","tags":null,"title":"Secure Supply Chain: Verifying image signatures","type":"blog","url":null,"weight":0,"wordcount":514},{"authors":["JosÃ© Guilherme Vanz"],"categories":null,"content":"\u003cp\u003eIf you use a version of Kubernetes (\u0026lt; v1.24) that supports the deprecated PodSecurityPolicy (a.k.a PSP), you would be\nwondering what to do after the Kubernetes v1.25 version when the PSP will be removed.\nWith this in mind, the Kuberwarden team wrote a \u003ca href=\"https://docs.kubewarden.io/tasksDir/psp-migration\"\u003edocumentation\u003c/a\u003e\nto help users migrate away from PSPs to Kuberwarden policies.\u003c/p\u003e\n\u003cp\u003eAs you know, the original Pod Security Policies had many configuration knobs.\nThe Kubewarden team created a series of policies that offer a 100% feature\nparity with all the soon to be dropped Pod Security Policies.\nThis section of our \u003ca href=\"https://docs.kubewarden.io/tasksDir/psp-migration\"\u003edocumentation\u003c/a\u003e\nhighlights all these policies and guides you through their recommended settings.\u003c/p\u003e\n\u003cp\u003eOn this topic, do you know our helm chart provides a \u003ca href=\"https://github.com/kubewarden/helm-charts/tree/main/charts/kubewarden-defaults#configuration\"\u003eflag\u003c/a\u003e\nthat enforces a chosen selection of Pod Security Policies? This makes even easier\nto keep your clusters safe!\u003c/p\u003e\n\u003cp\u003eCheck it out and let us know if you have question about this!\u003c/p\u003e\n","date":1652313600,"description":"","dir":"blog/2022/05/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"b1536e36485832f576f74ff66f25b2bc","permalink":"/blog/2022/05/psp-migration-docs/","postref":"b1536e36485832f576f74ff66f25b2bc","publishdate":"2022-05-12T00:00:00Z","readingtime":1,"relpermalink":"/blog/2022/05/psp-migration-docs/","section":"blog","summary":"If you use a version of Kubernetes (\u0026lt; v1.24) that supports the deprecated PodSecurityPolicy (a.k.a PSP), you would be wondering what to do after the Kubernetes v1.25 version when the PSP will be removed. With this in mind, the Kuberwarden team wrote a documentation to help users migrate away from PSPs to Kuberwarden policies.\nAs you know, the original Pod Security Policies had many configuration knobs. The Kubewarden team created a series of policies that offer a 100% feature parity with all the soon to be dropped Pod Security Policies.","tags":null,"title":"Have you migrated your Kubernetes PodSecurityPolicy?","type":"blog","url":null,"weight":0,"wordcount":149},{"authors":["Rafael FernÃ¡ndez LÃ³pez"],"categories":null,"content":"\u003cp\u003ePolicies are a core component of a Kubernetes cluster story that\ninvolves security, compliance and consistency.\u003c/p\u003e\n\u003cp\u003eBeing this process an iterative one, it\u0026rsquo;s common for new policies to\npotentially reject operations that we might be issuing today in our\nproduction clusters.\u003c/p\u003e\n\u003cp\u003eAs an example, we might have decided that it\u0026rsquo;s not possible to change\ncertain annotations on existing resources after the fact. In this\ncase, we don\u0026rsquo;t want to revoke \u003ccode\u003eUPDATE\u003c/code\u003e rights completely, but just to\ndefine an inalterable set of annotations after the resource has been\ncreated.\u003c/p\u003e\n\u003cp\u003eFollowing this example, it might happen that we haven\u0026rsquo;t audited to the\nlast detail the code that is doing the rollout of existing resources\nof our stack.\u003c/p\u003e\n\u003cp\u003eDeploying this policy in a strict way will make certain rollouts to\nnot succeed as expected, because some \u003ccode\u003eUPDATE\u003c/code\u003e operations will be\nrejected by the policy.\u003c/p\u003e\n\u003cp\u003eThere is some middle ground so that we can evolve our platform, and\nstill accept these requests: the Monitor mode.\u003c/p\u003e\n\u003cp\u003ePolicies can be deployed now in two different modes: \u003ccode\u003emonitor\u003c/code\u003e and\n\u003ccode\u003eprotect\u003c/code\u003e. By default, they are deployed in \u003ccode\u003eprotect\u003c/code\u003e mode, unless\nconfigured otherwise. This ensures compatibility with the current and\nexpected behavior.\u003c/p\u003e\n\u003cp\u003eWith the Monitor mode, we are able to deploy new policies so that they\nwill not reject or mutate any request they might be targeting. The\nrest of the mechanism for policy evaluation will work as usual, so\nthat you can still:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eInspect the \u003ccode\u003epolicy-server\u003c/code\u003e logs and traces for actions this policy\nwould have taken had it been in \u003ccode\u003eprotect\u003c/code\u003e mode.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eInspect the \u003ccode\u003epolicy-server\u003c/code\u003e metrics, given the mode is now part of\nthe metric baggage.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"transitioning-the-mode\"\u003eTransitioning the mode\u003c/h2\u003e\n\u003cp\u003eGiven an existing policy, it\u0026rsquo;s possible for it to transition from\n\u003ccode\u003emonitor\u003c/code\u003e to \u003ccode\u003eprotect\u003c/code\u003e mode, but not the other way around.\u003c/p\u003e\n\u003cp\u003eThis ensures that users with RBAC permissions to update policies can\nonly make the policy more strict, never less strict. In order for a\npolicy to transition from \u003ccode\u003eprotect\u003c/code\u003e to \u003ccode\u003emonitor\u003c/code\u003e it would need to be\ndeleted and recreated in \u003ccode\u003emonitor\u003c/code\u003e mode, what would require \u003ccode\u003eDELETE\u003c/code\u003e\npermissions.\u003c/p\u003e\n\u003ch2 id=\"wrapping-up\"\u003eWrapping up\u003c/h2\u003e\n\u003cp\u003eWe think the Monitor mode is very interesting for organizations to\nstart adopting policy-as-code in a safer way, so they can be confident\nabout the consequences deploying new policies will have on their\nexisting operations.\u003c/p\u003e\n\u003cp\u003eYou can read more about the Monitor mode in \u003ca href=\"https://docs.kubewarden.io/operator-manual/monitor-mode/intro.html\"\u003eour\ndocumentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eStay tuned for more and thrilling features in the UX side of\nKubewarden!\u003c/p\u003e\n","date":1651795200,"description":"","dir":"blog/2022/05/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"41c84b05b2a68645f6e4ea0d82bb41cc","permalink":"/blog/2022/05/monitor-mode/","postref":"41c84b05b2a68645f6e4ea0d82bb41cc","publishdate":"2022-05-06T00:00:00Z","readingtime":2,"relpermalink":"/blog/2022/05/monitor-mode/","section":"blog","summary":"Policies are a core component of a Kubernetes cluster story that involves security, compliance and consistency.\nBeing this process an iterative one, it\u0026rsquo;s common for new policies to potentially reject operations that we might be issuing today in our production clusters.\nAs an example, we might have decided that it\u0026rsquo;s not possible to change certain annotations on existing resources after the fact. In this case, we don\u0026rsquo;t want to revoke UPDATE rights completely, but just to define an inalterable set of annotations after the resource has been created.","tags":null,"title":"Introducing the Monitor mode","type":"blog","url":null,"weight":0,"wordcount":400},{"authors":["VÃ­ctor Cuadrado Juan"],"categories":null,"content":"\u003cp\u003eWith recent releases, the Kubewarden stack supports\nverifying the integrity and authenticity of content using the\n\u003ca href=\"https://www.sigstore.dev/\"\u003eSigstore project\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn this post, we focus on Kubewarden Policies and how to create a Secure Supply\nChain for them.\u003c/p\u003e\n\u003ch2 id=\"sigstore\"\u003eSigstore?\u003c/h2\u003e\n\u003cp\u003eSince a full Sigstore dive is not within the scope for this post, we recommend checking out \u003ca href=\"https://docs.sigstore.dev\"\u003etheir nice docs\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn short, Sigstore provides an automatable workflow to match the\ndistributed Open Source development model. The workflow specifies how to\ndigitally sign and verify artifacts which in our case are Kubewarden Policies.\nIt also provides a transparency log to monitor such signatures. The workflow allows to sign\nartifacts with traditional Public-Private key pairs, or in Keyless mode.\u003c/p\u003e\n\u003cp\u003eIn the keyless mode, signatures are created with short-lived certs\nusing an OpenID Connect (OIDC) service as identity provider. Those short-lived certs are\nissued by Sigstore\u0026rsquo;s PKI infrastructure, \u003ca href=\"https://github.com/sigstore/fulcio\"\u003eFulcio\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFulcio acts as a Registration Authority, authenticating that you are who you say\nyou are by using an OIDC service (SSO via your own Okta instance, GitHub,\nGoogle, etc). Once authenticated, Fulcio acts as a Certificate Authority, issuing the\nshort-lived certificate that you will use to sign artifacts.\u003c/p\u003e\n\u003cp\u003eThese short-lived certificate include the identity information obtained by the\nOIDC service inside of the certificate extensions attributes. The private key\nassociated with the certificate is then used to sign the object while the\ncertificate itself has a public key that can be used to verify the signatures\nproduced by the private key.\u003c/p\u003e\n\u003cp\u003eThe certificates issued by Fulcio have a short validity because they are generated\nto be short-lived. This is an interesting property that we will discuss shortly.\u003c/p\u003e\n\u003cp\u003eOnce the artifact is signed, the proof of signature is then sent to an\nappend-only transparency log, \u003ca href=\"https://github.com/sigstore/rekor\"\u003eRekor\u003c/a\u003e, that\nallows monitoring of such signatures and protects against timing attacks.\nThe proof of signature is signed by Rekor and this information is stored\ninside of the signature itself.\u003c/p\u003e\n\u003cp\u003eBy using the timestamp found inside of the proof of signature, the verifier can\nensure that the signing action has been performed during the limited lifetime of\nthe certificate.\u003c/p\u003e\n\u003cp\u003eDue to this the private key associated with the certificate doesn\u0026rsquo;t need to be\nsafely stored. It can be discarded at the end of the signature process.\nAn attacker could even reuse the private key, but the signature would not be\nconsidered valid if used outside of the limited lifetime of the certificate.\u003c/p\u003e\n\u003cp\u003eNobody - developers, project leads, or sponsors, needs to have access to\nkeys and Sigstore never obtains your private key. Hence the term keyless.\nAdditionaly, one doesn\u0026rsquo;t need expensive infra for creating and validating\nsignatures.\u003c/p\u003e\n\u003cp\u003eSince there\u0026rsquo;s no need for key secrets and the like in Keyless mode, it is easily\nautomated inside CIs and implemented and monitored in the open. This is one of the\nreasons that makes it so interesting.\u003c/p\u003e\n\u003ch3 id=\"building-a-rust-sigstore-stack\"\u003eBuilding a Rust Sigstore stack\u003c/h3\u003e\n\u003cp\u003eThe \u003ca href=\"https://github.com/kubewarden/policy-server\"\u003epolicy server\u003c/a\u003e and libs within the\nKubewarden stack are responsible for instantiating and running policies. They are\nwritten in Rust and therefore, we needed a good Rust implementation of Sigstore\nfeatures. Since there weren\u0026rsquo;t any available, we are glad to announce that we have\ncreated a new crate, \u003ca href=\"https://github.com/sigstore/sigstore-rs\"\u003esigstore-rs\u003c/a\u003e, under the\nSigstore org. This was done in an upstream-first manner and we\u0026rsquo;re happy to report that\nit is now taking a life of its own.\u003c/p\u003e\n\u003ch2 id=\"securing-kubewarden-policies\"\u003eSecuring kubewarden policies\u003c/h2\u003e\n\u003cp\u003eAs you may already know, Kubewarden Policies are small wasm-compiled\nbinaries (~1 to ~6 MB) that are distributed via container registries as OCI artifacts.\nLet us see how Kubewarden protects policies against Secure Supply Chain attacks by\nsigning and verifying them before they run.\u003c/p\u003e\n\u003ch3 id=\"signing-your-kubewarden-policy\"\u003eSigning your Kubewarden Policy\u003c/h3\u003e\n\u003cp\u003eSigning a Policy is done in the same way as signing a container image. This means just adding a\nnew layer within the signature to a dedicated signature object managed by Sigstore.\nIn the Sigstore workflow, one can sign with Public-Private keypair, or Keyless.\nBoth can also add \u003ccode\u003ekey=value\u003c/code\u003e annotations to the signatures.\u003c/p\u003e\n\u003cp\u003eThe Public-Private key pair signing is straightforward, using \u003ca href=\"https://github.com/SigStore/cosign\"\u003esigstore/cosign\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ COSIGN_PASSWORD=yourpass cosign generate-key-pair\n\nPrivate key written to cosign.key\nPublic key written to cosign.pub\n\n$ COSIGN_PASSWORD=yourpass cosign sign \\\n  --key cosign.key --annotations blog=yes \\\n  ghcr.io/kubewarden/policies/user-group-psp:v0.2.0\n\nPushing signature to: ghcr.io/kubewarden/policies/user-group-psp\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe Keyless mode is more interesting:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ COSIGN_EXPERIMENTAL=1 cosign sign \\\n  --annotations blog=yes \\\n  ghcr.io/kubewarden/policies/user-group-psp:v0.2.0\n\nGenerating ephemeral keys...\nRetrieving signed certificate...\nYour browser will now be opened to:\nhttps://oauth2.sigstore.dev/auth/auth?access_type=online\u0026amp;client_id=sigstore\u0026amp;code_challenge=(...)\nSuccessfully verified SCT...\ntlog entry created with index: (...)\nPushing signature to: ghcr.io/viccuad/policies/volumes-psp\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhat happened? \u003ccode\u003ecosign\u003c/code\u003e prompted us for an OpenID Connect provider on the\nbrowser, which authenticated us, and instructed Fulcio to generate an ephemeral\nprivate key and a x509 certificate with the associated public key.\u003c/p\u003e\n\u003cp\u003eIf this were to happen in a CI, the CI would provide the OIDC identity token in\nits environment. \u003ccode\u003ecosign\u003c/code\u003e has support for detecting some automated\nenvironments and producing an identity token. Currently that covers\n\u003ca href=\"https://github.com/sigstore/cosign/blob/main/KEYLESS.md#identity-tokens\"\u003eGitHub And Google Cloud, but one can always use a flag\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe shall now detail how it works for policies built by the Kubewarden team in GitHub Actions.\nFirst, we \u003ca href=\"https://github.com/kubewarden/github-actions/blob/520eaa5e479fcb253ba09009c63f7fcfca1f743d/policy-release/action.yaml#L43\"\u003ecall cosign\u003c/a\u003e, and sign the policy in keyless mode. The certificate issued by Fulcio includes the following details\nabout the identity of the signer inside of its x503v extensions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAn \u003ccode\u003eissuer\u003c/code\u003e,  telling you who certified the image:\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ehttps://token.actions.githubusercontent.com\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003eA \u003ccode\u003esubject\u003c/code\u003e related to the specific workflow and worker, for example:\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ehttps://github.com/kubewarden/policy-secure-pod-images/.github/workflows/release.yml@refs/heads/main\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you are curious, and want to see the contents of one of the certificates issued by Fulcio, install\nthe \u003ca href=\"https://github.com/google/go-containerregistry/tree/main/cmd/crane\"\u003e\u003ccode\u003ecrane\u003c/code\u003e\u003c/a\u003e cli tool, \u003ccode\u003ejq\u003c/code\u003e and\n\u003ccode\u003eopenssl\u003c/code\u003e and execute the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ecrane manifest \\\n  $(cosign triangulate ghcr.io/kubewarden/policies/pod-privileged:v0.1.10) | \\\n  jq -r \u0026#39;.layers[0].annotations.\u0026#34;dev.sigstore.cosign/certificate\u0026#34;\u0026#39; | \\\n  openssl x509 -noout -text -in -\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe end result is the same.  A signature is added as a new image layer of a special OCI object\nthat is created and managed by Sigstore. You can view those signatures as added\n\u003ca href=\"https://github.com/kubewarden/user-group-psp-policy/pkgs/container/policies%2Fuser-group-psp/15759776?tag=v0.2.0\"\u003elayers\u003c/a\u003e,with \u003ca href=\"https://github.com/kubewarden/user-group-psp-policy/pkgs/container/policies%2Fuser-group-psp/versions\"\u003e\u003ccode\u003esha256-\u0026lt;sha\u0026gt;.sig\u003c/code\u003e in the repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eEven better, you can use tools like \u003ca href=\"https://github.com/google/go-containerregistry/blob/main/cmd/crane/doc/crane.md\"\u003e\u003ccode\u003ecrane\u003c/code\u003e\u003c/a\u003e or the CLI tool, kwctl to\nperform the same action as demonstrated below.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekwctl pull \u0026lt;policy_url\u0026gt;; kwctl inspect \u0026lt;policy_url\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you want to verify policies locally, you now can use \u003ccode\u003ekwctl verify\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kwctl verify --github-owner kubewarden registry://ghcr.io/kubewarden/policies/pod-privileged:v0.1.10\n$ echo $?\n0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen testing policies locally with \u003ccode\u003ekwctl pull\u003c/code\u003e or \u003ccode\u003ekwctl run\u003c/code\u003e, you can also\nenable signature verification by using any verification related flag. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kwctl pull --github-owner kubewarden registry://ghcr.io/kubewarden/policies/pod-privileged:v0.1.10\n$ echo $?\n0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAll the policies from the Kubewarden team are signed in keyless mode by the\nworkers of the CI job, specifically the CI job of Github.\nWe don\u0026rsquo;t leave certs around and they are verifiable by third parties.\u003c/p\u003e\n\u003ch3 id=\"enforcing-signature-verification-for-instantiated-kubewarden-policies\"\u003eEnforcing signature verification for instantiated Kubewarden policies\u003c/h3\u003e\n\u003cp\u003eYou can now configure\n\u003ca href=\"https://doc.crds.dev/github.com/kubewarden/kubewarden-controller/policies.kubewarden.io/PolicyServer/v1alpha2\"\u003ePolicyServers\u003c/a\u003e\nto enforce that all policies being run need to be signed. When\ndeploying Kubewarden via Helm charts, you can do it so for the default\nPolicyServer installed by \u003ccode\u003ekubewarden-defaults\u003c/code\u003e chart.\u003c/p\u003e\n\u003cp\u003eFor this, the PolicyServers have a new \u003ca href=\"https://doc.crds.dev/github.com/kubewarden/kubewarden-controller/policies.kubewarden.io/PolicyServer/v1alpha2#spec-verificationConfig\"\u003e\u003ccode\u003espec.VerificationConfig\u003c/code\u003e\u003c/a\u003e argument.\nHere, you can put the name of a ConfigMap containing a \u0026ldquo;verification config\u0026rdquo;, to\nspecify the needed signatures.\u003c/p\u003e\n\u003cp\u003eYou can obtain a default verification config for policies from the Kubewarden\nteam with:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#ae81ff\"\u003e$ kwctl scaffold verification-config\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Default Kubewarden verification config\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# With this config, the only valid policies are those signed by Kubewarden\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# infrastructure.\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# This config can be saved to its default location (for this OS) with:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#   kwctl scaffold verification-config \u0026gt; /home/youruser/.config/kubewarden/verification-config.yml\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Providing a config in the default location enables Sigstore verification.\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# See https://docs.kubewarden.io for more Sigstore verification options.\u003c/span\u003e\n---\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eallOf\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egithubAction\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eowner\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ekubewarden\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003erepo\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e~\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eannotations\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e~\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eanyOf\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e~\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe verification config format has several niceties, \u003ca href=\"https://docs.kubewarden.io/distributing-policies/secure-supply-chain.html\"\u003esee its reference docs\u003c/a\u003e.\nFor example, \u003ccode\u003ekind: githubAction\u003c/code\u003e with \u003ccode\u003eowner\u003c/code\u003e and \u003ccode\u003erepo\u003c/code\u003e, instead of checking the \u003ccode\u003eissuer\u003c/code\u003e and\n\u003ccode\u003esubject\u003c/code\u003e strings blindly. Or \u003ccode\u003eanyOf\u003c/code\u003e a list of signatures, with \u003ccode\u003eanyOf.atLeast\u003c/code\u003e a number\nof them: this allows for accepting at least a specific number of signatures, and\nmakes migration between signatures in your cluster easy. It\u0026rsquo;s the little things ð¤.\u003c/p\u003e\n\u003cp\u003eIf you want support for other CIs (such as GitLab, Jenkins, etc) drop us a\nnote on Slack or file a GitHub issue!\u003c/p\u003e\n\u003cp\u003eOnce you have crafted your verification config, create your ConfigMap:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl create configmap my-verification-config \\\n  --from-file=verification-config=./my-verification-config.yml \\\n  --namespace=kubewarden\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd pass it to your PolicyServers in \u003ccode\u003espec.VerificationConfig\u003c/code\u003e, or if using the\ndefault PolicyServer from the \u003ccode\u003ekubewarden-defaults\u003c/code\u003e chart, set it there with for example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ helm upgrade --set policyServer.verificationConfig=my-verification-config \\\n  --wait -n kubewarden kubewarden-defaults ./kubewarden-defaults\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"recap\"\u003eRecap\u003c/h2\u003e\n\u003cp\u003eUsing \u003ccode\u003ecosign sign\u003c/code\u003e policy authors can sign or author their policies. All the policies owned by the Kubewarden\nteam have already been signed in this way.\u003c/p\u003e\n\u003cp\u003eWith \u003ccode\u003ekwctl verify\u003c/code\u003e, operators\ncan verify them, and with \u003ccode\u003ekwctl inspect\u003c/code\u003e (and other tools such as \u003ccode\u003ecrane manifest\u003c/code\u003e), operators can inspect the signatures.\nWe can keep using \u003ccode\u003ekwctl pull\u003c/code\u003e and \u003ccode\u003ekwctl run\u003c/code\u003e to test policies locally as in\nthe past, plus now verify their signatures too. Once we are satisfied,\n\u003ca href=\"https://docs.kubewarden.io/distributing-policies/secure-supply-chain.html\"\u003ewe can deploy Kubewarden PolicyServers so they enforce those signatures\u003c/a\u003e. If we want, the\nsame verification config format can be used for \u003ccode\u003ekwctl\u003c/code\u003e and the cluster stack.\u003c/p\u003e\n\u003cp\u003eThis way we are sure that the policies come from their stated authors, and have\nnot been tampered with. Phew!\u003c/p\u003e\n\u003cp\u003eWe, the Kubewarden team, are curious on how you approach this. What workflows are you interested in?\nWhat challenges do you have? Drop us a word in our \u003ca href=\"https://kubernetes.slack.com/archives/C01T3GTC3L7\"\u003eSlack channel\u003c/a\u003e\nor foile a \u003ca href=\"https://github.com/kubewarden\"\u003eGitHub issue\u003c/a\u003e!\u003c/p\u003e\n\u003cp\u003eThere are more things to secure in the chain and we\u0026rsquo;re excited for what lays ahead.\nStay tuned for more blog entries on how to secure your supply chain with Kubewarden!\u003c/p\u003e\n","date":1651449600,"description":"","dir":"blog/2022/04/","expirydate":-62135596800,"fuzzywordcount":1600,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"7d9aa3cb5ed89d64e9badb6c8837af70","permalink":"/blog/2022/04/securing-kubewarden-policies/","postref":"7d9aa3cb5ed89d64e9badb6c8837af70","publishdate":"2022-05-02T00:00:00Z","readingtime":8,"relpermalink":"/blog/2022/04/securing-kubewarden-policies/","section":"blog","summary":"With recent releases, the Kubewarden stack supports verifying the integrity and authenticity of content using the Sigstore project.\nIn this post, we focus on Kubewarden Policies and how to create a Secure Supply Chain for them.\nSigstore? Since a full Sigstore dive is not within the scope for this post, we recommend checking out their nice docs.\nIn short, Sigstore provides an automatable workflow to match the distributed Open Source development model.","tags":null,"title":"Secure Supply Chain with Kubewarden: securing Kubewarden policies","type":"blog","url":null,"weight":0,"wordcount":1591},{"authors":["JosÃ© Guilherme Vanz"],"categories":null,"content":"\u003cp\u003eRecently a severe \u003ca href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-0811\"\u003eCVE\u003c/a\u003e\nin the CRI-O container engine come to public. The flaw in CRI-O allows bad\nactors to gain root access and run arbitrary code in the host machine.\u003c/p\u003e\n\u003cp\u003eA \u003ca href=\"https://github.com/cri-o/cri-o/releases/tag/v1.23.2\"\u003efix\u003c/a\u003e for the issue is\nalready available and you should update your cluster to avoid any headache in\nthe future. But if you cannot do that right away, use Kubewarden to mitigate the impact of\nthis issue. It\u0026rsquo;s possible to prevent pods with \u003ccode\u003esysctl\u003c/code\u003e configuration\nto run in the cluster with the policy \u003ccode\u003esysctl-psp\u003c/code\u003e available in the \u003ca href=\"https://hub.kubewarden.io/\"\u003ePolicy\nHub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe policy configuration to block all sysctl-related configuration for a pod is detailed below:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epolicies.kubewarden.io/v1alpha2\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eClusterAdmissionPolicy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emitigate-crio-cve\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003emodule\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eregistry://ghcr.io/kubewarden/policies/sysctl-psp:v0.1.7\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003eapiGroups\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eapiVersions\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pods\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eoperations\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003eCREATE\u003c/span\u003e\n    - \u003cspan style=\"color:#ae81ff\"\u003eUPDATE\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003emutating\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003esettings\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eforbiddenSysctls\u003c/span\u003e:\n    - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis will not allow pods that have kernel parameters defined to run. It\u0026rsquo;s important to\nremember that this is \u003cstrong\u003enot\u003c/strong\u003e a fix for the issue, but a temporary mitigation. You must update your CRI-O version as\nsoon as possible.\u003c/p\u003e\n\u003cp\u003eYou can test the solution using the pod definition from \u003ca href=\"https://sysdig.com/blog/cve-2022-0811-cri-o/\"\u003ethis Sysdig blogpost\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePod\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003esysctl-set\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003esecurityContext\u003c/span\u003e:\n   \u003cspan style=\"color:#f92672\"\u003esysctls\u003c/span\u003e:\n   - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ekernel.shm_rmid_forced\u003c/span\u003e\n     \u003cspan style=\"color:#f92672\"\u003evalue\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1+kernel.core_pattern=|/var/lib/containers/storage/overlay/3ef1281bce79865599f673b476957be73f994d17c15109d2b6a426711cf753e6/diff/malicious.sh #\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ealpine\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ealpine:latest\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOnce the\u003ccode\u003esysctl-psp\u003c/code\u003e policy is running, you will not be able to deploy the pod.\u003c/p\u003e\n","date":1648512e3,"description":"","dir":"blog/2022/03/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"2877a5bcc5311d336472acd5b62aa1fa","permalink":"/blog/2022/03/cri-o-cve-mitigation/","postref":"2877a5bcc5311d336472acd5b62aa1fa","publishdate":"2022-03-29T00:00:00Z","readingtime":2,"relpermalink":"/blog/2022/03/cri-o-cve-mitigation/","section":"blog","summary":"Recently a severe CVE in the CRI-O container engine come to public. The flaw in CRI-O allows bad actors to gain root access and run arbitrary code in the host machine.\nA fix for the issue is already available and you should update your cluster to avoid any headache in the future. But if you cannot do that right away, use Kubewarden to mitigate the impact of this issue. It\u0026rsquo;s possible to prevent pods with sysctl configuration to run in the cluster with the policy sysctl-psp available in the Policy Hub.","tags":null,"title":"CRI-O CVE-2022-0811 Mitigation","type":"blog","url":null,"weight":0,"wordcount":222},{"authors":["Raul Cabello Martin"],"categories":null,"content":"\u003cp\u003eUp till now, the only way to define a policy in Kubewarden was to use the \u003ca href=\"https://github.com/kubewarden/kubewarden-controller/blob/main/docs/crds/README.asciidoc#k8s-api-github-com-kubewarden-kubewarden-controller-apis-policies-v1alpha2-clusteradmissionpolicy\"\u003e\u003ccode\u003eClusterAdmissionPolicy\u003c/code\u003e\u003c/a\u003e resource that would be applied to cluster-wide resources across all namespaces.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s why we\u0026rsquo;re thrilled to announce the new \u003ccode\u003eAdmissionPolicy\u003c/code\u003e resource. This new resource is created inside a \u003ccode\u003enamespace\u003c/code\u003e and the policies will only process the requests that are targeting the namespace where the \u003ccode\u003eAdmissionPolicy\u003c/code\u003e is defined. Except from being a \u0026ldquo;namespaced\u0026rdquo; resource, \u003ccode\u003eAdmissionPolicy\u003c/code\u003e works exactly the same as the \u003ccode\u003eClusterAdmissionPolicy\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"why-should-you-use-admissionpolicies\"\u003eWhy should you use AdmissionPolicies?\u003c/h2\u003e\n\u003cp\u003eIt was possible to restrict the namespaces where a \u003ccode\u003eClusterAdmissionPolicy\u003c/code\u003e evaluated resources using a \u003ca href=\"https://github.com/kubewarden/kubewarden-controller/blob/main/docs/crds/README.asciidoc#clusteradmissionpolicyspec\"\u003e\u003ccode\u003enamespaceSelector\u003c/code\u003e\u003c/a\u003e. However there was no way for Kubernetes administrators to restrict users from creating \u003ccode\u003eClusterAdmissionPolicies\u003c/code\u003e that evaluate resources just in a particular namespace.\u003c/p\u003e\n\u003cp\u003eMoreover, allowing all tenants to deploy \u003ccode\u003eClusterAdmissionPolicies\u003c/code\u003e is risky. A tenant could apply policies that affect resources in all namespaces, even if they don\u0026rsquo;t have access to all of them.\nWhich is why, as a Kubernetes administrator, you probably want to allow tenants to deploy policies only in the namespaces they have access to. That\u0026rsquo;s where \u003ccode\u003eAdmissionPolicies\u003c/code\u003e come into play! \u003ccode\u003eAdmissionPolicies\u003c/code\u003e combined with \u003ca href=\"https://kubernetes.io/docs/reference/access-authn-authz/rbac/\"\u003eRole-Based Access Control (RBAC) in Kubernetes\u003c/a\u003e allow you to enforce this restriction by delimiting the tenants to deploy resources only across namespaces they have access to.\u003c/p\u003e\n\u003cp\u003eAs an example, let\u0026rsquo;s say you want a tenant who can deploy resources just to the \u003ccode\u003edevelopment\u003c/code\u003e namespace. You can allow this tenant to deploy \u003ccode\u003eAdmissionPolicies\u003c/code\u003e just in this namespace using RBAC. However, if you allowed them to create \u003ccode\u003eClusterAdmissionPolicies\u003c/code\u003e, they could block other resources from being handled in other namespaces.\u003c/p\u003e\n\u003ch2 id=\"admissionpolicy-in-action\"\u003eAdmissionPolicy in Action!\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s create an \u003ccode\u003eAdmissionPolicy\u003c/code\u003e that rejects privileged pods from being created in the \u003ccode\u003eproduction\u003c/code\u003e namespace.\nFor this example, a Kubernetes cluster with Kubewarden already installed is required. The installation process is described in the \u003ca href=\"https://docs.kubewarden.io/quick-start.html\"\u003equick start guide\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFirst, create two namespaces: \u003ccode\u003edevelopment\u003c/code\u003e and \u003ccode\u003eproduction\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl create ns development \nkubectl create ns production\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOnce the namespaces are created, create a new \u003ccode\u003eAdmissionPolicy\u003c/code\u003e resource in the \u003ccode\u003eproduction\u003c/code\u003e namespace:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epolicies.kubewarden.io/v1alpha2\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eAdmissionPolicy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ens-privileged-pods\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003enamespace\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eproduction\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003emodule\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eregistry://ghcr.io/kubewarden/policies/pod-privileged:v0.1.9\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003eapiGroups\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eapiVersions\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pods\u0026#34;\u003c/span\u003e]\n    \u003cspan style=\"color:#f92672\"\u003eoperations\u003c/span\u003e:\n    - \u003cspan style=\"color:#ae81ff\"\u003eCREATE\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003emutating\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWait for the policy to be active:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl wait --for=condition=PolicyActive admissionpolicies ns-privileged-pods -n production\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCreate a file named \u003ccode\u003eprivileged-pod.yaml\u003c/code\u003e with the following pod specification:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePod\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eprivileged-pod\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003econtainers\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx:latest\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003esecurityContext\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003eprivileged\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTry to create a privileged pod in the \u003ccode\u003eproduction\u003c/code\u003e namespace:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f privileged-pod.yaml -n production\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou will get the following error:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eError from server: error when creating \u0026#34;privileged-pod.yaml\u0026#34;: admission webhook \u0026#34;namespaced-kubewarden-privileged-pods.kubewarden.admission\u0026#34; denied the request: User \u0026#39;my-user\u0026#39; cannot schedule privileged containers\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFinally, verify you can successfully create a privileged pod in a different namespace:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f privileged-pod.yaml -n development\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eAs evidenced in the above example, Kubewarden provides you with two different choices for deploying policies.\u003c/p\u003e\n\u003cp\u003eIf your policy needs to be applied to resources across all namespaces or cluster-wide resources, then you can use \u003ccode\u003eClusterAdmissionPolicies\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOn the other hand, if your cluster is shared by multiple users or teams, uses different namespaces or your policy needs to be applied only to resources within a namespace, then the new \u003ccode\u003eAdmissionPolicy\u003c/code\u003e would be the right choice.\u003c/p\u003e\n\u003cp\u003eYou can find the \u003ccode\u003eAdmissionPolicy\u003c/code\u003e specification \u003ca href=\"https://github.com/kubewarden/kubewarden-controller/blob/e0433fc3774d06dcf5e08bf2c600ad0117b89448/docs/crds/README.asciidoc#admissionpolicy\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAs a community, we thrive on feedback and welcome your suggestions! Feel free to open an issue against our\n\u003ca href=\"https://github.com/kubewarden/kubewarden-controller\"\u003eGitHub repository\u003c/a\u003e or get in\ntouch on the \u003ca href=\"https://kubernetes.slack.com/archives/C01T3GTC3L7\"\u003e#kubewarden Slack channel\u003c/a\u003e!\u003c/p\u003e\n","date":1647388800,"description":"","dir":"blog/2022/03/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"e54c0f98fe67631a98aeb21b0f459672","permalink":"/blog/2022/03/admission-policy/","postref":"e54c0f98fe67631a98aeb21b0f459672","publishdate":"2022-03-16T00:00:00Z","readingtime":3,"relpermalink":"/blog/2022/03/admission-policy/","section":"blog","summary":"Up till now, the only way to define a policy in Kubewarden was to use the ClusterAdmissionPolicy resource that would be applied to cluster-wide resources across all namespaces.\nThat\u0026rsquo;s why we\u0026rsquo;re thrilled to announce the new AdmissionPolicy resource. This new resource is created inside a namespace and the policies will only process the requests that are targeting the namespace where the AdmissionPolicy is defined. Except from being a \u0026ldquo;namespaced\u0026rdquo; resource, AdmissionPolicy works exactly the same as the ClusterAdmissionPolicy.","tags":null,"title":"Introducing the AdmissionPolicy","type":"blog","url":null,"weight":0,"wordcount":568},{"authors":["Rafael FernÃ¡ndez LÃ³pez"],"categories":null,"content":"\u003cp\u003eThe Kubewarden team is glad to announce that in the spirit of helping\nPolicy Authors and Cluster Administrators, the project is now\nofficially multiplatform.\u003c/p\u003e\n\u003cp\u003eThe list of supported platforms as of now are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ePolicy Server, as a \u003ca href=\"https://github.com/kubewarden/policy-server/pkgs/container/policy-server\"\u003econtainer image\u003c/a\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003elinux/amd64\u003c/code\u003e (with the \u003ccode\u003emusl\u003c/code\u003e libc)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elinux/arm64\u003c/code\u003e (with the \u003ccode\u003emusl\u003c/code\u003e libc)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ekwctl, as a \u003ca href=\"https://github.com/kubewarden/kwctl/releases\"\u003estandalone binary\u003c/a\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edarwin\u003c/code\u003e (\u003ccode\u003ex86_64\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elinux\u003c/code\u003e (\u003ccode\u003eaarch64\u003c/code\u003e, with the \u003ccode\u003emusl\u003c/code\u003e libc)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elinux\u003c/code\u003e (\u003ccode\u003ex86_64\u003c/code\u003e, with the \u003ccode\u003emusl\u003c/code\u003e libc)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewindows\u003c/code\u003e (\u003ccode\u003ex86_64\u003c/code\u003e, with \u003ccode\u003eMSVC\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe have prioritized the usage of the same dependencies and toolchain\non platforms where we were able to do so.\u003c/p\u003e\n\u003ch2 id=\"looking-for-platform-convergence\"\u003eLooking for platform convergence\u003c/h2\u003e\n\u003cp\u003eInitially, we were using \u003ccode\u003eglibc\u003c/code\u003e and \u003ccode\u003eopenssl\u003c/code\u003e as dependencies in our\nproject. However, these two libraries are somewhat special and\nsometimes problematic to converge into other platforms.\u003c/p\u003e\n\u003cp\u003eHere is a short summary of the lessons learned, sometimes the hard way,\nfor both libraries.\u003c/p\u003e\n\u003ch3 id=\"the-libc\"\u003eThe libc\u003c/h3\u003e\n\u003cp\u003eIn the early stages of development, the Kubewarden team decided to use the \u003ca href=\"https://musl.libc.org/\"\u003e\u003ccode\u003emusl libc\u003c/code\u003e\u003c/a\u003e library.\nThis allowed us to avoid potential difficulties with \u003ccode\u003eglibc\u003c/code\u003e down the road (i.e., Cross-compilation time or making a full static binary).\u003c/p\u003e\n\u003cp\u003eThe team also thinks that producing a final static binary for all platforms is in our users' own interests, especially for a CLI tool like \u003ccode\u003ekwctl\u003c/code\u003e, which interacts directly with our users' environment.\u003c/p\u003e\n\u003ch3 id=\"the-ssl-stack\"\u003eThe SSL stack\u003c/h3\u003e\n\u003cp\u003eThe second part of the puzzle is \u003ccode\u003eopenssl\u003c/code\u003e. It\u0026rsquo;s also a complex piece\nof software.\u003c/p\u003e\n\u003cp\u003eAs stated above, we are interested in cross compiling for multiple\noperating systems such as Windows and macOS (Darwin).\u003c/p\u003e\n\u003cp\u003eLuckily for us, a new TLS implementation has popped up in the Rust\necosystem: \u003ca href=\"https://github.com/rustls/rustls\"\u003erustls\u003c/a\u003e. Thanks to\n\u003ccode\u003erustls\u003c/code\u003e, it\u0026rsquo;s now easier to produce a final binary of \u003ccode\u003ekwctl\u003c/code\u003e that\nwill work on all major platforms. And all of that is from the same source\ncode.\u003c/p\u003e\n\u003ch2 id=\"closing\"\u003eClosing\u003c/h2\u003e\n\u003cp\u003eThese decisions might seem very technical or bring less\nvalue as other features. But for the Kubewarden team, it\u0026rsquo;s important\nwe provide a solution that is suitable for as many people as\npossible.\u003c/p\u003e\n\u003cp\u003eAnd at the same time, we are trying to keep the project as convergent as\npossible, by reducing the number of critical, high-complexity\ndependencies we use in our code base.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: \u003ca href=\"https://github.com/kubewarden/kwctl/issues/124\"\u003e\u003ccode\u003ekwctl\u003c/code\u003e is not building\nyet\u003c/a\u003e on Apple\nSilicon (macOS). We are following this closely and will release the\nnew architecture as soon as it\u0026rsquo;s possible.\u003c/p\u003e\n\u003cp\u003eIn the meantime, you\u0026rsquo;ll have to fall back to \u003ccode\u003erosetta\u003c/code\u003e in this\nenvironment, so you can use the \u003ccode\u003ex86_64\u003c/code\u003e version of \u003ccode\u003ekwctl\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTry \u003ca href=\"https://docs.kubewarden.io/quick-start.html\"\u003eKubewarden\u003c/a\u003e in as\nmany places as you want! We are eagerly looking for your feedback!\u003c/p\u003e\n","date":1643932800,"description":"","dir":"blog/2022/02/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"ef94339bc6e741183976e24739f12af8","permalink":"/blog/2022/02/multiplatform-kubewarden/","postref":"ef94339bc6e741183976e24739f12af8","publishdate":"2022-02-04T00:00:00Z","readingtime":2,"relpermalink":"/blog/2022/02/multiplatform-kubewarden/","section":"blog","summary":"The Kubewarden team is glad to announce that in the spirit of helping Policy Authors and Cluster Administrators, the project is now officially multiplatform.\nThe list of supported platforms as of now are:\n  Policy Server, as a container image:\n linux/amd64 (with the musl libc) linux/arm64 (with the musl libc)    kwctl, as a standalone binary:\n darwin (x86_64) linux (aarch64, with the musl libc) linux (x86_64, with the musl libc) windows (x86_64, with MSVC)    We have prioritized the usage of the same dependencies and toolchain on platforms where we were able to do so.","tags":null,"title":"Multiplatform Kubewarden","type":"blog","url":null,"weight":0,"wordcount":421},{"authors":["JosÃ© Guilherme Vanz"],"categories":null,"content":"\u003cp\u003eThe Kubewarden team worked tirelessly to create equivalent Kubewarden policies\nfor all the deprecated Pod Security Policies (PSP). In order to reach this very\nimportant milestone, the team wrote the policies with the same validations\navailable in the Kubernetes PSPs, and we counted on the community help to map\nand validate the policies.\u003c/p\u003e\n\u003cp\u003eThis will allow our users to replace deprecated PSPs while continuing to enforce\ntheir security rules.\u003c/p\u003e\n\u003cp\u003eThe Kubewarden policies which replace all the Kubernetes PSPs, are available\nin the Policy Hub, and you can find them by typing the keyword \u0026ldquo;PSP\u0026rdquo;. And, to\nhave the exact same behavior of the Kubernetes PSPs is necessary a minimum version\nfor some of the Kubewarden components, which are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eKubewarden controller v0.4.5\u003c/li\u003e\n\u003cli\u003ePolicy Server version v0.2.6\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou may are thinking: why do I need to use these specific versions?\u003c/p\u003e\n\u003cp\u003eThe answer is related to \u0026ldquo;requests mutation\u0026rdquo;. Let me explain.\u003c/p\u003e\n\u003cp\u003eIn the previous versions of Kubewarden Policy Server, if a policy mutated a\nrequest and it\u0026rsquo;s configured as a \u0026ldquo;mutating\u0026rdquo; policy, the Policy Server would\nalways accept the request and this behavior is not aligned with the Kubernetes\nPSP validation.\u003c/p\u003e\n\u003cp\u003eInstead, you should be able to reject a request even if a mutation happens.\nTo solve this misalignment, the team changed the Kubewarden controller and\nPolicy Server to allow you configure a mutating policy to behave like a\nvalidated one. But if you don\u0026rsquo;t need it, you can use the policies in previous\nKubewarden versions as well.\u003c/p\u003e\n\u003cp\u003eSince the Kubewarden controller and Policy Server versions update, if you mark\na policy as \u0026ldquo;mutating\u0026rdquo; (setting \u003ccode\u003etrue\u003c/code\u003e in the \u0026ldquo;mutating\u0026rdquo; field in the\nClusterAdmissionPolicy resource), the mutated requests will be accepted as before.\nIn the other hand, if you deploy a policy which mutates requests with the\n\u0026ldquo;mutating\u0026rdquo; field set to \u003ccode\u003efalse\u003c/code\u003e, the requests will be rejected.\u003c/p\u003e\n\u003cp\u003eThis means Kubewarden now have policies which cover 100% of the deprecated PSPs,\nand they behave the same way than the PSPs.\u003c/p\u003e\n\u003cp\u003eThanks to the community for helping the team spot missing policies and the\ndiscrepancies between the Kubernetes PSPs and Kubewarden policies. The combined\nwork is what made Kubewarden reach this important milestone.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s worth full to mention that our community colleagues from (appvia)[https://www.appvia.io/]\nhave made available a (tool)[https://appvia.github.io/psp-migration/] to help PSP\u003cbr\u003e\nusers migrate to Kubewarden policies and similar options like Gatekeeper and Kyverno.\nCheck it out!\u003c/p\u003e\n","date":1643587200,"description":"","dir":"blog/2022/01/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"365d14f934c952b75f2b183e3ac6693d","permalink":"/blog/2022/01/mutating-policy-behave-as-validating/","postref":"365d14f934c952b75f2b183e3ac6693d","publishdate":"2022-01-31T00:00:00Z","readingtime":2,"relpermalink":"/blog/2022/01/mutating-policy-behave-as-validating/","section":"blog","summary":"The Kubewarden team worked tirelessly to create equivalent Kubewarden policies for all the deprecated Pod Security Policies (PSP). In order to reach this very important milestone, the team wrote the policies with the same validations available in the Kubernetes PSPs, and we counted on the community help to map and validate the policies.\nThis will allow our users to replace deprecated PSPs while continuing to enforce their security rules.\nThe Kubewarden policies which replace all the Kubernetes PSPs, are available in the Policy Hub, and you can find them by typing the keyword \u0026ldquo;PSP\u0026rdquo;.","tags":null,"title":"Kubewarden policies cover all the Kubernetes Pod Security Policies","type":"blog","url":null,"weight":0,"wordcount":391},{"authors":["Rafael FernÃ¡ndez LÃ³pez"],"categories":null,"content":"\u003cp\u003eWe recently got notified that the \u003ccode\u003epolicy-server\u003c/code\u003e \u003ca href=\"https://github.com/kubewarden/docs/issues/75\"\u003ewas crashing in an\naarch64\nenvironment\u003c/a\u003e. The moment\nin which it got a request from the API server, it crashed immediately\nwith a SIGSEGV signal.\u003c/p\u003e\n\u003cp\u003eWe figured out that this was only happening when the request was a TLS\none, and that the problem was related to the OpenSSL stack and the way\nwe were producing the final image of the \u003ccode\u003epolicy-server\u003c/code\u003e with the\nOpenSSL stack.\u003c/p\u003e\n\u003cp\u003eThe good news is that we took this opportunity to migrate the\n\u003ccode\u003epolicy-server\u003c/code\u003e from OpenSSL to\n\u003ca href=\"https://github.com/rustls/rustls\"\u003e\u003ccode\u003erustls\u003c/code\u003e\u003c/a\u003e. As a result, the\n\u003ccode\u003epolicy-server\u003c/code\u003e container image has been greatly simplified.\u003c/p\u003e\n\u003cp\u003eOther Kubewarden components have also been revamped to use\n\u003ccode\u003erustls\u003c/code\u003e. More on that on a future blog post.\u003c/p\u003e\n\u003cp\u003eWe would like to thank the \u003ca href=\"https://github.com/Appvia\"\u003e\u003ccode\u003eappvia\u003c/code\u003e\u003c/a\u003e team\nfor their contributions to the project and the valuable feedback that\nthey have provided to us.\u003c/p\u003e\n","date":1642723200,"description":"","dir":"blog/2022/01/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"b600d02221fabe304c2393e00b8f4739","permalink":"/blog/2022/01/policy-server-on-aarch64/","postref":"b600d02221fabe304c2393e00b8f4739","publishdate":"2022-01-21T00:00:00Z","readingtime":1,"relpermalink":"/blog/2022/01/policy-server-on-aarch64/","section":"blog","summary":"We recently got notified that the policy-server was crashing in an aarch64 environment. The moment in which it got a request from the API server, it crashed immediately with a SIGSEGV signal.\nWe figured out that this was only happening when the request was a TLS one, and that the problem was related to the OpenSSL stack and the way we were producing the final image of the policy-server with the OpenSSL stack.","tags":null,"title":"Policy Server on aarch64","type":"blog","url":null,"weight":0,"wordcount":143},{"authors":["Flavio Castelli"],"categories":null,"content":"\u003cp\u003eYear 2021 is almost over. Let\u0026rsquo;s take that as a chance to look back at what has been achieved during the 1st year of life of the Kubewarden project.\u003c/p\u003e\n\u003cp\u003eFinally, I\u0026rsquo;ll also talk about what we plan to do during the next one.\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \u003cimg src=\"/images/year-progress.png\"\n         alt=\"Year Progress Bar\"/\u003e \n\u003c/figure\u003e\n\n\u003ch2 id=\"2021-highlights\"\u003e2021 Highlights\u003c/h2\u003e\n\u003ch3 id=\"project-announcement\"\u003eProject Announcement\u003c/h3\u003e\n\u003cp\u003eThe Kubewarden project has been introduced to the masses for the 1st time during KubeCon Europe 2021.\nDuring this presentation, Rafael and I explained what lead us to rethink how Kubernetes policies could be written and distributed.\nThe talk recording can be found \u003ca href=\"http://www.youtube.com/watch?v=Bhw5Qi78jj8\"\u003ehere\u003c/a\u003e, watch it to better understand Kubewarden\u0026rsquo;s mission.\u003c/p\u003e\n\u003cp\u003eDuring the remaining part of the year, Kubewarden talks featured at other conferences like\n\u003ca href=\"https://www.youtube.com/watch?v=VF0-VPu6nW0\u0026amp;list=PLj6h78yzYM2ORbHrvs32QYLqfs080dqte\u0026amp;index=10\"\u003eKubeCon EU Security Day\u003c/a\u003e,\n\u003ca href=\"https://www.youtube.com/watch?v=tDtAcSPr9Ig\"\u003eOpen Source Summit\u003c/a\u003e,\n\u003ca href=\"https://www.youtube.com/watch?v=4a9aBTKKvzA\"\u003eContainer Days\u003c/a\u003e,\n\u003ca href=\"https://www.youtube.com/watch?v=oNJxPbvPzLk\"\u003eKubeCon NA Wasm Day\u003c/a\u003e,\n\u003ca href=\"https://www.youtube.com/watch?v=HqCXhD6Bckg\u0026amp;list=PLj6h78yzYM2M3cMd-zoDppjMo9eRmQrYU\u0026amp;index=2\"\u003eKubernetes Community Days Italy\u003c/a\u003e\nand other live streaming events. What a year! ð¤©\u003c/p\u003e\n\u003ch3 id=\"the-kwctl-utility\"\u003eThe \u003ccode\u003ekwctl\u003c/code\u003e Utility\u003c/h3\u003e\n\u003cp\u003eShortly after KubeCon EU, we expanded the Kubewarden toolkit by releasing the \u003ca href=\"https://github.com/kubewarden/kwctl/\"\u003e\u003ccode\u003ekwctl\u003c/code\u003e\u003c/a\u003e\nutility.\u003c/p\u003e\n\u003cp\u003eThis is a command line tool aimed both at policy authors and Kubernetes operators.\nYou can picture \u003ccode\u003ekwctl\u003c/code\u003e as a sort of \u003ccode\u003ekubectl\u003c/code\u003e for Kubewarden policies.\u003c/p\u003e\n\u003cp\u003eThis tool has been designed to allow quick iterative cycles both when developing policies (code â build â unit test â end-to-end tests â code ) and when gaining confidence with a policy written by a 3rd parties (download â run â tune â run).\u003c/p\u003e\n\u003cp\u003ekwctl became a central part of all our presentations. For example, you can see it in action during the latest \u003ca href=\"https://www.youtube.com/watch?v=yh_L__CPqhc\"\u003eRancher Global Online Meetup\u003c/a\u003e of 2021.\u003c/p\u003e\n\u003ch3 id=\"become-the-universal-policy-framework\"\u003eBecome the Universal Policy Framework\u003c/h3\u003e\n\u003cp\u003eAnother achievement of 2021 has been the ability to execute policies written with Rego.\nFor the ones not familiar with it, Rego is the query language used by Open Policy Agent and by Gatekeeper.\u003c/p\u003e\n\u003cp\u003eSince Rego-based policies can be built into WebAssembly binaries, we extended all our tooling to be able the handle also the policies written for Open Policy Agent and Gatekeeper.\u003c/p\u003e\n\u003cp\u003eThanks to that, you can use Kubewarden as the single Policy Engine to keep your Kubernetes Clusters secure and compliant.\u003c/p\u003e\n\u003cp\u003eIn case you missed, \u003ca href=\"/blog/2021/09/towards-a-universal-policy-platform/\"\u003ethis blog post\u003c/a\u003e gives a detailed overview about this feature.\u003c/p\u003e\n\u003ch3 id=\"observability\"\u003eObservability\u003c/h3\u003e\n\u003cp\u003eOne of the major topics we tackled during the last year has been observability.\u003c/p\u003e\n\u003cp\u003eWe worked hard to provide a better observability story to our users: both policy authors and operators.\nThis culminated with a tight integration between Kubewarden and the \u003ca href=\"https://opentelemetry.io/\"\u003eOpenTelemetry project\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBy leveraging OpenTelemetry, policy behavior can be analyzed using modern tracing techniques. Trace events can then be collected and inspected using tools like \u003ca href=\"https://www.jaegertracing.io/\"\u003eJaeger\u003c/a\u003e.\nYou can learn more about that by reading \u003ca href=\"/blog/2021/11/deep-dive-into-policy-logging/\"\u003ethis blog post\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eMoreover, different metrics about policies and the whole Kubewarden stack have been exposed to Prometheus and made \u003ca href=\"https://grafana.com/grafana/dashboards/15314\"\u003evisible in Grafana\u003c/a\u003e. This allows a tight integration with the monitoring ecosystem that most Kubernetes Operator already use.\u003c/p\u003e\n\u003ch3 id=\"life-after-pod-security-policy-removal\"\u003eLife after Pod Security Policy removal\u003c/h3\u003e\n\u003cp\u003eLately, we have been focusing on providing 1:1 alternatives to the deprecated, and soon dropped, \u003ca href=\"https://kubernetes.io/docs/concepts/policy/pod-security-policy/\"\u003eKubernetes Pod Security Policies\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAll the original PSP can now be replaced with Kubewarden policies. You can find all these policies, and even more, on \u003ca href=\"https://hub.kubewarden.io/\"\u003eKubewarden Policy Hub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen talking about how to migrate from Kubernetes Pod Security Policies to something maintained, we highly recommend to look at \u003ca href=\"https://github.com/appvia/psp-migration\"\u003ethis\u003c/a\u003e ongoing work from \u003ca href=\"https://www.appvia.io/\"\u003eAppVia\u003c/a\u003e.\nThey even made \u003ca href=\"https://appvia.github.io/psp-migration/\"\u003ethis\u003c/a\u003e fancy UI that allows you to convert a Pod Security Policy to a Kubewarden one! ð\u003c/p\u003e\n\u003ch2 id=\"what-to-expect-from-2022\"\u003eWhat to expect from 2022\u003c/h2\u003e\n\u003cp\u003eWhat should you expect from the Kubewarden project in 2022? Well, our roadmap is \u003ca href=\"https://github.com/orgs/kubewarden/projects/2\"\u003epublicly available\u003c/a\u003e, however these are the key points:\u003c/p\u003e\n\u003ch3 id=\"secure-supply-chain\"\u003eSecure Supply Chain\u003c/h3\u003e\n\u003cp\u003eDue to an unfortunate series of exploits, the topic of Secure Supply Chain became one of the highest trending topics of the whole IT industry during 2021.\u003c/p\u003e\n\u003cp\u003eWe are currently working to integrate \u003ca href=\"https://www.sigstore.dev\"\u003eSigstore\u003c/a\u003e into Kubewarden.\nThe integration will be tackled from two different angles:\u003c/p\u003e\n\u003cp\u003eFirst of all, we will use Sigstore to sign all the Kubewarden policies available on the Kubewarden Policy Hub.\nThe Policy Server and \u003ccode\u003ekwctl\u003c/code\u003e will be able consume this information to verify the trustworthiness of the policies before executing them.\u003c/p\u003e\n\u003cp\u003eFinally, we will expose Sigstore verification API to our policy authors. This will make it possible to create policies that verify the trustworthiness of container images and any other kind of artifacts that can be signed with Sigstore.\u003c/p\u003e\n\u003cp\u003eObviously, we will also provide a ready-to-use policy that implements the most common security checks.\u003c/p\u003e\n\u003ch3 id=\"new-policy-operation-modes\"\u003eNew Policy Operation Modes\u003c/h3\u003e\n\u003cp\u003eRight now, when deploying Kubewarden policies inside of a Kubernetes cluster, their only operational mode is \u0026ldquo;enforce\u0026rdquo;.\nThat means resources violating policies are immediately rejected.\u003c/p\u003e\n\u003cp\u003eWe want to introduce new operation modes to allow Kubernetes operators to deploy the policies in a more \u0026ldquo;relaxed\u0026rdquo; mode.\u003c/p\u003e\n\u003cp\u003eThis can be useful to understand, ahead of time, what could be blocked by Kubewarden policies.\u003c/p\u003e\n\u003ch3 id=\"background-scan\"\u003eBackground Scan\u003c/h3\u003e\n\u003cp\u003ePolicies inside of a Kubernetes cluster change over the time, they can be added/removed/updated; the same applies to their configuration.\nBecause of that, a resources that was previously considered acceptable, could become rejected due to one of these changes.\u003c/p\u003e\n\u003cp\u003eWe want to provide a way for Kubernetes operators to know the compliance status of their clusters. The goal is to simplify the identification of the already existing Kubernetes resources that are violating the enforced policies.\u003c/p\u003e\n\u003ch3 id=\"context-aware-policies\"\u003eContext Aware Policies\u003c/h3\u003e\n\u003cp\u003eKubewarden already supports the concept of \u0026ldquo;context aware policies\u0026rdquo;. These are policies that, at evaluation time, can pull additional information about the cluster status to make their final decision.\u003c/p\u003e\n\u003cp\u003eWe have ambitious goals for this feature. We plan to work more on this story and graduate context aware policies to fully supported.\u003c/p\u003e\n\u003ch2 id=\"call-for-action\"\u003eCall for Action\u003c/h2\u003e\n\u003cp\u003eDo you want to take advantage of the holiday season to learn more about Kubewarden? Excellent!\u003c/p\u003e\n\u003cp\u003eStart by looking at our \u003ca href=\"https://docs.kubewarden.io/quick-start.html\"\u003equickstart\u003c/a\u003e guide. It will take you just a few minutes to get Kubewarden up and running and enforce your first policy!\u003c/p\u003e\n\u003cp\u003eOnce you\u0026rsquo;re done with that, don\u0026rsquo;t forget to look at \u003ca href=\"https://docs.kubewarden.io/tasks.html\"\u003ethis page\u003c/a\u003e to know what to do next.\u003c/p\u003e\n\u003cp\u003eAlso, don\u0026rsquo;t forget to look at \u003ca href=\"https://www.youtube.com/watch?v=w2tUQUoizP4\"\u003ethis\u003c/a\u003e video tutorial from \u003ca href=\"https://twitter.com/robertsirc\"\u003eRobert Sirchia\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eHappy holidays and happy hacking! See you in 2022 ð¥³\u003c/p\u003e\n","date":1640131200,"description":"","dir":"blog/2021/12/","expirydate":-62135596800,"fuzzywordcount":1100,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"2ead93f770cac1f9d7c435826acb6c8e","permalink":"/blog/2021/12/first-year-of-kubewarden/","postref":"2ead93f770cac1f9d7c435826acb6c8e","publishdate":"2021-12-22T00:00:00Z","readingtime":5,"relpermalink":"/blog/2021/12/first-year-of-kubewarden/","section":"blog","summary":"Year 2021 is almost over. Let\u0026rsquo;s take that as a chance to look back at what has been achieved during the 1st year of life of the Kubewarden project.\nFinally, I\u0026rsquo;ll also talk about what we plan to do during the next one.\n 2021 Highlights Project Announcement The Kubewarden project has been introduced to the masses for the 1st time during KubeCon Europe 2021. During this presentation, Rafael and I explained what lead us to rethink how Kubernetes policies could be written and distributed.","tags":null,"title":"First year of Kubewarden","type":"blog","url":null,"weight":0,"wordcount":1012},{"authors":["Rafael FernÃ¡ndez LÃ³pez"],"categories":null,"content":"\u003cp\u003ePolicies are regular programs. As such they often have the need to log information. In general, we\nare used to make our programs log into standard output (stdout) and standard error (stderr) outputs.\u003c/p\u003e\n\u003cp\u003eHowever, policies run in a confined WebAssembly environment. For this mechanism to work as usual\nKubewarden would need to set up the runtime environment in a way that the policy can write to stdout\nand stderr file descriptors, and upon completion, Kubewarden can check them \u0026ndash; or stream log\nmessages as they pop up.\u003c/p\u003e\n\u003cp\u003eGiven Kubewarden uses \u003ca href=\"https://wapc.io/\"\u003ewaPC\u003c/a\u003e for allowing intercommunication between the guest\n(the policy) and the host (Kubewarden \u0026ndash; the \u003ccode\u003epolicy-server\u003c/code\u003e or \u003ccode\u003ekwctl\u003c/code\u003e if we are running policies\nmanually), we have extended our language SDK\u0026rsquo;s so that they can log messages by using waPC\ninternally.\u003c/p\u003e\n\u003cp\u003eKubewarden has defined  a contract between policies (guests) and the host (Kubewarden) for\nperforming \u003ca href=\"https://docs.kubewarden.io/writing-policies/spec/settings.html\"\u003epolicy settings\nvalidation\u003c/a\u003e, \u003ca href=\"https://docs.kubewarden.io/writing-policies/spec/validating-policies.html\"\u003epolicy\nvalidation\u003c/a\u003e, \u003ca href=\"https://docs.kubewarden.io/writing-policies/spec/mutating-policies.html\"\u003epolicy\nmutation\u003c/a\u003e and now,\nlogging.\u003c/p\u003e\n\u003cp\u003eThe waPC interface used for logging is therefore a contract, because once you have built a policy,\nit should be possible to run it in future Kubewarden versions. In this sense, Kubewarden keeps this\ncontract behind the SDK of your preferred language, so you don\u0026rsquo;t have to deal with the details of\nhow logging is implemented in Kubewarden. You just have to use your logging library of choice for\nthe language you are working with.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s look into how to take advantage of logging with Kubewarden in specific languages!\u003c/p\u003e\n\u003ch2 id=\"for-policy-authors\"\u003eFor Policy Authors\u003c/h2\u003e\n\u003ch3 id=\"go\"\u003eGo\u003c/h3\u003e\n\u003cp\u003eWe are going to use the \u003ca href=\"https://github.com/kubewarden/go-policy-template\"\u003eGo policy template\u003c/a\u003e as a\nstarting point.\u003c/p\u003e\n\u003cp\u003eOur Go SDK provides integration with the \u003ca href=\"https://github.com/francoispqt/onelog\"\u003e\u003ccode\u003eonelog\u003c/code\u003e\u003c/a\u003e library.\nWhen our policy is built for the WebAssembly target, it will send the logs to the host through waPC.\nOtherwise, it will just print them on stderr \u0026ndash; but this is only relevant if you happen to run your\npolicy outside a Kubewarden runtime environment.\u003c/p\u003e\n\u003cp\u003eOne of the first things our policy does on its\n\u003ca href=\"https://github.com/kubewarden/go-policy-template/blob/a8dd2b374ce32ab01838d0c3a04efda1735599b3/main.go\"\u003e\u003ccode\u003emain.go\u003c/code\u003e\u003c/a\u003e\nfile is to initialize the logger:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e (\n\t\u003cspan style=\"color:#a6e22e\"\u003elogWriter\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eKubewardenLogWriter\u003c/span\u003e{}\n\t\u003cspan style=\"color:#a6e22e\"\u003elogger\u003c/span\u003e    = \u003cspan style=\"color:#a6e22e\"\u003eonelog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNew\u003c/span\u003e(\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003elogWriter\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eonelog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eALL\u003c/span\u003e, \u003cspan style=\"color:#75715e\"\u003e// shortcut for onelog.DEBUG|onelog.INFO|onelog.WARN|onelog.ERROR|onelog.FATAL\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t)\n)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe are then able to use \u003ccode\u003eonelog\u003c/code\u003e API in order to produce log messages. We could, for example,\nperform structured logging with debugging level:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#a6e22e\"\u003elogger\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDebugWithFields\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validating object\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eonelog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEntry\u003c/span\u003e) {\n    \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003egjson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetBytes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request.object.metadata.name\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e())\n\t\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;namespace\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003egjson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetBytes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request.object.metadata.namespace\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e())\n})\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOr, with info level:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#a6e22e\"\u003elogger\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInfoWithFields\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validating object\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eonelog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEntry\u003c/span\u003e) {\n    \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003egjson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetBytes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request.object.metadata.name\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e())\n\t\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;namespace\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003egjson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetBytes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request.object.metadata.namespace\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e())\n})\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhat happens under the covers is that our Go SDK sends \u003ca href=\"https://github.com/kubewarden/policy-sdk-go/blob/95c4b93adf6830862b85f953bc09d31de7490872/log_writer_wasi.go#L15\"\u003eevery log event to the \u003ccode\u003ekubewarden\u003c/code\u003e host\nthrough\nwaPC\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"rust\"\u003eRust\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s use the \u003ca href=\"https://github.com/kubewarden/policy-rust-template\"\u003eRust policy template\u003c/a\u003e as our\nguide.\u003c/p\u003e\n\u003cp\u003eOur Rust SDK implements an integration with the \u003ccode\u003eslog\u003c/code\u003e crate. This crate exposes the concept of\ndrains, so we have to \u003ca href=\"https://github.com/kubewarden/policy-rust-template/blob/fd46e75b3794dbacbf499da6632d5294bdcea28c/src/lib.rs#L16-L21\"\u003edefine a global drain that we will use throughout our policy\ncode\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"color:#66d9ef\"\u003euse\u003c/span\u003e kubewarden::logging;\n\u003cspan style=\"color:#66d9ef\"\u003euse\u003c/span\u003e slog::{o, Logger};\nlazy_static\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e {\n    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eref\u003c/span\u003e LOG_DRAIN: \u003cspan style=\"color:#a6e22e\"\u003eLogger\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Logger::root(\n        logging::KubewardenDrain::new(),\n        o\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;some-key\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;some-value\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// This key value will be shared by all logging events that use\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e                                       \u003cspan style=\"color:#75715e\"\u003e// this logger\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    );\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen, we can use the macros provided by \u003ccode\u003eslog\u003c/code\u003e to log on different levels:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"color:#66d9ef\"\u003euse\u003c/span\u003e slog::{crit, debug, error, info, trace, warn};\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet\u0026rsquo;s log an info level message:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003einfo\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e(\n    LOG_DRAIN,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;rejecting resource\u0026#34;\u003c/span\u003e;\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;resource_name\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eresource_name\n);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAs happens with the Go SDK implementation, our Rust implementation of the \u003ccode\u003eslog\u003c/code\u003e drain sends \u003ca href=\"https://github.com/kubewarden/policy-sdk-rust/blob/642d13b07053be6455c0b5f49df0e87ff6f022c5/src/logging/drain.rs#L57-L60\"\u003ethis\nlogging events to the host by using\nwaPC\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou can read more about slog \u003ca href=\"https://github.com/slog-rs/slog\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"swift\"\u003eSwift\u003c/h3\u003e\n\u003cp\u003eWe will be looking at the \u003ca href=\"https://github.com/kubewarden/swift-policy-template\"\u003eSwift policy\ntemplate\u003c/a\u003e for this example.\u003c/p\u003e\n\u003cp\u003eAs happens with Go and Rust\u0026rsquo;s SDK\u0026rsquo;s, the Swift SDK is instrumented to use Swift\u0026rsquo;s \u003ccode\u003eLogHandler\u003c/code\u003e from\nthe \u003ca href=\"https://github.com/apple/swift-log\"\u003e\u003ccode\u003eswift-log\u003c/code\u003e project\u003c/a\u003e, so our policy only has to initialize\nit. In our \u003ccode\u003eSources/Policy/main.swift\u003c/code\u003e file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewardenSdk\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLogging\u003c/span\u003e\n\nLoggingSystem.bootstrap(PolicyLogHandler.\u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen, in our policy business logic, under \u003ccode\u003eSources/BusinessLogic/validate.swift\u003c/code\u003e, we are able to log\nwith \u003ca href=\"https://apple.github.io/swift-log/docs/current/Logging/Structs/Logger.html\"\u003edifferent levels\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLogging\u003c/span\u003e\n\n\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evalidate\u003c/span\u003e(payload: String) -\u0026gt; String {\n    \u003cspan style=\"color:#75715e\"\u003e// ...\u003c/span\u003e\n\n    logger.info(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validating object\u0026#34;\u003c/span\u003e,\n        metadata: [\n            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;some-key\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;some-value\u0026#34;\u003c/span\u003e,\n        ])\n\n    \u003cspan style=\"color:#75715e\"\u003e// ...\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFollowing the same strategy as the Go and Rust SDK\u0026rsquo;s, the Swift SDK is able to \u003ca href=\"https://github.com/kubewarden/policy-sdk-swift/blob/59cc979fa9994f1653d3d3e3dd3072188b2c0a18/Sources/kubewardenSdk/logger.swift#L75-L80\"\u003epush log events to\nthe host through\nwaPC\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"for-cluster-administrators\"\u003eFor Cluster Administrators\u003c/h2\u003e\n\u003cp\u003eBeing able to log from within a policy is half of the story. Then, we have to be able to read and\npotentially collect these logs.\u003c/p\u003e\n\u003cp\u003eAs we have seen, Kubewarden policies support structured logging that is then forwarded to the\ncomponent running the policy. Usually, this is \u003ccode\u003ekwctl\u003c/code\u003e if you are executing the policy in a manual\nfashion, or \u003ccode\u003epolicy-server\u003c/code\u003e if the policy is being ran in a Kubernetes environment.\u003c/p\u003e\n\u003cp\u003eBoth \u003ccode\u003ekwctl\u003c/code\u003e and \u003ccode\u003epolicy-server\u003c/code\u003e use the \u003ca href=\"https://github.com/tokio-rs/tracing\"\u003e\u003ccode\u003etracing\u003c/code\u003e\u003c/a\u003e crate to\nproduce log events, either the events that are produced by the application itself, or by policies\nthat are running in WebAssembly runtime environments.\u003c/p\u003e\n\u003ch3 id=\"kwctl\"\u003e\u003ccode\u003ekwctl\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003ekwctl\u003c/code\u003e CLI tool takes a very straightforward approach to logging from policies: it will print\nthem to the standard error file descriptor.\u003c/p\u003e\n\u003ch3 id=\"policy-server\"\u003e\u003ccode\u003epolicy-server\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003epolicy-server\u003c/code\u003e supports \u003ca href=\"https://github.com/kubewarden/policy-server/blob/d615bfe7fdf1fe6001e655360fe85f0db2194410/src/cli.rs#L174-L206\"\u003edifferent log\nformats\u003c/a\u003e:\n\u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003etext\u003c/code\u003e and \u003ccode\u003eotlp\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eotlp\u003c/code\u003e? I hear you ask. It stands for \u003ca href=\"https://opentelemetry.io/\"\u003eOpenTelemetry\u003c/a\u003e Protocol. We will\nlook into that in a bit.\u003c/p\u003e\n\u003cp\u003eIf the \u003ccode\u003epolicy-server\u003c/code\u003e is run with the \u003ccode\u003e--log-fmt\u003c/code\u003e argument set to \u003ccode\u003ejson\u003c/code\u003e or \u003ccode\u003etext\u003c/code\u003e, the output will\nbe printed to the standard error file descriptor in JSON or plain text formats. These messages can\nbe read using \u003ccode\u003ekubectl logs \u0026lt;policy-server-pod\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003e--log-fmt\u003c/code\u003e is set to \u003ccode\u003eotlp\u003c/code\u003e, the \u003ccode\u003epolicy-server\u003c/code\u003e will use OpenTelemetry to report logs and\ntraces.\u003c/p\u003e\n\u003ch2 id=\"opentelemetry\"\u003eOpenTelemetry\u003c/h2\u003e\n\u003cp\u003eKubewarden is instrumented with OpenTelemetry, so it\u0026rsquo;s possible for the \u003ccode\u003epolicy-server\u003c/code\u003e to send\ntrace events to an \u003ca href=\"https://opentelemetry.io/docs/collector/\"\u003eOpenTelemetry collector\u003c/a\u003e by using the\nOpenTelemetry Protocol (\u003ccode\u003eotlp\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eOur official \u003ca href=\"https://github.com/kubewarden/helm-charts/blob/199b18b74ca664ab9370ba5fc101f890a3f3d00f/charts/kubewarden-controller/values.yaml\"\u003eKubewarden Helm\nChart\u003c/a\u003e\nhas certain values that allow you to deploy Kubewarden with OpenTelemetry support, reporting logs\nand traces to, for example, a Jaeger instance:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003etelemetry\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eenabled\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003etracing\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003ejaeger\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003eendpoint\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;all-in-one-collector.jaeger.svc.cluster.local:14250\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis functionality closes the gap on logging/tracing, given the freedom that the OpenTelemetry\ncollector provides to us in terms of flexibility of what to do with this logs and traces.\u003c/p\u003e\n\u003cp\u003eYou can read more about Kubewarden\u0026rsquo;s integration with OpenTelemetry in \u003ca href=\"https://docs.kubewarden.io/operator-manual/telemetry/opentelemetry/quickstart.html\"\u003eour\ndocumentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBut this is a big enough topic on its own worth a future blog post. Stay logged!\u003c/p\u003e\n","date":1636934400,"description":"","dir":"blog/2021/11/","expirydate":-62135596800,"fuzzywordcount":1100,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"30bc61d345ec9877a716613f9fdc1e36","permalink":"/blog/2021/11/deep-dive-into-policy-logging/","postref":"30bc61d345ec9877a716613f9fdc1e36","publishdate":"2021-11-15T00:00:00Z","readingtime":5,"relpermalink":"/blog/2021/11/deep-dive-into-policy-logging/","section":"blog","summary":"Policies are regular programs. As such they often have the need to log information. In general, we are used to make our programs log into standard output (stdout) and standard error (stderr) outputs.\nHowever, policies run in a confined WebAssembly environment. For this mechanism to work as usual Kubewarden would need to set up the runtime environment in a way that the policy can write to stdout and stderr file descriptors, and upon completion, Kubewarden can check them \u0026ndash; or stream log messages as they pop up.","tags":null,"title":"Deep Dive into policy logging","type":"blog","url":null,"weight":0,"wordcount":1008},{"authors":["VÃ­ctor Cuadrado Juan"],"categories":null,"content":"\u003cp\u003eWe are pleased to announce a new architecture for the Kubewarden stack, in line\nwith its journey to maturity:\u003c/p\u003e\n\u003cp\u003eThe introduction of a \u003cstrong\u003ePolicyServer\u003c/strong\u003e Custom Resource Definition (CRD) which\nallows users to describe a policy-server Deployment, together with binding\n\u003cstrong\u003eClusterAdmissionPolicies\u003c/strong\u003e to a specific \u003cstrong\u003ePolicyServer\u003c/strong\u003e instance.\u003c/p\u003e\n\u003cp\u003eThese 2 changes are accompanied by a multitude of improvements to make Kubewarden\nmore comfortable for Kubernetes Administrators, such as validation for\nKuberwarden Custom Resources, improvements in Helm Charts, Status and\nConditions for \u003cstrong\u003eClusterAdmissionPolicies\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eFor a comprehensive list, see the release notes of\n\u003ca href=\"https://github.com/kubewarden/helm-charts/releases/tag/kubewarden-crds-0.1.0\"\u003ekubewarden-crds-0.1.0\u003c/a\u003e\nand\n\u003ca href=\"https://github.com/kubewarden/helm-charts/releases/tag/kubewarden-controller-0.3.0\"\u003ekubewarden-controller-0.3.0\u003c/a\u003e\nHelm charts.\u003c/p\u003e\n\u003ch2 id=\"how-does-it-look-like\"\u003eHow does it look like?\u003c/h2\u003e\n\u003cp\u003eIn previous versions, the Kubewarden Controller instantiated a single Deployment\nof policy-server. That policy-server was configured via a ConfigMap, which\ncontained the Deployment options (image, replicas, \u0026hellip;), and a list of policies\nto be loaded, with information on where to pull them from, their configuration\noptions and so on.\u003c/p\u003e\n\u003cp\u003eWith the addition of the new \u003cstrong\u003ePolicyServer\u003c/strong\u003e Custom Resource, administrators\nhave a better UX, since they can define as many policy servers as they need, and\nget to select what PolicyServer each ClusterAdmissionPolicy targets. Let\u0026rsquo;s see a\ndiagram of the new architecture:\u003c/p\u003e\n\u003cfigure\u003e\n    \u003cimg src=\"/images/how-it-works-kubewarden.svg\"\n         alt=\"new architecture diagram\"/\u003e \n\u003c/figure\u003e\n\n\u003cp\u003eOn the diagram, notice the 2 separate PolicyServer Deployments in cyan and mauve\n(right), created as specified in the 2 PolicyServer resources (left).\u003c/p\u003e\n\u003cp\u003eEach policy server loads different policies \u0026ndash; all ClusterAdmissionPolicies that\ntarget that specific policy server. The new PolicyServer Custom Resource is\ncluster-wide, which means that is identifiable by its unique \u003ccode\u003ename\u003c/code\u003e. Here is an\nexample of a PolicyServer named \u003ccode\u003etenant-a\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e---\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epolicies.kubewarden.io/v1alpha2\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePolicyServer\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003etenant-a\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eghcr.io/kubewarden/policy-server:v0.1.10\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ereplicas\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003eserviceAccountName\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epolicy-server\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe PolicyServer Custom Resource also accepts an optional\n\u003ccode\u003espec.serviceAccountName\u003c/code\u003e to be associated with (if not set, as here, the\nNamespace default ServiceAccount will be used).\u003c/p\u003e\n\u003cp\u003eA ClusterAdmissionPolicy targeting that PolicyServer needs to set\n\u003ccode\u003espec.policyServer\u003c/code\u003e to \u003ccode\u003etenant-a\u003c/code\u003e, as such:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e---\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epolicies.kubewarden.io/v1alpha2\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eClusterAdmissionPolicy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epsp-capabilities\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003epolicyServer\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003etenant-a\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003emodule\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eregistry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.3\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003eapiGroups\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e]\n      \u003cspan style=\"color:#f92672\"\u003eapiVersions\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e]\n      \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pods\u0026#34;\u003c/span\u003e]\n      \u003cspan style=\"color:#f92672\"\u003eoperations\u003c/span\u003e:\n        - \u003cspan style=\"color:#ae81ff\"\u003eCREATE\u003c/span\u003e\n        - \u003cspan style=\"color:#ae81ff\"\u003eUPDATE\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003emutating\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003esettings\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eallowed_capabilities\u003c/span\u003e:\n      - \u003cspan style=\"color:#ae81ff\"\u003eCHOWN\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003erequired_drop_capabilities\u003c/span\u003e:\n      - \u003cspan style=\"color:#ae81ff\"\u003eNET_ADMIN\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor a more in depth dive, have a look at our \u003ca href=\"https://docs.kubewarden.io/architecture.html\"\u003earchitecture\ndocs\u003c/a\u003e, and the \u003ca href=\"https://github.com/kubewarden/kubewarden-controller/blob/main/docs/crds/README.asciidoc\"\u003eKubewarden CRDs documentation\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"ok-but-what-does-this-mean-for-administrators\"\u003eOk, but what does this mean for administrators?\u003c/h2\u003e\n\u003cp\u003eWith the possibility to use more than one PolicyServer, it is now up to the\nKubernetes administrators on how they want to split and organize policy\nevaluations, at the same time that resilience grows.\u003c/p\u003e\n\u003cp\u003eWhile the old architecture was already HA, a noisy tenant/namespace or a\nfrequently used policy could in the past bring to a crawl the only policy server\nand break havoc in the Cluster (as all admission reviews for the cluster went\nthrough it to be screened).\u003c/p\u003e\n\u003cp\u003eNow for example, a Kubernetes Administrator can decide to isolate policy\nevaluations per tenant/namespace by creating a PolicyServer for each tenant\nworkload. Or run mission critical policies separately, making the whole\ninfrastructure more resilient.\u003c/p\u003e\n\u003cp\u003eIn the future, with an upcoming namespaced AdmissionPolicy Custom Resource,\nadministrators will be able to give different tenants control over their own\nadmission policies, reducing administrative overload.\u003c/p\u003e\n\u003cp\u003eThe new architecture also validates and mutates PolicyServers and\nClusterAdmissionPolicies with dedicated admission controllers, for a better UX.\nWhich means that administrators can rest comfortably when editing them, as\ncatastrophic outcomes (such as all policies being dropped by a misconfigured\nPolicyServer, leading to DOS against the cluster) can never happen.\u003c/p\u003e\n\u003cp\u003eAlso, ClusterAdmissionPolicies will, if no \u003ccode\u003espec.policyServer\u003c/code\u003e is defined, bind\nto the PolicyServer named \u003ccode\u003edefault\u003c/code\u003e (created by the Helm chart). In addition,\n\u003ca href=\"https://kubernetes.io/docs/concepts/overview/working-with-objects/finalizers/\"\u003eFinalizers\u003c/a\u003e\nare now added to all Kubewarden Custom Resources, which ensure orderly deletion\nby the Kubewarden Controller.\u003c/p\u003e\n\u003cp\u003eThe inclusion of validating and mutating webhooks for Kuberwarden CRDs means that\nthe controller webhook server needs to be securely hooked up to the Kubernetes\nAPI. In this case, it means using TLS certificates. We have chosen to integrate\nKuberwarden with \u003ca href=\"https://cert-manager.io/\"\u003ecert-manager\u003c/a\u003e, to simplify the\ninstallation, and our Helm Chart today comes with the option for automatically\ncreating and setting up Self-Signed certs, or using your own cert-manager\nIssuer.\u003c/p\u003e\n\u003cp\u003eFor ease of deployment, we have separated the CRDs into its own Helm chart:\n\u003ccode\u003ekubewarden-crds\u003c/code\u003e. This prepares the stack for smoother upgrades in the future.\nThe Kubewarden Controller and default policy server stay in the\n\u003ccode\u003ekubewarden-controller\u003c/code\u003e Helm chart.\u003c/p\u003e\n\u003cp\u003eAll of the new changes simplify managing clusters. Which makes Kubewarden use\nvia \u003ca href=\"https://fleet.rancher.io/\"\u003eFleet\u003c/a\u003e more consistent and streamlined.\u003c/p\u003e\n\u003ch2 id=\"a-hands-on-example\"\u003eA hands-on example\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s install Kubewarden and secure our cluster against privileged pods with a\nsimple policy.\u003c/p\u003e\n\u003ch3 id=\"installing-kubewarden\"\u003eInstalling Kubewarden\u003c/h3\u003e\n\u003cp\u003eFollow this example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.5.3/cert-manager.yaml\n$ kubectl wait --for=condition=Available deployment --timeout=2m -n cert-manager --all\n$ helm repo add kubewarden https://charts.kubewarden.io\n$ helm install --create-namespace -n kubewarden kubewarden-crds kubewarden/kubewarden-crds\n$ helm install --wait -n kubewarden kubewarden-controller kubewarden/kubewarden-controller\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis will install \u003ca href=\"https://cert-manager.io\"\u003ecert-manager\u003c/a\u003e, a dependency of\nKubewarden, and then install the \u003ccode\u003ekubewarden-crds\u003c/code\u003e and \u003ccode\u003ekubewarden-controller\u003c/code\u003e\nHelm charts in the default configuration (which includes self-signed TLS certs).\nShortly after, you will have the Kubewarden Controller running and one\nPolicyServer, named \u003ccode\u003edefault\u003c/code\u003e, on the \u003ccode\u003ekubewarden\u003c/code\u003e namespace:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl get policyservers\nNAME      AGE\ndefault   38s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe default configuration values should be good enough for the majority of\ndeployments (all options are documented \u003ca href=\"https://charts.kubewarden.io/#configuration\"\u003ehere\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eNow, you can use Kubewarden, with Go, Rust, Swift, Open Policy Agent and\nGatekeeper policies, as you are used to.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s deploy our own policy-server named \u003ccode\u003emy-policy-server\u003c/code\u003e, and a Kubewarden\nPolicy based on the\n\u003ca href=\"https://github.com/kubewarden/pod-privileged-policy\"\u003epod-privileged\u003c/a\u003e policy, to\nbe scheduled in that specific policy-server:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl apply -f - \u0026lt;\u0026lt;EOF\n---\napiVersion: policies.kubewarden.io/v1alpha2\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: privileged-pods\nspec:\n  policyServer: my-policy-server\n  module: registry://ghcr.io/kubewarden/policies/pod-privileged:v0.1.9\n  rules:\n    - apiGroups: [\u0026#34;\u0026#34;]\n      apiVersions: [\u0026#34;v1\u0026#34;]\n      resources: [\u0026#34;pods\u0026#34;]\n      operations:\n        - CREATE\n        - UPDATE\n  mutating: false\n---\napiVersion: policies.kubewarden.io/v1alpha2\nkind: PolicyServer\nmetadata:\n  name: my-policy-server\nspec:\n  image: ghcr.io/kubewarden/policy-server:v0.1.10\n  replicas: 1\n  serviceAccountName: policy-server\nEOF\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote for Windows (\u003ca href=\"https://rancherdesktop.io\"\u003eRancher Desktop\u003c/a\u003e) users:\u003c/p\u003e\n\u003cp\u003eThe above uses Linux shell syntax and won\u0026rsquo;t work on Windows PowerShell\nor \u003ca href=\"https://github.com/Microsoft/Terminal\"\u003eWindows Terminal\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou can use this command instead:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f https://www.kubewarden.io/blog/2021/10/new-architecture/deploy-pod-privileged.yaml\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl get policyservers\nNAME               AGE\ndefault            1m12s\nmy-policy-server   29s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhile the new Deployment for the new PolicyServer is still being deployed, the\npolicy will be marked as \u003ccode\u003eunschedulable\u003c/code\u003e, and move to \u003ccode\u003epending\u003c/code\u003e once we are\nwaiting for the PolicyServer to accept connections:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl get clusteradmissionpolicies\nNAME              POLICY SERVER      MUTATING   STATUS\nprivileged-pods   my-policy-server   false      pending\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe can wait some seconds for the policy server to be up, and the policy to be active:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl wait --for=condition=PolicyActive clusteradmissionpolicy/privileged-pods\nclusteradmissionpolicy.policies.kubewarden.io/privileged-pods condition met\n\n$ kubectl get clusteradmissionpolicies\nNAME              POLICY SERVER      MUTATING   STATUS\nprivileged-pods   my-policy-server   false      active\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow if we try to create a Pod with at least one privileged container, it will\nnot be allowed:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl apply -f - \u0026lt;\u0026lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: privileged-pod\nspec:\n  containers:\n    - name: nginx\n      image: nginx:latest\n      securityContext:\n          privileged: true\nEOF\n\nError from server: error when creating \u0026#34;STDIN\u0026#34;: admission webhook \u0026#34;privileged-pods.kubewarden.admission\u0026#34; denied the request: User \u0026#39;youruser:yourrole\u0026#39; cannot schedule privileged containers\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHere the same command for Windows (Rancher Desktop):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f https://www.kubewarden.io/blog/2021/10/new-architecture/create-privileged-pod.yaml\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch1 id=\"foreword\"\u003eForeword\u003c/h1\u003e\n\u003cp\u003eThe new Kubewarden stack, with the new cluster-wide PolicyServer resource,\nallows fine-tuning of policies, and at the same time makes the life of\nadministrators easier with CR validations, workflow simplifications, and\nseparation of concerns.\u003c/p\u003e\n\u003cp\u003eWe hope you enjoy Kubewarden. We have many ideas about how to expand and improve\nthe project, and we would like to hear what you would like to see in the\nfuture: don\u0026rsquo;t hesitate to open an issue in any of the\n\u003ca href=\"https://github.com/kubewarden\"\u003egithub.com/kubewarden\u003c/a\u003e projects or get in\ncontact in the \u003ca href=\"https://kubernetes.slack.com/archives/C01T3GTC3L7\"\u003e#kubewarden Slack channel\u003c/a\u003e!\u003c/p\u003e\n\u003cp\u003eStay tuned for more!\u003c/p\u003e\n","date":1633046400,"description":"","dir":"blog/2021/10/new-architecture/","expirydate":-62135596800,"fuzzywordcount":1300,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"818e764ce6525954f70e847ac1cbe1fc","permalink":"/blog/2021/10/new-architecture/new-architecture-to-ease-kubewarden-administrators-lives/","postref":"818e764ce6525954f70e847ac1cbe1fc","publishdate":"2021-10-01T00:00:00Z","readingtime":6,"relpermalink":"/blog/2021/10/new-architecture/new-architecture-to-ease-kubewarden-administrators-lives/","section":"blog","summary":"We are pleased to announce a new architecture for the Kubewarden stack, in line with its journey to maturity:\nThe introduction of a PolicyServer Custom Resource Definition (CRD) which allows users to describe a policy-server Deployment, together with binding ClusterAdmissionPolicies to a specific PolicyServer instance.\nThese 2 changes are accompanied by a multitude of improvements to make Kubewarden more comfortable for Kubernetes Administrators, such as validation for Kuberwarden Custom Resources, improvements in Helm Charts, Status and Conditions for ClusterAdmissionPolicies.","tags":null,"title":"A new architecture to ease Kubewarden administrators' lives","type":"blog","url":null,"weight":0,"wordcount":1233},{"authors":["Flavio Castelli","Rafael FernÃ¡ndez LÃ³pez"],"categories":null,"content":"\u003cp\u003eKubewarden is a policy framework for Kubernetes. It can be used to\nsecure your clusters and to ensure they stay compliant with the\nrules your organization establishes over time.\u003c/p\u003e\n\u003cp\u003eBy leveraging the power of WebAssembly, Kubewarden allows policy authors\nto write policies using traditional programming languages such as Rust, Go,\nAssemblyScript and Swift.\u003c/p\u003e\n\u003cp\u003eKubewarden policies, once compiled into WebAssembly modules, are then\ndistributed using regular OCI registries. This allows Operators to have a\nconsistent way to securely distribute both container images and policies.\u003c/p\u003e\n\u003cp\u003eKubewarden is one of the Open Source projects working to provide a\nPolicy As Code solution to Kubernetes. Historically, the first project in\nthis space has been \u003ca href=\"https://openpolicyagent.org/\"\u003eOpen Policy Agent\u003c/a\u003e, also known\nas \u0026ldquo;OPA\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eOpen Policy Agent policies are written using a purpose-built query language\ncalled \u003ca href=\"https://www.openpolicyagent.org/docs/latest/policy-language/\"\u003eRego\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe don\u0026rsquo;t think there\u0026rsquo;s a right or wrong approach when it comes to writing\npolicies. Both programming languages (Rust and Go) and query languages (Rego)\nhave advantages and disadvantages.\nWe strongly believe policy authors should have the freedom to pick the tool that\nbest suits their needs.\u003c/p\u003e\n\u003cp\u003eAt the same time, we realize that this flexibility can significantly complicate\nthe lives of Operation teams. Simplicity is paramount when operating Kubernetes;\nhaving different ways to distribute and enforce policies potentially\novercomplicates things.\u003c/p\u003e\n\u003cp\u003eThe Kubewarden team wants to further expand the freedom of policy authors without\ncompromising the operation experience we currently provide.\u003c/p\u003e\n\u003cp\u003eWe want to provide a cohesive way to distribute policies, a uniform\nway to enforce them and a single platform to host them, regardless of\nthe language used to write those individual policies.\u003c/p\u003e\n\u003cp\u003eWe want to provide a \u003cstrong\u003eUniversal Policy Platform\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"webassembly-to-the-rescue\"\u003eWebAssembly to the Rescue\u003c/h2\u003e\n\u003cp\u003eRego is a query language created by the Open Policy Agent project. The language\nis inspired by \u003ca href=\"https://en.wikipedia.org/wiki/Datalog\"\u003eDatalog\u003c/a\u003e; its\nmain purpose is to perform queries on some JSON input data and provide some\noutput as the response.\u003c/p\u003e\n\u003cp\u003eThe good news is that Rego programs can be built into WebAssembly modules using\nthe official \u003ccode\u003eopa\u003c/code\u003e command line utility. This is documented in depth inside\nof the \u003ca href=\"https://www.openpolicyagent.org/docs/latest/wasm/\"\u003eofficial documentation\u003c/a\u003e\nof Open Policy Agent.\u003c/p\u003e\n\u003cp\u003eWhile building a Rego program into WebAssembly is simple, running the resulting WebAssembly\nmodule requires more effort. The good news is, we did the hard work!\u003c/p\u003e\n\u003cp\u003eWe wrote a Rust library that can be used to invoke Rego policies compiled into\nWebAssembly modules.\nThis library is called Burrego (a burrito with a Rego filling: obvious, isn\u0026rsquo;t it?! ð¯ ð¤)\nand can be found \u003ca href=\"https://github.com/kubewarden/policy-evaluator/tree/main/crates/burrego\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe Rego language provides some \u003ca href=\"https://www.openpolicyagent.org/docs/latest/policy-reference/#built-in-functions\"\u003ebuilt-in functions\u003c/a\u003e\nto help with String operations, regular expressions and many more.\nWhen building a Rego policy into a WebAssembly module, some of these built-in\nfunctions are going to be implemented inside of the Wasm file itself; while others\nhave to be provided at execution time by the WebAssembly runtime evaluating the module.\u003c/p\u003e\n\u003cp\u003eThe Burrego library implements the built-in functions that are not supported natively\nby the WebAssembly modules produced by \u003ccode\u003eopa build\u003c/code\u003e. There are still some built-ins that\nBurrego does not yet provide; however, based on the policies we have seen in the open,\nthe ones we already support should be enough for most Kubernetes users.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/kubewarden/policy-evaluator/issues/56\"\u003eThis GitHub issue\u003c/a\u003e\nkeeps track of the Rego built-ins we have still to implement. Feel free to\ncomment over there to prioritize our work.\u003c/p\u003e\n\u003ch2 id=\"one-language-two-frameworks\"\u003eOne Language, Two Frameworks\u003c/h2\u003e\n\u003cp\u003eOpen Policy Agent integrates with Kubernetes using the \u003ca href=\"https://github.com/open-policy-agent/kube-mgmt\"\u003ekube-mgmt\u003c/a\u003e\nsidecar.\nMore recently, a new Kubernetes integration gained popularity: \u003ca href=\"https://github.com/open-policy-agent/gatekeeper\"\u003eGatekeeper\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBoth OPA and Gatekeeper use Rego to write their policies. However,\nthe way input parameters and other important information are exposed to the policy\nand how the policy has to answer differs between the two.\u003c/p\u003e\n\u003cp\u003eThis leads to the unfortunate situation where a Kubernetes policy written for\nthe OPA runtime will not work as expected if enforced by Gatekeeper, and vice versa.\u003c/p\u003e\n\u003cp\u003eWe don\u0026rsquo;t like this fragmentation in the \u0026ldquo;Rego landscape\u0026rdquo;. To address this, we worked to ensure\nthat Kubewarden can execute both policies built for OPA and Gatekeeper\n\u003cstrong\u003ewithout any change needed on existing policies\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"authoring-a-rego-policy\"\u003eAuthoring a Rego Policy\u003c/h2\u003e\n\u003cp\u003eRego polices can be built into a single WebAssembly module by using the \u003ccode\u003eopa build\u003c/code\u003e\ncommand. No change is required to already existing Rego policies.\u003c/p\u003e\n\u003cp\u003eWe want these WebAssembly modules to be loaded by Kubewarden transparently,\nso the end-users of your policy will not have to deal with the subtle differences\nbetween a \u0026ldquo;Kubewarden native\u0026rdquo; policy, an OPA policy or a Gatekeeper one.\nThe WebAssembly module must be enriched with some Kubewarden-specific metadata\nto achieve this portability.\u003c/p\u003e\n\u003cp\u003eAdding metadata to a WebAssembly module produced by \u003ccode\u003eopa build\u003c/code\u003e works in the\nsame way as modules produced by Rust and Go. This is done using the\n\u003ccode\u003ekwctl annotate\u003c/code\u003e command.\u003c/p\u003e\n\u003cp\u003eFinally, the annotated file can be pushed to an OCI registry with the usual\n\u003ccode\u003ekwctl push\u003c/code\u003e command.\u003c/p\u003e\n\u003cp\u003ePolicy authors can also evaluate their policy locally, before pushing it, via\nthe \u003ccode\u003ekwctl run\u003c/code\u003e command.\u003c/p\u003e\n\u003cp\u003eIf you are already familiar with Kubewarden, you will notice the developer\nworkflow stays the same, regardless of the programming language used.\u003c/p\u003e\n\u003cp\u003eAll these steps are described in detail inside of our \u003ca href=\"https://docs.kubewarden.io/writing-policies/rego/intro.html\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"enforcing-a-rego-policy\"\u003eEnforcing a Rego Policy\u003c/h2\u003e\n\u003cp\u003eKubewarden policies can be enforced inside of a Kubernetes cluster by defining\na \u003ccode\u003eClusterAdmissionPolicy\u003c/code\u003e object; this is a Kubernetes Custom Resource\nprovided by the Kubewarden project.\u003c/p\u003e\n\u003cp\u003eOperators don\u0026rsquo;t have to bother whether the policy was built using one of Kubewarden\nSDKs, OPA or Gatekeeper. The way to express settings and to enforce the policy\nis always the same.\u003c/p\u003e\n\u003ch2 id=\"wrapping-up\"\u003eWrapping Up\u003c/h2\u003e\n\u003cp\u003eWe have seen what Rego is and how it relates to Open Policy Agent and\nGatekeeper. We have witnessed how combining WebAssembly with Kubewarden can smooth the\ndifferences between the two of them.\u003c/p\u003e\n\u003cp\u003eWe have also seen that the workflows of policy authors and operation teams\nare uniform, regardless of the language used to write the policy.\u003c/p\u003e\n\u003cp\u003eDeveloper freedom and operation simplicity are top values for the Kubewarden\nproject. Thanks to WebAssembly we can work towards making\nKubewarden a universal policy platform.\u003c/p\u003e\n\u003cp\u003eNow the only thing we can request is to try this out! Run your Rego\npolicies, whether Open Policy Agent or Gatekeeper targeted, and let us\nknow what you think!\u003c/p\u003e\n\u003cp\u003eAlso, remember to enjoy Rego and burritos!\u003c/p\u003e\n","date":1632182400,"description":"","dir":"blog/2021/09/","expirydate":-62135596800,"fuzzywordcount":1100,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"f25d04d64d86a1ffac89a5475714b94a","permalink":"/blog/2021/09/towards-a-universal-policy-platform/","postref":"f25d04d64d86a1ffac89a5475714b94a","publishdate":"2021-09-21T00:00:00Z","readingtime":5,"relpermalink":"/blog/2021/09/towards-a-universal-policy-platform/","section":"blog","summary":"Kubewarden is a policy framework for Kubernetes. It can be used to secure your clusters and to ensure they stay compliant with the rules your organization establishes over time.\nBy leveraging the power of WebAssembly, Kubewarden allows policy authors to write policies using traditional programming languages such as Rust, Go, AssemblyScript and Swift.\nKubewarden policies, once compiled into WebAssembly modules, are then distributed using regular OCI registries. This allows Operators to have a consistent way to securely distribute both container images and policies.","tags":null,"title":"Towards a universal policy platform","type":"blog","url":null,"weight":0,"wordcount":1026},{"authors":["Flavio Castelli"],"categories":null,"content":"\u003cp\u003eIs the title of this post a pun inspired by Christmas or by the Games of Thrones?\nI can\u0026rsquo;t decide\u0026hellip;\u003cbr\u003e\nAre my dad jokes as bad as my daughters claim? Probably\u0026hellip;\u003cbr\u003e\nIs WebAssembly spreading inside of the Cloud Native ecosystem? ð¯ I have no doubts\nabout that!\u003c/p\u003e\n\u003cp\u003eFirst of all, why am I so excited about seeing WebAssembly flourish inside\nof the Cloud Native ecosystem? Well, it\u0026rsquo;s no secret that I\u0026rsquo;m a huge fan of it.\nAfter all, WebAssembly is at the heart of Kubewarden.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWebAssembly is flexible\u003c/strong\u003e. It grants Kubewarden policy authors the freedom to\npick their favorite languages and tools to write policies.\nWebAssembly allows developers to tap into the huge ecosystem of\nprogramming languages such as Rust, Go and many others to produce portable\n\u0026ldquo;build once, run everywhere\u0026rdquo; units of code.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWebAssembly is interoperable\u003c/strong\u003e. This opens interesting scenarios to Kubewarden operators, too.\nDid you know that \u003ca href=\"https://www.openpolicyagent.org/docs/latest/policy-language/\"\u003eRego-based policies\u003c/a\u003e,\nsuch as Open Policy Agent and Gatekeeper, can be built as WebAssembly\nmodules? We are currently working on a way to run Rego-based policies on\ntop of Kubewarden. This will allow operators to have a single policy platform\nto operate. We will talk more about that in a future post \u0026ndash; stay tuned for\nupdates!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWebAssembly is secure\u003c/strong\u003e. It has been designed with a strong focus on\nsecurity since the beginning. Each WebAssembly module runs inside a\ndedicated sandbox, with no access to other WebAssembly processes or\nthe host system.\nKubewarden is a project operating in the security space, making it even more\nimportant to ensure our policies cannot be turned into an attack vector.\u003c/p\u003e\n\u003cp\u003eThankfully, WebAssembly and its runtime already do the heavy lifting for us.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eSo, I kept talking about WebAssembly and how much I love it. I gave you\nsome reasons, but I didn\u0026rsquo;t dig into the details. Luckily,\n\u003ca href=\"https://thenewstack.io/\"\u003eThe New Stack\u003c/a\u003e has recently published not one, but\n\u003cstrong\u003etwo articles\u003c/strong\u003e featuring WebAssembly.\u003cbr\u003e\nThese articles do a great job at explaining\n\u003ca href=\"https://thenewstack.io/what-is-webassembly/\"\u003ewhy everybody keeps talking about WebAssembly\u003c/a\u003e\nand \u003ca href=\"https://thenewstack.io/webassembly-aims-to-eliminate-the-file-system/\"\u003ehow WebAssembly can even change some computing assumptions\u003c/a\u003e.\u003cbr\u003e\nTake some time and give them a read. I\u0026rsquo;m sure you will find them interesting.\nPlus, cherry on top, they both feature Kubewarden ð.\u003c/p\u003e\n\u003cp\u003eBut we\u0026rsquo;re not over yet; more exciting things happened this week. The\nfollowing projects started the process to get included in the \u003ca href=\"https://www.cncf.io/sandbox-projects/\"\u003eCNCF sandbox\u003c/a\u003e:\n\u003ca href=\"https://krustlet.dev/\"\u003eKrustlet\u003c/a\u003e (see \u003ca href=\"https://github.com/cncf/toc/issues/690\"\u003ehere\u003c/a\u003e),\n\u003ca href=\"https://wasmcloud.com/\"\u003ewasmCloud\u003c/a\u003e (see \u003ca href=\"https://github.com/cncf/toc/issues/693\"\u003ehere\u003c/a\u003e)\nand\n\u003ca href=\"https://oras.land/\"\u003eORAS\u003c/a\u003e (see \u003ca href=\"https://github.com/cncf/toc/issues/692\"\u003ehere\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s take a closer look at them!\u003c/p\u003e\n\u003chr\u003e\n\u003cfigure class=\"center\"\u003e\n    \u003cimg src=\"/images/krustlet-logo.svg\"\n         alt=\"Krustlet logo\" width=\"60%\"/\u003e \n\u003c/figure\u003e\n\n\u003cp\u003e\u003ca href=\"https://krustlet.dev/\"\u003eKrustlet\u003c/a\u003e registers itself against a Kubernetes cluster\nas a Kubelet instance. However, the Krustlet Kubelet does not run regular containers;\nit instead executes WebAssembly programs.\u003c/p\u003e\n\u003cp\u003eKrustlet leverages \u003ca href=\"https://opencontainers.org/\"\u003eOCI registries\u003c/a\u003e to distribute\nthe WebAssembly modules to execute. This is the same approach Kubewarden\nadopts to distribute its policies.\u003c/p\u003e\n\u003cp\u003eAs a matter of fact, the Krustlet and Kubewarden teams are collaborating on the\n\u003ca href=\"https://crates.io/crates/oci-distribution\"\u003eoci-distribution\u003c/a\u003e crate. This is the Rust\nlibrary that Krustlet and Kubewarden use to retrieve\nWasm modules from OCI registries.\u003c/p\u003e\n\u003chr\u003e\n\u003cfigure class=\"center\"\u003e\n    \u003cimg src=\"/images/wasmcloud-logo.png\"\n         alt=\"wasmCloud logo\" width=\"60%\"/\u003e \n\u003c/figure\u003e\n\n\u003cp\u003e\u003ca href=\"https://wasmcloud.com/\"\u003ewasmCloud\u003c/a\u003e is a project with a strong focus on the\ndeveloper experience. wasmCloud provides a way to write portable code, that can be\ndeployed everywhere: from the cloud to your edge devices. As the name of the\nproject suggests, wasmCloud leverages WebAssembly too.\u003c/p\u003e\n\u003cp\u003eOnce more, as Kubewarden developers we are connected to the wasmCloud community,\ntoo. Both Kubewarden and wasmCloud are contributors to the \u003ca href=\"https://wapc.io/\"\u003ewaPC\u003c/a\u003e\nproject. This is the glue that allows our WebAssembly guest code to interact\nwith the host.\u003c/p\u003e\n\u003chr\u003e\n\u003cfigure class=\"center\"\u003e\n    \u003cimg src=\"/images/oras-logo.png\"\n         alt=\"ORAS logo\" width=\"60%\"/\u003e \n\u003c/figure\u003e\n\n\u003cp\u003eLast, but not least, let\u0026rsquo;s talk about \u003ca href=\"https://oras.land/\"\u003eORAS\u003c/a\u003e. This project\nturns \u003ca href=\"https://opencontainers.org/\"\u003eOCI container registries\u003c/a\u003e into generic\nartifact stores.\u003c/p\u003e\n\u003cp\u003eOn the surface this project doesn\u0026rsquo;t seem to be related to WebAssembly. However,\nwithout ORAS, neither Krustlet nor Kubewarden could store WebAssembly modules\ninside of OCI Container registries.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eOn behalf of the Kubewarden developers, let me congratulate all the teams\nbehind these projects. Thanks for inspiring us and paving the way for\nWebAssembly inside of CNCF!\u003c/p\u003e\n\u003cp\u003eWho knows, hopefully, Kubewarden will join your ranks one day! ð¤\u003c/p\u003e\n","date":1626393600,"description":"","dir":"blog/2021/07/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"332078ffeb6e59490e139e20acc40643","permalink":"/blog/2021/07/webassembly-is-coming-to-cloud-native/","postref":"332078ffeb6e59490e139e20acc40643","publishdate":"2021-07-16T00:00:00Z","readingtime":4,"relpermalink":"/blog/2021/07/webassembly-is-coming-to-cloud-native/","section":"blog","summary":"Is the title of this post a pun inspired by Christmas or by the Games of Thrones? I can\u0026rsquo;t decide\u0026hellip;\nAre my dad jokes as bad as my daughters claim? Probably\u0026hellip;\nIs WebAssembly spreading inside of the Cloud Native ecosystem? ð¯ I have no doubts about that!\nFirst of all, why am I so excited about seeing WebAssembly flourish inside of the Cloud Native ecosystem? Well, it\u0026rsquo;s no secret that I\u0026rsquo;m a huge fan of it.","tags":null,"title":"WebAssembly is coming to Cloud Native","type":"blog","url":null,"weight":0,"wordcount":650},{"authors":["Flavio Castelli"],"categories":null,"content":"\u003cp\u003eIn case you missed, CNCF Ambassador \u003ca href=\"https://twitter.com/SaiyamPathak\"\u003eSaiyam Pathak\u003c/a\u003e\nrecently hosted a live streaming event on \u003ca href=\"https://www.youtube.com/saiyam911\"\u003ehis YouTube channel\u003c/a\u003e about Kubewarden.\nFlavio had the pleasure to join Saiyam and give an overview of the project.\u003c/p\u003e\n\u003cp\u003eWe spoke about Kubernetes Admission Controllers, why we started the Kubewarden\nproject and how it differentiates from other existing open source projects such\nas Open Policy Agent and Kyverno.\u003c/p\u003e\n\u003cp\u003eThe talk features also a brief overview of WebAssembly, what it is and what are\nthe benefits it provides to Kubewarden.\u003c/p\u003e\n\u003cp\u003eFinally, the streaming event ends with a live demo that shows Kubewarden in\naction.\u003c/p\u003e\n\u003cp\u003eDuring the demo we also showed some experimental code we have been working on.\u003c/p\u003e\n\u003cp\u003eThis code opens a really exciting opportunity: the ability\nto execute Rego based policies, like the ones of Open Policy Agent and Gatekeeper,\non top of Kubewarden.\u003c/p\u003e\n\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/b14YkyrLFcs\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen title=\"Let\u0026#39;s Learn Kubewarden\"\u003e\u003c/iframe\u003e\n\u003c/div\u003e\n\n","date":1626134400,"description":"","dir":"blog/2021/07/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"15ab88364b9c943dfbdce8d6ea03b745","permalink":"/blog/2021/07/learn-kubewarden-streaming-event/","postref":"15ab88364b9c943dfbdce8d6ea03b745","publishdate":"2021-07-13T00:00:00Z","readingtime":1,"relpermalink":"/blog/2021/07/learn-kubewarden-streaming-event/","section":"blog","summary":"In case you missed, CNCF Ambassador Saiyam Pathak recently hosted a live streaming event on his YouTube channel about Kubewarden. Flavio had the pleasure to join Saiyam and give an overview of the project.\nWe spoke about Kubernetes Admission Controllers, why we started the Kubewarden project and how it differentiates from other existing open source projects such as Open Policy Agent and Kyverno.\nThe talk features also a brief overview of WebAssembly, what it is and what are the benefits it provides to Kubewarden.","tags":null,"title":"Let's learn Kubewarden - Streaming Event","type":"blog","url":null,"weight":0,"wordcount":139},{"authors":["Rafael FernÃ¡ndez LÃ³pez"],"categories":null,"content":"\u003cp\u003eAs you probably know, Kubernetes Pod Security Policies (PSPs) \u003ca href=\"https://github.com/kubernetes/kubernetes/blob/a3abd06ad53b2f02dcb6e060c7606ceda41f44af/CHANGELOG/CHANGELOG-1.21.md#deprecation-of-podsecuritypolicy\"\u003eare being\ndeprecated in Kubernetes\n1.21\u003c/a\u003e\n\u0026ndash; although these APIs will be served until Kubernetes 1.25 it\u0026rsquo;s a\ngood time to start thinking about what you will use to replace them.\u003c/p\u003e\n\u003cp\u003eAt Kubewarden we have an ongoing effort to replace the Pod Security\nPolicies with small, targeted Kubewarden policies.\u003c/p\u003e\n\u003cp\u003eUp until now, we have implemented some policies that replace some Pod\nSecurity Policies:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubewarden/psp-capabilities\"\u003e\u003ccode\u003epsp-capabilities\u003c/code\u003e\u003c/a\u003e:\nvalidating and mutating policy that allows you to control the usage\nof container capabilities, for example allowing you to ensure that a\ncontainer has the required capabilities it needs to work correctly,\nor that it drops capabilities it doesn\u0026rsquo;t need, reducing the attack\nsurface of your containers.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubewarden/psp-allow-privilege-escalation\"\u003e\u003ccode\u003epsp-allow-privilege-escalation\u003c/code\u003e\u003c/a\u003e:\nvalidating policy that allows you to ensure that no containers in a\ngiven pod can set \u003ccode\u003e.securityContext.allowPrivilegeEscalation: true\u003c/code\u003e\nin the security context of the container.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubewarden/psp-apparmor\"\u003e\u003ccode\u003epsp-apparmor\u003c/code\u003e\u003c/a\u003e:\nvalidating policy that allows you to specify a list of allowed\nAppArmor profiles that a \u003ccode\u003ePod\u003c/code\u003e can use.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd now, the\n\u003ca href=\"https://github.com/kubewarden/psp-host-namespaces\"\u003e\u003ccode\u003epsp-host-namespaces\u003c/code\u003e\u003c/a\u003e\npolicy joins this list. Let\u0026rsquo;s inspect it a bit further.\u003c/p\u003e\n\u003ch2 id=\"the-policy\"\u003eThe policy\u003c/h2\u003e\n\u003cp\u003eThis policy is able to control whether a \u003ccode\u003ePod\u003c/code\u003e can request certain\nhost namespaces, instead of using a dedicated namespace for that pod\n\u0026ndash; as is the regular case.\u003c/p\u003e\n\u003cp\u003eWhile using the host namespaces is something to be avoided, there are\nsituations in which a workload needs to access them. For example, a\nworkload that inspects the processes running on the host.\u003c/p\u003e\n\u003ch3 id=\"policy-settings\"\u003ePolicy settings\u003c/h3\u003e\n\u003cp\u003eThe policy allows the following settings:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eallow_host_ipc\u003c/code\u003e: allows the pod to set \u003ccode\u003e.spec.HostIPC\u003c/code\u003e to true.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eallow_host_network\u003c/code\u003e: allows the pod to set \u003ccode\u003e.spec.HostNetwork\u003c/code\u003e to true.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eallow_host_pid\u003c/code\u003e: allows the pod to set \u003ccode\u003e.spec.HostPID\u003c/code\u003e to true.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eallow_host_ports\u003c/code\u003e: is a list of port ranges of the form:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eallow_host_ports\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003emin\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003emax\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n  - \u003cspan style=\"color:#f92672\"\u003emin\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e443\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003emax\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e443\u003c/span\u003e\n  - \u003cspan style=\"color:#f92672\"\u003emin\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e8000\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003emax\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e9000\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis example would allow host ports \u003ccode\u003e80\u003c/code\u003e, \u003ccode\u003e443\u003c/code\u003e and the range\n\u003ccode\u003e8000-9000\u003c/code\u003e in the Pod \u003ccode\u003e.spec.containers[].ports[].hostPort\u003c/code\u003e attributes.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy default all settings are disallowed, so if you want to allow the\nusage of, say, the host network and the host PID namespace usage, the\npolicy would need to have the following settings:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eallow_host_network\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eallow_host_pid\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"running-the-policy\"\u003eRunning the policy\u003c/h3\u003e\n\u003cp\u003eThe policy validates Pods at creation time.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s run a couple of tests with \u003ca href=\"https://github.com/kubewarden/kwctl/\"\u003eour CLI tool,\n\u003ccode\u003ekwctl\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou will need at least \u003ccode\u003ekwctl\u003c/code\u003e version 0.1.7 to execute this examples.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s start by evaluating a Pod creation request which has host PID\nenabled:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ curl https://raw.githubusercontent.com/kubewarden/psp-host-namespaces/v0.0.7/test_data/pod_host_pid_enabled.json 2\u0026gt; /dev/null | \\\n    kwctl run -r - registry://ghcr.io/kubewarden/policies/psp-host-namespaces:v0.0.7 | jq\n{\n  \u0026#34;uid\u0026#34;: \u0026#34;1299d386-525b-4032-98ae-1949f69f9cfc\u0026#34;,\n  \u0026#34;allowed\u0026#34;: false,\n  \u0026#34;status\u0026#34;: {\n    \u0026#34;message\u0026#34;: \u0026#34;Pod has host PID enabled, but this is not allowed\u0026#34;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAs you can see, the request is rejected and a proper explanation is\nreturned to the user.\u003c/p\u003e\n\u003cp\u003eIn the previous run no settings were provided to the policy, so the\ndefault settings defined by the policy were used. Settings can also be\nprovided as an empty string or an empty object. It\u0026rsquo;s always up to the\npolicy to do settings defaulting, if any.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ curl https://raw.githubusercontent.com/kubewarden/psp-host-namespaces/v0.0.7/test_data/pod_host_pid_enabled.json 2\u0026gt; /dev/null | \\\n    kwctl run --settings-json \u0026#39;{}\u0026#39; -r - registry://ghcr.io/kubewarden/policies/psp-host-namespaces:v0.0.7 | jq\n{\n  \u0026#34;uid\u0026#34;: \u0026#34;1299d386-525b-4032-98ae-1949f69f9cfc\u0026#34;,\n  \u0026#34;allowed\u0026#34;: false,\n  \u0026#34;status\u0026#34;: {\n    \u0026#34;message\u0026#34;: \u0026#34;Pod has host PID enabled, but this is not allowed\u0026#34;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe pod was rejected again, as this execution is equivalent to the\nprevious one, as their settings are defaulted by the policy to the\nsame ones.\u003c/p\u003e\n\u003cp\u003eNow, let\u0026rsquo;s enable the PID namespace host in the policy settings:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ curl https://raw.githubusercontent.com/kubewarden/psp-host-namespaces/v0.0.7/test_data/pod_host_pid_enabled.json 2\u0026gt; /dev/null | \\\n    kwctl run --settings-json \u0026#39;{ \u0026#34;allow_host_pid\u0026#34;: true }\u0026#39; -r - registry://ghcr.io/kubewarden/policies/psp-host-namespaces:v0.0.7 | jq\n{\n  \u0026#34;uid\u0026#34;: \u0026#34;1299d386-525b-4032-98ae-1949f69f9cfc\u0026#34;,\n  \u0026#34;allowed\u0026#34;: true\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd that works as expected!\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eStay tuned, because during the following weeks we will implement the\n\u003ca href=\"https://github.com/kubewarden/policy-hub/issues/32\"\u003erest of the Pod Security Policies in separate, small Kubewarden\npolicies\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou can use \u003ca href=\"https://github.com/kubewarden/?q=psp\u0026amp;type=\u0026amp;language=\u0026amp;sort=\"\u003ethis GitHub\nsearch\u003c/a\u003e to\nfind out what Kubewarden policies are implementing Pod Security\nPolicies.\u003c/p\u003e\n\u003cp\u003eYou can also discover more policies in the \u003ca href=\"https://hub.kubewarden.io/\"\u003ePolicy\nHub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou can read more about \u003ca href=\"https://docs.kubewarden.io/\"\u003ehow to run this policies in a Kubernetes\ncluster by reading our documentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAs always, thank you for reading!\u003c/p\u003e\n","date":1623369600,"description":"","dir":"blog/2021/06/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"6826de6b0b584da07dec1ddb8419d6c1","permalink":"/blog/2021/06/introducing-the-psp-host-namespaces-policy/","postref":"6826de6b0b584da07dec1ddb8419d6c1","publishdate":"2021-06-11T00:00:00Z","readingtime":4,"relpermalink":"/blog/2021/06/introducing-the-psp-host-namespaces-policy/","section":"blog","summary":"As you probably know, Kubernetes Pod Security Policies (PSPs) are being deprecated in Kubernetes 1.21 \u0026ndash; although these APIs will be served until Kubernetes 1.25 it\u0026rsquo;s a good time to start thinking about what you will use to replace them.\nAt Kubewarden we have an ongoing effort to replace the Pod Security Policies with small, targeted Kubewarden policies.\nUp until now, we have implemented some policies that replace some Pod Security Policies:","tags":null,"title":"Introducing the PSP host namespaces policy","type":"blog","url":null,"weight":0,"wordcount":679},{"authors":["Flavio Castelli"],"categories":null,"content":"\u003cp\u003eWe are pleased to announce the availability of a new tool within the Kubewarden\nproject: \u003ca href=\"https://github.com/kubewarden/kwctl\"\u003ekwctl\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003ekwctl is a command line utility designed to help both policy authors\nand Kubernetes administrators.\u003c/p\u003e\n\u003cp\u003eThis blog post focuses on the user experience of Kubernetes administrators.\nFuture ones will cover the policy developer side of the story.\u003c/p\u003e\n\u003ch2 id=\"a-real-world-example-controlling-container-capabilities\"\u003eA Real-World Example: Controlling Container Capabilities\u003c/h2\u003e\n\u003cp\u003eThe main character of today\u0026rsquo;s story is Alice. Alice is a Kubernetes\nadministrator who wants to keep her Kubernetes cluster secure.\u003c/p\u003e\n\u003cp\u003eAlice uses many solutions to accomplish that, including\n\u003ca href=\"https://kubernetes.io/docs/concepts/policy/pod-security-policy/\"\u003eKubernetes PSP\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003ePod Security Policies are currently deprecated and are going to be removed from Kubernetes 1.25.\nDue to that, Alice wants to find an alternative to Kubernetes PSPs.\u003c/p\u003e\n\u003cp\u003eToday Alice will work to replace the \u003ca href=\"https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container\"\u003econtainer capabilities PSP\u003c/a\u003e\nwith a Kubewarden policy.\u003c/p\u003e\n\u003cp\u003eWe will tag along with Alice, watch all the steps she has to perform\nand learn how \u003ccode\u003ekwctl\u003c/code\u003e will help her.\u003c/p\u003e\n\u003ch2 id=\"finding-the-right-policy\"\u003eFinding the Right Policy\u003c/h2\u003e\n\u003cp\u003eAs a first step, Alice visits \u003ca href=\"https://hub.kubewarden.io\"\u003eKubewardenâs Policy Hub\u003c/a\u003e,\nthe place where Kubewarden policies can be made discoverable.\u003c/p\u003e\n\u003cp\u003eAlice enters the \u003cem\u003e\u0026ldquo;capabilities\u0026rdquo;\u003c/em\u003e query and finds a policy that seems to be\ndoing exactly what she\u0026rsquo;s looking for. The name of the policy is\n\u003cem\u003e\u0026ldquo;psp-capabilities\u0026rdquo;\u003c/em\u003e.\u003c/p\u003e\n\u003ch2 id=\"obtaining-the-policy\"\u003eObtaining the Policy\u003c/h2\u003e\n\u003cp\u003eNext Alice has to obtain the policy. This can be done with a\nsimple command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl pull registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis downloads the policy and stores it under Alice\u0026rsquo;s home directory.\u003c/p\u003e\n\u003ch2 id=\"understanding-how-the-policy-works\"\u003eUnderstanding How the Policy Works\u003c/h2\u003e\n\u003cp\u003eAlice now needs to understand how to use the policy. Each policy listed on\nKubewarden\u0026rsquo;s Policy Hub has links pointing to their documentation.\u003c/p\u003e\n\u003cp\u003eInstead of opening one of these links, Alice prefers to consult the\nmetadata provided by the policy:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl inspect registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis command produces the following output:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2021-june-kwctl-intro-admin-inspect-output.png\" alt=\"Output of kwctl inspect\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote well:\u003c/strong\u003e a Kubewarden policy is a regular \u0026ldquo;\u003ccode\u003e.wasm\u003c/code\u003e\u0026rdquo; file that, in addition\nto contain the policy\u0026rsquo;s bytecode, it also embeds additional metadata.\u003c/p\u003e\n\u003cp\u003eThis allows to have everything in a \u003cstrong\u003esingle place\u003c/strong\u003e, \u003cstrong\u003eversioned together\u003c/strong\u003e and\n\u003cstrong\u003eavailable off-line\u003c/strong\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"evaluating-the-policy\"\u003eEvaluating the Policy\u003c/h2\u003e\n\u003cp\u003eNow Alice wants to assess the reliability of the policy, plus find the right\nconfiguration values to satisfy her requirements.\u003c/p\u003e\n\u003cp\u003eThere are some good news for Alice: she doesn\u0026rsquo;t need to deploy the policy into\na Kubernetes cluster to perform this kind of rapid iterations. Once again, kwctl\ncan help her with the \u003ccode\u003erun\u003c/code\u003e subcommand.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ekwctl run\u003c/code\u003e command takes the following parameters:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;request-path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: path to a file containing the Kubernetes Admission Request\nto be evaluated\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--settings-json \u0026quot;\u0026lt;JSON document\u0026gt;\u0026quot;\u003c/code\u003e\u003c/strong\u003e: a string containing the JSON\nrepresentation of policy\u0026rsquo;s settings. It\u0026rsquo;s also possible to use the\n\u0026ldquo;\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;settings-path\u0026gt;\u003c/code\u003e\u003c/strong\u003e\u0026rdquo; flag to read the policy settings from a local file\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u0026lt;URI of the policy\u0026gt;\u003c/code\u003e\u003c/strong\u003e: the URI pointing to the policy to be used\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote well:\u003c/strong\u003e unfortunately, obtaining Kubernetes Admission Requests\nrequires some extra work. This is a \u0026ldquo;Kubernetes problem\u0026rdquo;, we plan to\naddress it in the near future.\u003c/p\u003e\n\u003cp\u003eIn the meantime, we will assume Alice has access to files like\n\u003ca href=\"https://github.com/kubewarden/psp-capabilities/tree/a786aba746e807aa3c6121438e8c05e724400861/test_data\"\u003ethese ones\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAlice will use \u003ca href=\"https://raw.githubusercontent.com/kubewarden/psp-capabilities/a786aba746e807aa3c6121438e8c05e724400861/test_data/req_pod_with_container_with_capabilities_added.json\"\u003ethis request\u003c/a\u003e;\nthat attempts to create a Pod with a container that has the\nfollowing \u003ccode\u003esecurityContext\u003c/code\u003e configuration:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdd the \u003ccode\u003eNET_ADMIN\u003c/code\u003e and the \u003ccode\u003eSYS_TIME\u003c/code\u003e capabilities\u003c/li\u003e\n\u003cli\u003eDrop the \u003ccode\u003eSYS_PTRACE\u003c/code\u003e capability\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAs a first step, Alice defines a policy that allows containers to add only the \u003ccode\u003eSYS_TIME\u003c/code\u003e capability:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl run registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4 \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e            -r req_pod_with_container_with_capabilities_added.json \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e            --settings-json \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;allowed_capabilities\u0026#34;: [\u0026#34;SYS_TIME\u0026#34;]}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe output of the command, piped into \u003ca href=\"https://stedolan.github.io/jq/\"\u003e\u003ccode\u003ejq\u003c/code\u003e\u003c/a\u003e, is the following one:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e{ \n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;uid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1299d386-525b-4032-98ae-1949f69f9cfc\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;allowed\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e,\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e: {\n    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;message\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PSP capabilities policies doesn\u0026#39;t allow these capabilities to be added: {\\\u0026#34;NET_ADMIN\\\u0026#34;}\u0026#34;\u003c/span\u003e \n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is the behavior expected by Alice: the request is rejected because the\n\u003ccode\u003eNET_ADMIN\u003c/code\u003e capability is not part of the allow list.\u003c/p\u003e\n\u003cp\u003eThis policy is capable of mutating incoming requests, Alice wants to try it\nout using the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl run registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4 \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        -r req_pod_with_container_with_capabilities_added.json \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        --settings-json \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;default_add_capabilities\u0026#34;: [\u0026#34;AUDIT_READ\u0026#34;]}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe command will fail with the following output:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;valid\u0026#34;\u003c/span\u003e:false,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;message\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;These capabilities cannot be added by default because they are not allowed: {\\\u0026#34;AUDIT_READ\\\u0026#34;}\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\nError: Provided settings are not valid: Some\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;These capabilities cannot be added by default because they are not allowed: {\\\u0026#34;AUDIT_READ\\\u0026#34;}\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNice, the author of the policy implemented some validation of the settings\nprovided by the end users!\nThe error message points Alice in the right direction: the \u003ccode\u003eAUDIT_READ\u003c/code\u003e capability\ncannot be added to all the containers unless it\u0026rsquo;s also on the list of the\nallowed capabilities.\u003c/p\u003e\n\u003cp\u003eAlice runs the policy again, this time with a different configuration:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl run registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4 \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e      -r req_pod_with_container_with_capabilities_added.json \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e      --settings-json \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;default_add_capabilities\u0026#34;: [\u0026#34;AUDIT_READ\u0026#34;], \u0026#34;allowed_capabilities\u0026#34;: [\u0026#34;AUDIT_READ\u0026#34;]}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis time the configuration is correct, but the request is rejected with\nthe following explanation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e{\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;uid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1299d386-525b-4032-98ae-1949f69f9cfc\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;allowed\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e,\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e: {\n    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;message\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PSP capabilities policies doesn\u0026#39;t allow these capabilities to be added: {\\\u0026#34;NET_ADMIN\\\u0026#34;, \\\u0026#34;SYS_TIME\\\u0026#34;}\u0026#34;\u003c/span\u003e\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat\u0026rsquo;s actually a correct behavior, Alice forgot to allow the capabilities\nthe container is already adding to itself.\u003c/p\u003e\n\u003cp\u003eAlice now runs the kwctl command one last time:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl run registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4 \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        -r req_pod_with_container_with_capabilities_added.json \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        --settings-json \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;default_add_capabilities\u0026#34;: [\u0026#34;AUDIT_READ\u0026#34;], \u0026#34;allowed_capabilities\u0026#34;: [\u0026#34;AUDIT_READ\u0026#34;, \u0026#34;NET_ADMIN\u0026#34;, \u0026#34;SYS_TIME\u0026#34;]}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis time the policy accepts the incoming request, plus it mutates it.\nThis is the output returned:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e{\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;uid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1299d386-525b-4032-98ae-1949f69f9cfc\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;allowed\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e,\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;patchType\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;JSONPatch\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;patch\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;W3sib3AiOiJhZGQiLCJwYXRoIjoiL3NwZWMvY29udGFpbmVycy8wL3NlY3VyaXR5Q29udGV4dC9jYXBhYmlsaXRpZXMvYWRkLzIiLCJ2YWx1ZSI6IkFVRElUX1JFQUQifV0=\u0026#34;\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAlice can see what the policy is going to change by looking at the contents of\nthe \u003ccode\u003epatch\u003c/code\u003e attribute.\nAs requested by Kubernetes, the patch operation is encoded using \u003ccode\u003ebase64\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl run registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4 \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        -r req_pod_with_container_with_capabilities_added.json \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        --settings-json \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;default_add_capabilities\u0026#34;: [\u0026#34;AUDIT_READ\u0026#34;], \u0026#34;allowed_capabilities\u0026#34;: [\u0026#34;AUDIT_READ\u0026#34;, \u0026#34;NET_ADMIN\u0026#34;, \u0026#34;SYS_TIME\u0026#34;]}\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  | jq -r .patch | base64 -d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis produces the following output:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e[{\u003cspan style=\"color:#f92672\"\u003e\u0026#34;op\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;add\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026#34;path\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/spec/containers/0/securityContext/capabilities/add/2\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AUDIT_READ\u0026#34;\u003c/span\u003e}]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis \u003ca href=\"https://en.wikipedia.org/wiki/JSON_Patch\"\u003eJSONPatch\u003c/a\u003e document is composed\nby the following parts:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eop\u003c/code\u003e\u003c/strong\u003e: this defines the operation to perform against the original request\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003evalue\u003c/code\u003e\u003c/strong\u003e: the string to be added to the original request\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003epath\u003c/code\u003e\u003c/strong\u003e: the JSON Pointer that defines which part of the original request\nis going to be changed\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHence, this JSONPatch adds \u0026ldquo;AUDIT_READ\u0026rdquo; to the original Pod object, at\n\u003ccode\u003e/spec/containers/0/securityContext/capabilities/add/2\u003c/code\u003e location.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s take a closer look at the JSON Pointer:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e/spec/containers\u003c/code\u003e\u003c/strong\u003e: this references the \u003ccode\u003econtainers\u003c/code\u003e section of the Pod \u003ccode\u003espec\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e/0\u003c/code\u003e\u003c/strong\u003e: since \u003ccode\u003espec.containers\u003c/code\u003e is an array, this fragment of\nthe path points to the first element of it. Note well, arrays elements\nare referenced using \u003ca href=\"https://en.wikipedia.org/wiki/Zero-based_numbering\"\u003ezero-based numbering\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e/securityContext/capabilities/add\u003c/code\u003e\u003c/strong\u003e: this navigates into the \u003ccode\u003esecurityContext\u003c/code\u003e\nof the container, then into the \u003ccode\u003ecapabilities\u003c/code\u003e object and finally into the\n\u003ccode\u003eadd\u003c/code\u003e section. This is the place where container capabilities to be added\nare specified\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e/2\u003c/code\u003e\u003c/strong\u003e: the original container has already two capabilities to be added,\n\u003ccode\u003eNET_ADMIN\u003c/code\u003e and \u003ccode\u003eSYS_TIME\u003c/code\u003e. Using zero-based numbering, \u003ccode\u003e/2\u003c/code\u003e points to\nthe third entry of the array.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe policy is working as expected; it leads to the creation of a Pod with\na container that has the \u003ccode\u003eNET_ADMIN\u003c/code\u003e, \u003ccode\u003eSYS_TIME\u003c/code\u003e, \u003ccode\u003eAUDIT_READ\u003c/code\u003e capabilities\nadded.\u003c/p\u003e\n\u003ch2 id=\"deploying-the-policy\"\u003eDeploying the Policy\u003c/h2\u003e\n\u003cp\u003eAfter more experiments with \u003ccode\u003ekwctl run\u003c/code\u003e, Alice wants to deploy the policy\ninside of a Kubernetes cluster.\u003c/p\u003e\n\u003cp\u003eKubewarden policies are defined using the\n\u003ca href=\"https://github.com/kubewarden/kubewarden-controller/blob/a74144e2c2f69dd96a7317feb44719a03677a885/docs/crds/README.asciidoc\"\u003eClusterAdmissionPolicy\u003c/a\u003e,\na Custom Resource provided by Kubewarden.\u003c/p\u003e\n\u003cp\u003eAlice can quickly scaffold the YAML file defining this resource using kwctl:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl manifest -t ClusterAdmissionPolicy registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe command will produce the following output:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epolicies.kubewarden.io/v1alpha2\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eClusterAdmissionPolicy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egenerated-policy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003emodule\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003esettings\u003c/span\u003e: {}\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003eapiGroups\u003c/span\u003e:\n        - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eapiVersions\u003c/span\u003e:\n        - \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e:\n        - \u003cspan style=\"color:#ae81ff\"\u003epods\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eoperations\u003c/span\u003e:\n        - \u003cspan style=\"color:#ae81ff\"\u003eCREATE\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003emutating\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ekwctl just saved quite some time for Alice ð\u003c/p\u003e\n\u003ch2 id=\"mirroring-policies\"\u003eMirroring Policies\u003c/h2\u003e\n\u003cp\u003eKubewarden policies are distributed via OCI container registries, the very\nsame pieces of infrastructure already used to distribute container images.\u003c/p\u003e\n\u003cp\u003eAlice doesn\u0026rsquo;t want her cluster to pull the Kubewarden policy straight from\n\u003ccode\u003eghcr.io/kubewarden/policies/psp-capabilities:v0.1.4\u003c/code\u003e, she rather prefers to\nfetch it from a local registry she controls.\u003c/p\u003e\n\u003cp\u003eThis can be done using the following commands:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl push -p registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4\n                registry.alice.corp.lan/policies/psp-capabilities:v0.1.4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAlice can now use the \u003ccode\u003eregistry.alice.corp.lan/policies/psp-capabilities:v0.1.4\u003c/code\u003e\nurl inside of the \u003ccode\u003eClusterAdmissionPolicy\u003c/code\u003e definition.\u003c/p\u003e\n\u003cp\u003eThe policy can now be enforced inside of the local Kubernetes cluster with\na \u003ccode\u003ekubectl apply\u003c/code\u003e command ð\u003c/p\u003e\n\u003ch2 id=\"recap\"\u003eRecap\u003c/h2\u003e\n\u003cp\u003ekwctl allows us to download, test and deploy Kubewarden policies. The UX of kwctl\nmimics the one of docker, hence cloud native users should quickly feel at home\nwith it.\u003c/p\u003e\n\u003cp\u003eWe hope kwctl will be able to simplify the process of interacting with\nKubewarden policies.\nWe have many ideas about how to further expand its capabilities, but we would\nlove to hear what you would like to see addressed or changed.\u003c/p\u003e\n\u003cp\u003eWhat are you waiting for? Do like Alice and \u003ca href=\"https://github.com/kubewarden/kwctl/releases\"\u003egive kwctl a spin\u003c/a\u003e!\u003c/p\u003e\n","date":1623196800,"description":"","dir":"blog/2021/06/","expirydate":-62135596800,"fuzzywordcount":1400,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"5d38e02450bb6df72f859c1d9e86b929","permalink":"/blog/2021/06/kwctl-intro-for-kubernetes-administrators/","postref":"5d38e02450bb6df72f859c1d9e86b929","publishdate":"2021-06-09T00:00:00Z","readingtime":7,"relpermalink":"/blog/2021/06/kwctl-intro-for-kubernetes-administrators/","section":"blog","summary":"We are pleased to announce the availability of a new tool within the Kubewarden project: kwctl.\nkwctl is a command line utility designed to help both policy authors and Kubernetes administrators.\nThis blog post focuses on the user experience of Kubernetes administrators. Future ones will cover the policy developer side of the story.\nA Real-World Example: Controlling Container Capabilities The main character of today\u0026rsquo;s story is Alice. Alice is a Kubernetes administrator who wants to keep her Kubernetes cluster secure.","tags":null,"title":"Introducing kwctl to Kubernetes Administrators","type":"blog","url":null,"weight":0,"wordcount":1365},{"authors":["Rafael FernÃ¡ndez LÃ³pez"],"categories":null,"content":"\u003cp\u003eKubewarden is a project focused on security and compliance. Its main\ngoal is to allow you to write, test, distribute and run policies using\nthe tooling that you already know and master, with a focus on\ncontrolling Kubernetes inner behaviors.\u003c/p\u003e\n\u003cp\u003ePolicies are written in one of the supported languages, and the target\nobject is a WebAssembly binary artifact. This is how Kubewarden can\nensure that no matter where you built the policy, it can run on all\nplatforms without any kind of adaptation.\u003c/p\u003e\n\u003cp\u003eKubewarden supports both validating and mutating Kubernetes\nwebhooks. We have published Kubewarden SDKs for different\nlanguages. These allow you to implement your policies and reuse some\ncommon bits and pieces in an idiomatic way.\u003c/p\u003e\n\u003cp\u003eA policy can be deployed multiple times in the same cluster. This is\nso because policies are regular programs, and an important optional\nbit of the input we provide the policy is the configuration of the\npolicy itself. This is how you can have a generic policy that depends\non some configuration provided to it, and thus, behaves in a different\nway depending on the instance.\u003c/p\u003e\n\u003cp\u003eWhether you are developing your own internal policy, for the\ncommunity, or are looking to try some policies you found in the wild\nin our \u003ca href=\"https://hub.kubewarden.io\"\u003ePolicy Hub\u003c/a\u003e, chances are that you\nwant to check if the policy behaves as you expect \u0026ndash; leaving aside the\nfact that you might want to audit it; we will cover it in a future\nblog post. \u0026ndash;\u003c/p\u003e\n\u003cp\u003eEnough of an introduction. Let\u0026rsquo;s get our feet wet!\u003c/p\u003e\n\u003ch2 id=\"the-policy-idea\"\u003eThe policy idea\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s write a simple policy that has to do with internal company\ncompliance. Let\u0026rsquo;s say that in your organization, all teams have an\nidentifier, and that all the namespaces in your cluster must meet the\nfollowing requirements:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eName is prefixed with the team identifier owning the namespace\n\u003cul\u003e\n\u003cli\u003eDue to internal company compliance, all team identifiers follow\nthe pattern \u003ccode\u003et-\\w+-\\w+\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe following annotation keys are required. The annotation names are\nalso part of the compliance rules and agreed upon within the\ncompany:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecompliance.my-company.com/team-contact-email\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eMust be a syntactically valid email ending with our company\ndomain.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecompliance.my-company.com/team-region\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eAllowed values: \u003ccode\u003eAMER\u003c/code\u003e (North, Central and South America),\n\u003ccode\u003eAPAC\u003c/code\u003e (Asia-Pacific), \u003ccode\u003eEMEA\u003c/code\u003e (Europe, Middle-East and\nAfrica).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe policy won\u0026rsquo;t allow the creation of new namespaces that don\u0026rsquo;t\nfollow any of this rules.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s it for now. I am sure you already have in mind several ways to\nenrichen, improve and secure this simple policy.\u003c/p\u003e\n\u003ch2 id=\"the-language\"\u003eThe language\u003c/h2\u003e\n\u003cp\u003eAt the time of writing we have SDKs for the following languages:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubewarden/policy-sdk-rust\"\u003eRust\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubewarden/policy-sdk-swift\"\u003eSwift\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubewarden/policy-sdk-go\"\u003eTinyGo\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis list is not static and more will be implemented over time. If you\nwant to know more about the SDKs and the languages we support and why,\nyou can \u003ca href=\"https://docs.kubewarden.io/writing-policies/index.html#programming-language-requirements\"\u003eextend the read through the Kubewarden\nbook\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe are going to write our policy in Go, thus, we will use the TinyGo\ncompiler.\u003c/p\u003e\n\u003cp\u003eIn general, starting a new policy is a matter of using the policy\ntemplate we have on GitHub, except for Rust, that has a dedicated\ntool. You can find more information \u003ca href=\"https://docs.kubewarden.io/\"\u003ein the\nbook\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-policy\"\u003eThe policy\u003c/h2\u003e\n\u003cp\u003eWe head to the \u003ca href=\"https://github.com/kubewarden/go-policy-template\"\u003e\u003ccode\u003ego-policy-template\u003c/code\u003e\nrepo\u003c/a\u003e and use that\ntemplate, creating a repository in one of our GitHub organizations.\u003c/p\u003e\n\u003ch3 id=\"prerequisites\"\u003ePrerequisites\u003c/h3\u003e\n\u003cp\u003eWe clone the repository we just generated from the template\nlocally. Your organization and repository name depend on what you\nchose on the GitHub web interface when using the template:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ git clone git@github.com:your-organization/your-templated-policy.git\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: you will need \u003ccode\u003edocker\u003c/code\u003e or \u003ccode\u003epodman\u003c/code\u003e installed for this\nexercise. At the time of writing, the policy template\u0026rsquo;s \u003ccode\u003eMakefile\u003c/code\u003e\ncalls to the \u003ccode\u003edocker\u003c/code\u003e CLI, so if you use \u003ccode\u003epodman\u003c/code\u003e, make sure you\nalso have a \u003ccode\u003edocker\u003c/code\u003e wrapper or symlink in your \u003ccode\u003e$PATH\u003c/code\u003e. This is so\nyou don\u0026rsquo;t have to install TinyGo yourself.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLet\u0026rsquo;s perform a sanity check by running \u003ccode\u003emake\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ rm -rf vendor\n$ make\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: we remove the \u003ccode\u003evendor\u003c/code\u003e folder so dependencies will be\nfetched on every build. This is just for the sake of ease of build\nfor the blog post: you don\u0026rsquo;t need to do \u003ccode\u003ego mod tidy\u003c/code\u003e and \u003ccode\u003ego mod vendor\u003c/code\u003e afterwards when we add more dependencies, so you don\u0026rsquo;t need\nto have any kind of Go toolchain with the right versions on your\nmachine \u0026ndash; a simple \u003ccode\u003emake\u003c/code\u003e will build it, a little bit slower than\nvendored, but still. \u0026ndash;\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWe can see that as a result of the previous command, the sample policy\nthat the template contains has been built in a file called\n\u003ccode\u003epolicy.wasm\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ file policy.wasm\npolicy.wasm: WebAssembly (wasm) binary module version 0x1 (MVP)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLooks about right! Now, let\u0026rsquo;s go ahead and write our policy!\u003c/p\u003e\n\u003ch3 id=\"policy-first-go\"\u003ePolicy first go\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s start by editing the \u003ccode\u003emain.go\u003c/code\u003e file. For the sake blog post\nbrevity, I\u0026rsquo;ll keep the code on the \u003ccode\u003emain.go\u003c/code\u003e file, so it\u0026rsquo;s\nstraightforward to follow. Also, I\u0026rsquo;ll be skipping some other best\npractices, like TDD or even having unit tests, again for the sake of\nbrevity.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\t\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/wapc/wapc-guest-tinygo\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/kubewarden/policy-sdk-go\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\t\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterFunctions\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFunctions\u003c/span\u003e{\n        \u003cspan style=\"color:#75715e\"\u003e// function that validates the k8s request\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validate\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) ([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAcceptRequest\u003c/span\u003e()\n\t\t},\n        \u003cspan style=\"color:#75715e\"\u003e// function that validates the policy settings\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validate_settings\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) ([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAcceptSettings\u003c/span\u003e()\n\t\t},\n\t})\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow we have a program, but we don\u0026rsquo;t have a way to know if it does what\nwe want. This instance is pretty trivial, right? It does nothing. It\njust accepts the request as if there was no policy at all. If policy\nghosting was a thing, this would be it.\u003c/p\u003e\n\u003cp\u003eOn the upside, though, we have a Wasm target object that we can run\neverywhere, provided we have the right Wasm engine tooling on the\nhost. How cool is that?\u003c/p\u003e\n\u003cp\u003eTake into account that despite the function is named\n\u003ccode\u003eAcceptRequest()\u003c/code\u003e, this doesn\u0026rsquo;t mean the request will be accepted, it\njust means that this policy will not reject it. Other active webhooks\nor policies could reject it though. Rejecting is final: if only one\nwebhook or policy rejects the request, it will be rejected.\u003c/p\u003e\n\u003ch2 id=\"dry-running\"\u003eDry running\u003c/h2\u003e\n\u003cp\u003eIn order to dry run our policy we will use the \u003ca href=\"https://github.com/kubewarden/kwctl\"\u003e\u003ccode\u003ekwctl\u003c/code\u003e command-line\ntool\u003c/a\u003e. You can go to the\n\u003ca href=\"https://github.com/kubewarden/kwctl/releases/\"\u003ereleases page\u003c/a\u003e, and\nfetch the latest one.\u003c/p\u003e\n\u003cp\u003eCheck that the tool is correctly installed:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kwctl --version\nkwctl 0.1.1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can inspect the \u003ccode\u003ekwctl\u003c/code\u003e commands by running \u003ccode\u003ekwctl --help\u003c/code\u003e. However, we will focus on the \u003ccode\u003erun\u003c/code\u003e command in this post.\u003c/p\u003e\n\u003cp\u003eIn order to run a policy, you need two mandatory things:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe policy to be executed (the \u003ccode\u003epolicy.wasm\u003c/code\u003e file we produced\nearlier as a first smoke test, and that we will really implement in\nthe next section of this post).\u003c/li\u003e\n\u003cli\u003eThe request to be evaluated\n\u003cul\u003e\n\u003cli\u003eThis is the \u003ca href=\"https://github.com/kubernetes/api/blob/v0.21.1/admission/v1beta1/types.go#L34-L42\"\u003eKubernetes \u003ccode\u003eAdmissionReview\u003c/code\u003e\nobject\u003c/a\u003e,\nor the \u003ca href=\"https://github.com/kubernetes/api/blob/v0.21.1/admission/v1beta1/types.go#L45-L118\"\u003e\u003ccode\u003eAdmissionRequest\u003c/code\u003e object it\ncontains\u003c/a\u003e. Any\nof those will work. It has to be provided in JSON format, that is\nhow the Kubernetes API server informs the webhook, and thus, the\npolicy.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow we need a request to be evaluated. We can retrieve this request by\nauditing the API server, but I will hand you an example, given the\ngoal of this post is not to record or audit requests :)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e{\n\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AdmissionReview\u0026#34;\u003c/span\u003e,\n\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;admission.k8s.io/v1\u0026#34;\u003c/span\u003e,\n\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;request\u0026#34;\u003c/span\u003e: {\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;uid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;150d1761-43fb-4f36-bb73-7a3888a0bca2\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Namespace\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;resource\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;resource\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;namespaces\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;requestKind\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Namespace\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;requestResource\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;resource\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;namespaces\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;test-policy-ns\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;namespace\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;test-policy-ns\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;operation\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CREATE\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;userInfo\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kubernetes-admin\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;groups\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;system:masters\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;system:authenticated\u0026#34;\u003c/span\u003e]\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;object\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Namespace\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;metadata\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;test-policy-ns\u0026#34;\u003c/span\u003e,\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;uid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2cc6b1fc-7896-4091-b9c3-e034c89c0535\u0026#34;\u003c/span\u003e,\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;creationTimestamp\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2021-05-27T15:55:39Z\u0026#34;\u003c/span\u003e,\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;managedFields\u0026#34;\u003c/span\u003e: [{\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;manager\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kubectl\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;operation\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Update\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2021-05-27T15:55:39Z\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;fieldsType\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;FieldsV1\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;fieldsV1\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;f:status\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;f:phase\u0026#34;\u003c/span\u003e: {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t},\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;spec\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;finalizers\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kubernetes\u0026#34;\u003c/span\u003e]\n\t\t\t},\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;phase\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Active\u0026#34;\u003c/span\u003e\n\t\t\t}\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;oldObject\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;dryRun\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;options\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CreateOptions\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;meta.k8s.io/v1\u0026#34;\u003c/span\u003e\n\t\t}\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI save this request as \u003ccode\u003erequest.json\u003c/code\u003e. Now, we have all the\ningredients to dry run the policy, so let\u0026rsquo;s do it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kwctl run policy.wasm --request-path request.json 2\u0026gt; /dev/null | jq\n{\n  \u0026#34;uid\u0026#34;: \u0026#34;150d1761-43fb-4f36-bb73-7a3888a0bca2\u0026#34;,\n  \u0026#34;allowed\u0026#34;: true\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAs expected, the response of the policy is that the request is\naccepted. This is a really good start! Now, let\u0026rsquo;s go and write the\nreal policy logic.\u003c/p\u003e\n\u003ch2 id=\"policy-implementation\"\u003ePolicy implementation\u003c/h2\u003e\n\u003cp\u003eWe have to implement three main checks based on the restrictions that\nhave been described by our compliance team:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe namespace name has to meet a specific prefix format\n(\u003ccode\u003et-\\w+-\\w+\u003c/code\u003e \u0026ndash; e.g. \u003ccode\u003et-ei-billing\u003c/code\u003e, \u003ccode\u003et-sre-security\u003c/code\u003e\u0026hellip;)\u003c/li\u003e\n\u003cli\u003eTwo annotations have to exist:\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003ecompliance.my-company.com/team-contact-email\u003c/code\u003e: has to be an\nemail address with the host part pointing to \u003ccode\u003e@my-company.com\u003c/code\u003e; we\nwon\u0026rsquo;t allow other domain names as contact email.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecompliance.my-company.com/team-region\u003c/code\u003e: has to be one (and\nonly one) of \u003ccode\u003eAMER\u003c/code\u003e, \u003ccode\u003eAPAC\u003c/code\u003e or \u003ccode\u003eEMEA\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLet\u0026rsquo;s implement the first check:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/kubewarden/gjson\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/kubewarden/policy-sdk-go\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;regexp\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/wapc/wapc-guest-tinygo\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\t\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterFunctions\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFunctions\u003c/span\u003e{\n        \u003cspan style=\"color:#75715e\"\u003e// function that validates the k8s request\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validate\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) ([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n            \u003cspan style=\"color:#75715e\"\u003e// extract the name of the namespace by looking into the resource metadata attribute\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egjson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetBytes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request.object.metadata.name\u0026#34;\u003c/span\u003e)\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003enamespaceNameMatches\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eregexp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMatchString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e`^t-\\w+-\\w+`\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e())\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;internal error while processing namespace \u0026#39;%s\u0026#39;: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e !\u003cspan style=\"color:#a6e22e\"\u003enamespaceNameMatches\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;namespace \u0026#39;%s\u0026#39; does not comply with the company namespace naming convention: check https://internal.my-company.com/k8s/naming-conventions.md for more information\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAcceptRequest\u003c/span\u003e()\n\t\t},\n        \u003cspan style=\"color:#75715e\"\u003e// function that validates the policy settings\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validate_settings\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) ([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAcceptSettings\u003c/span\u003e()\n\t\t},\n\t})\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the policy will check that the namespace name is compliant with\nthe naming rule.\u003c/p\u003e\n\u003cp\u003eIf we try to create a namespace that does not follow this pattern,\nlike the previous \u003ccode\u003erequest.json\u003c/code\u003e file, we will receive the following\nerror:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kwctl run policy.wasm --request-path request.json 2\u0026gt; /dev/null | jq\n{\n  \u0026#34;uid\u0026#34;: \u0026#34;150d1761-43fb-4f36-bb73-7a3888a0bca2\u0026#34;,\n  \u0026#34;allowed\u0026#34;: false,\n  \u0026#34;status\u0026#34;: {\n    \u0026#34;message\u0026#34;: \u0026#34;namespace \u0026#39;test-policy-ns\u0026#39; does not comply with the company namespace naming convention: check https://internal.my-company.com/k8s/naming-conventions.md for more information\u0026#34;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow let\u0026rsquo;s implement the rest of the checks:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/kubewarden/gjson\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/kubewarden/policy-sdk-go\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;regexp\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/wapc/wapc-guest-tinygo\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\t\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterFunctions\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFunctions\u003c/span\u003e{\n\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validate\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) ([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n            \u003cspan style=\"color:#75715e\"\u003e// extract the name of the namespace by looking into the resource metadata attribute\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egjson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetBytes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request.object.metadata.name\u0026#34;\u003c/span\u003e)\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003enamespaceNameMatches\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eregexp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMatchString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e`^t-\\w+-\\w+`\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e())\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[compliance] internal error while processing namespace \u0026#39;%s\u0026#39;: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e !\u003cspan style=\"color:#a6e22e\"\u003enamespaceNameMatches\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[compliance] namespace \u0026#39;%s\u0026#39; does not comply with the company namespace naming convention: check https://internal.my-company.com/k8s/naming-conventions.md for more information\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eteamContactEmail\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egjson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetBytes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request.object.metadata.annotations.compliance\\\\.my-company\\\\.com/team-contact-email\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e()\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eteamContactEmail\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[compliance] the namespace \u0026#39;%s\u0026#39; is missing a mandatory annotation compliance.my-company.com/team-contact-email\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eteamContactEmailValidDomain\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eregexp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMatchString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e`@my-company\\.com$`\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eteamContactEmail\u003c/span\u003e)\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[compliance] internal error while processing namespace: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e !\u003cspan style=\"color:#a6e22e\"\u003eteamContactEmailValidDomain\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[compliance] the namespace \u0026#39;%s\u0026#39; does not comply with the company namespace naming convention: the compliance.my-company.com/team-contact-email annotation must end with @my-company.com\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eteamRegion\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egjson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetBytes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request.object.metadata.annotations.compliance\\\\.my-company\\\\.com/team-region\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e()\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eteamRegion\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AMER\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eteamRegion\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;APAC\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eteamRegion\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;EMEA\u0026#34;\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[compliance] the namespace \u0026#39;%s\u0026#39; does not comply with the company namespace naming convention: the compliance.my-company.com/team-region annotation must be one of: AMER, APAC or EMEA; is: \u0026#39;%s\u0026#39;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eteamRegion\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAcceptRequest\u003c/span\u003e()\n\t\t},\n\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validate_settings\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) ([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAcceptSettings\u003c/span\u003e()\n\t\t},\n\t})\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDespite the checks can be improved further, we have an initial\nimplementation of the policy that checks for compliance of the\nnamespace for our organization.\u003c/p\u003e\n\u003cp\u003eHowever, as you can see, we have a number of hardcoded logic, messages\nand bits that could be parameters. This way, we can have a pattern\nthat can be reused with different parameters. Depending on the policy,\nyou might even have multiple instances of the policy with different\nsettings \u0026ndash; potentially targeting different resources or HTTP verbs,\nso they could perform potentially different checks.\u003c/p\u003e\n\u003cp\u003eNow, let\u0026rsquo;s close the circle, and test a valid request against our\nlatest policy. I will save this request as \u003ccode\u003evalid-request.json\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e{\n\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AdmissionReview\u0026#34;\u003c/span\u003e,\n\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;admission.k8s.io/v1\u0026#34;\u003c/span\u003e,\n\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;request\u0026#34;\u003c/span\u003e: {\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;uid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;150d1761-43fb-4f36-bb73-7a3888a0bca2\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Namespace\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;resource\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;resource\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;namespaces\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;requestKind\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Namespace\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;requestResource\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;resource\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;namespaces\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;t-ei-billing\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;namespace\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;t-ei-billing\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;operation\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CREATE\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;userInfo\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kubernetes-admin\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;groups\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;system:masters\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;system:authenticated\u0026#34;\u003c/span\u003e]\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;object\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Namespace\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;metadata\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;t-ei-billing\u0026#34;\u003c/span\u003e,\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;uid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2cc6b1fc-7896-4091-b9c3-e034c89c0535\u0026#34;\u003c/span\u003e,\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;creationTimestamp\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2021-05-27T15:55:39Z\u0026#34;\u003c/span\u003e,\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;annotations\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;compliance.my-company.com/team-contact-email\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ei-billing@my-company.com\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;compliance.my-company.com/team-region\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;EMEA\u0026#34;\u003c/span\u003e\n\t\t\t\t},\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;managedFields\u0026#34;\u003c/span\u003e: [{\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;manager\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kubectl\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;operation\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Update\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2021-05-27T15:55:39Z\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;fieldsType\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;FieldsV1\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;fieldsV1\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;f:status\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;f:phase\u0026#34;\u003c/span\u003e: {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t},\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;spec\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;finalizers\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kubernetes\u0026#34;\u003c/span\u003e]\n\t\t\t},\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;phase\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Active\u0026#34;\u003c/span\u003e\n\t\t\t}\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;oldObject\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;dryRun\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;options\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CreateOptions\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;meta.k8s.io/v1\u0026#34;\u003c/span\u003e\n\t\t}\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow, we can run this policy against the \u003ccode\u003evalid-request.json\u003c/code\u003e request:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kwctl run policy.wasm --request-path valid-request.json 2\u0026gt; /dev/null | jq\n{\n  \u0026#34;uid\u0026#34;: \u0026#34;150d1761-43fb-4f36-bb73-7a3888a0bca2\u0026#34;,\n  \u0026#34;allowed\u0026#34;: true\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFeel free to play with the request. You can modify the annotations or\nnaming of the namespace, and check the error result you get back if\nthe request is not compliant.\u003c/p\u003e\n\u003cp\u003eAnd so, we can see that the policy behaves as we expect! We have seen\nsome aspects of Kubewarden and the policy cycle:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHow to write a policy from scratch\u003c/li\u003e\n\u003cli\u003eHow to test a policy with different requests\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHowever, for your policy to be active on a Kubernetes cluster there\nare some bits and pieces we are still missing. The main questions at\nthis point are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHow to safely make the policy easy to distribute\n\u003cul\u003e\n\u003cli\u003eKubewarden has focused on you reusing your existing knowledge\nand tools, so policies can either be distributed using an HTTPS\nserver, or preferrably, an OCI registry.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eHow to deploy the policy to a Kubernetes cluster\n\u003cul\u003e\n\u003cli\u003eWe have created the \u003ca href=\"https://github.com/kubewarden/kubewarden-controller\"\u003e\u003ccode\u003ekubewarden-controller\u003c/code\u003e\nproject\u003c/a\u003e\nthat makes it trivial to deploy policies inside your cluster,\nonce the previous point has been covered.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eHow can I connect the policy in Kubernetes? How can I establish what\ntype of requests will be evaluated by a policy?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are also some open questions, such as: what happens if a\nresource that was accepted with a previous revision of a policy now\nwould be rejected with the latest policy version? In a living and\nevolving environment that holds state this is a common\nsituation. Kubewarden has also plans to have you covered in this case.\u003c/p\u003e\n\u003cp\u003eWe will cover these topics in a much broader way in future blog\nposts.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eThank you for reading up to this point, we hope you enjoyed the post!\u003c/p\u003e\n\u003cp\u003eWe have seen how to build a policy from scratch, in this case using Go\n(and the TinyGo compiler). We have also seen that there are more SDKs\navailable to you such as the Rust and Swift ones.\u003c/p\u003e\n\u003cp\u003eWe have also covered how to test a policy once we have the WebAssembly\nbinary artifact, so we can run tests against the policy, ensuring that\nit behaves as we expect.\u003c/p\u003e\n\u003cp\u003eThere are some open questions regarding the policy distribution and\nrunning policies in a Kubernetes cluster that we opened in the last\nsection, and that we will cover in future blog posts.\u003c/p\u003e\n\u003cp\u003eStay tuned and thank you for reading!\u003c/p\u003e\n","date":1622592e3,"description":"","dir":"blog/2021/06/","expirydate":-62135596800,"fuzzywordcount":2500,"keywords":null,"kind":"page","lang":"en","lastmod":1667810414,"objectID":"633454c7df3186b68d9f4e34500fe56d","permalink":"/blog/2021/06/writing-your-first-policy-with-kubewarden/","postref":"633454c7df3186b68d9f4e34500fe56d","publishdate":"2021-06-02T00:00:00Z","readingtime":12,"relpermalink":"/blog/2021/06/writing-your-first-policy-with-kubewarden/","section":"blog","summary":"Kubewarden is a project focused on security and compliance. Its main goal is to allow you to write, test, distribute and run policies using the tooling that you already know and master, with a focus on controlling Kubernetes inner behaviors.\nPolicies are written in one of the supported languages, and the target object is a WebAssembly binary artifact. This is how Kubewarden can ensure that no matter where you built the policy, it can run on all platforms without any kind of adaptation.","tags":null,"title":"Writing your first policy with Kubewarden","type":"blog","url":null,"weight":0,"wordcount":2498},{"authors":null,"categories":null,"content":"\u003csection class=\"intro\"\u003e\n  \u003cdiv class=\"bg-primary\"\u003e\n    \u003cdiv class=\"wrap grid-one\"\u003e\n      \u003cdiv\u003e\n        \u003ch1 style=\"color: white;\"\u003eKubernetes Dynamic Admission at your fingertips\u003c/h1\u003e\n        \u003ch4 style=\"color: white;\"\u003eFlexible, secure and portable thanks to WebAssembly\u003c/h4\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\n  \u003cdiv class=\"folder\"\u003e\n    \u003ch4 style=\"color: white;\"\u003eGreat For\u003c/h4\u003e\n    \u003cdiv class=\"bg-light grid-dynamic text-center\"\u003e\n      \u003ch5\u003eFamiliar policy writing\u003c/h5\u003e\n      \u003ch5\u003eEasy policy distribution\u003c/h5\u003e\n      \u003ch5\u003eBuild and push once, run everywhere\u003c/h5\u003e\n      \u003ch5\u003eCommunity maintained policies\u003c/h5\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/section\u003e\n\n\u003csection class=\"wrap\"\u003e\n  \u003ch2\u003eWhat is Kubewarden?\u003c/h2\u003e\n  \u003cp class=\"text-center font-weight-light\"\u003eKubewarden is a policy engine for Kubernetes. Its mission is to\n  simplify the adoption of \u003cstrong\u003epolicy-as-code\u003c/strong\u003e.\n  \u003c/p\u003e\n\n  \u003cdiv class=grid-two\u003e\n    \u003cdiv\u003e\n      \u003ch4\u003eAs a Policy author\u003c/h4\u003e\n      \u003cp class=\"text-left font-weight-light\"\u003eKubewarden doesn't force you to learn a new Domain Specific Language\n      or a query language.\u003c/p\u003e\n      \u003cp class=\"text-left font-weight-light\"\u003eWrite policies in your favorite programming language. Reuse your skills and feel instantly productive.\n      \u003c/p\u003e\n    \u003c/div\u003e\n    \u003cdiv\u003e\n      \u003ch4\u003eAs a Kubernetes Operator\u003c/h4\u003e\n      \u003cp class=\"text-left font-weight-light\"\u003eKubewarden policies can be distributed using container registries. Keep using your existing infrastructure and processes.\u003c/p\u003e\n\n      \u003cp class=\"text-left font-weight-light\"\u003eIt's easy to experiment with policies and to integrate them into CI/CD pipelines.\u003c/p\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/section\u003e\n\u003chr /\u003e\n\n\u003csection class=\"wrap\"\u003e\n  \u003ch2\u003eWhy Use Kubewarden\u003c/h2\u003e\n  \u003cdiv class=\"grid-three\"\u003e\n    \u003cdiv\u003e\n      \u003ch5\u003eFreedom of choice\u003c/h5\u003e\n      \u003cp\u003eWrite policies using your favorite programming language, as long as it can be compiled into WebAssembly.\u003c/p\u003e\n    \u003c/div\u003e\n\n    \u003cdiv\u003e\n      \u003ch5\u003eFeel at home\u003c/h5\u003e\n      \u003cp\u003ePolicies are regular programs. Use the tools you love, reuse your skills, libraries and best practices.\u003c/p\u003e\n    \u003c/div\u003e\n\n    \u003cdiv\u003e\n      \u003ch5\u003ePortable\u003c/h5\u003e\n      \u003cp\u003ePolicies are portable. Once built, they can run everywhere, regardless of the architecture and Operating System.\u003c/p\u003e\n    \u003c/div\u003e\n\n  \u003c/div\u003e\n\u003c/section\u003e\n\u003chr /\u003e\n\n\u003csection class=\"wrap\"\u003e\n  \u003ch2\u003eHow it Works\u003c/h2\u003e\n  \u003cimg src=\"../images/how-it-works-kubewarden.svg\" alt=\"{{ .Site.Title }}\" style=\"padding: 3em; background: #eeeeee; border-radius: 25px;\"\u003e\n\n  \u003cp class=\"text-left font-weight-light\"\u003eKubewarden integrates with Kubernetes by providing a set of Custom Resources. These Custom\n  Resources simplify the process of enforcing policies on your cluster.\u003c/p\u003e\n  \u003cp class=\"text-left font-weight-light\"\u003ePolicies are implemented as WebAssembly modules and are distributed using regular\n  container registries. They are evaluated inside of a Kubewarden component called \u003cem\u003e\"Policy Server\".\u003c/em\u003e\u003c/p\u003e\n  \u003c/p\u003e\n  \u003cp class=\"text-left font-weight-light\"\u003eKubewarden Policy Server is a Kubernetes Admission Webhook. Each policy is exposed using a\n  dedicated endpoint. Policies are isolated from the host and from each other. Every single policy is confined inside of a dedicated secure sandbox.\n  \u003c/p\u003e\n\n\u003c/section\u003e\n\n\u003csection class=\"get-started\"\u003e\n  \u003cdiv class=\"white\"\u003e\n    \u003ch2 class=\"text-center\"\u003eGet Started\u003c/h2\u003e\n    \u003cpre\u003e\n\u003ccode\u003e\n$ helm repo add kubewarden https://charts.kubewarden.io\n$ kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.5.3/cert-manager.yaml\n$ kubectl wait --for=condition=Available deployment --timeout=2m -n cert-manager --all\n$ helm install --create-namespace -n kubewarden kubewarden-crds kubewarden/kubewarden-crds\n$ helm install --wait -n kubewarden kubewarden-controller kubewarden/kubewarden-controller\n$ helm install --wait -n kubewarden kubewarden-defaults kubewarden/kubewarden-defaults\n\n$ # ... and continue reading \u003ca href=\"https://docs.kubewarden.io/quick-start\" style=\"color: white;\"\u003ethe quick start\u003c/a\u003e documentation\n\u003c/code\u003e\n      \u003c/pre\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"bg-primary\"\u003e\n    \u003cdiv class=\"wrap\"\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/section\u003e\n\n\u003csection class=\"bg-light text-center cncf\"\u003e\n  \u003cdiv class=\"wrap\"\u003e\n    \u003cimg class=\"cncf-logo\" src=\"../images/cncf-color.png\"\u003e\n    \u003cp\u003e\n      We are a Cloud Native Computing Foundation Sandbox project.\n    \u003c/p\u003e\n  \u003c/div\u003e\n\u003c/section\u003e\n","date":1618572526,"description":"","dir":"/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"home","lang":"en","lastmod":1667810414,"objectID":"3971dee9690c45ec29595f6ae97154f9","permalink":"/","postref":"3971dee9690c45ec29595f6ae97154f9","publishdate":"2021-04-16T13:28:46+02:00","readingtime":2,"relpermalink":"/","section":"","summary":"Kubernetes Dynamic Admission at your fingertips Flexible, secure and portable thanks to WebAssembly    Great For Familiar policy writing Easy policy distribution Build and push once, run everywhere Community maintained policies    What is Kubewarden? Kubewarden is a policy engine for Kubernetes. Its mission is to simplify the adoption of policy-as-code.  As a Policy author Kubewarden doesn't force you to learn a new Domain Specific Language or a query language.","tags":null,"title":"Kubewarden: Kubernetes Dynamic Admission at your fingertips","type":"page","url":null,"weight":0,"wordcount":324},{"authors":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"/categories/","postref":"","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":null,"weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"/tags/","postref":"","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":null,"weight":0,"wordcount":0}]